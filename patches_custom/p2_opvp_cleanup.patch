diff --git a/sql/custom_updates/outdoor_pvp.sql b/sql/custom_updates/outdoor_pvp.sql
index 5cbe700..2d50158 100644
--- a/sql/custom_updates/outdoor_pvp.sql
+++ b/sql/custom_updates/outdoor_pvp.sql
@@ -3,12 +3,10 @@
 */
 
 -- del GOs
--- DELETE FROM gameobject_respawn WHERE guid IN (SELECT guid FROM gameobject WHERE id IN (182267, 182280,182281,182282,182222,182272,182273,182274,182266,182275,182276,182277,182301,182302,182303,182304,182305,182306,182307,182308,182297,182298,182299,182300));
 DELETE FROM gameobject WHERE id IN (182267, 182280,182281,182282,182222,182272,182273,182274,182266,182275,182276,182277,182301,182302,182303,182304,182305,182306,182307,182308,182297,182298,182299,182300);
 
 -- del NPCs
 DELETE FROM creature_addon WHERE guid IN (select guid from creature WHERE id IN (18816,18821,21474,21484,21483,18192,18817,18822,21485,21487,21488,18256));
--- DELETE FROM creature_respawn WHERE guid IN (select guid from creature WHERE id IN (18816,18821,21474,21484,21483,18192,18817,18822,21485,21487,21488,18256));
 DELETE FROM creature WHERE id IN (18816,18821,21474,21484,21483,18192,18817,18822,21485,21487,21488,18256);
 DELETE FROM creature where id in (27748, 27708, 29253, 27730, 29251, 27758, 27759, 29252,27760, 29250);
 
@@ -51,8 +49,12 @@ UPDATE quest_template SET reqspellcast1 = 0, reqspellcast2 = 0, reqspellcast3 =
 DELETE FROM gameobject WHERE id IN (181899, 182096, 182097, 182173, 182174, 182175, 182210, 182522, 182523, 183104, 183411, 183412, 183413, 183414, 182098);
 DELETE FROM creature WHERE id IN (18564, 18581);
 
--- DELETE FROM npc_option WHERE id = 51;
--- INSERT INTO npc_option(id, gossip_id, npcflag, icon, action, option_text) VALUES (51,0,536870912,0,18,"UNIT_NPC_FLAG_OUTDOORPVP");
+Delete from gossip_menu_option where menu_id = 40000;
+insert into gossip_menu_option (menu_id, id, option_icon, option_text, option_id)
+values (40000, 0, 0, 'Take Flag!', 19);
+delete from gossip_menu where entry = 40000;
+insert into gossip_menu (entry, text_id)
+values (40000, 0);
 
 
 DELETE FROM `mangos_string` WHERE `entry` BETWEEN 10001 AND 10055;
diff --git a/src/game/GameObject.cpp b/src/game/GameObject.cpp
index 14ddde2..24cb721 100644
--- a/src/game/GameObject.cpp
+++ b/src/game/GameObject.cpp
@@ -156,7 +156,7 @@ bool GameObject::Create(uint32 guidlow, uint32 name_id, Map *map, uint32 phaseMa
     // GAMEOBJECT_BYTES_1, index at 0, 1, 2 and 3
     SetGoState(go_state);
     SetGoType(GameobjectTypes(goinfo->type));
-    SetGoArtKit(0);                                         // unknown what this is
+    SetGoArtKit(artKit);
     SetGoAnimProgress(animprogress);
 
     SetByteValue(GAMEOBJECT_BYTES_1, 2, artKit);
diff --git a/src/game/Language.h b/src/game/Language.h
index d985667..138fb04 100644
--- a/src/game/Language.h
+++ b/src/game/Language.h
@@ -937,22 +937,22 @@ enum MangosStrings
     LANG_OPVP_TF_LOOSE_H                = 10031,
     LANG_OPVP_TF_LOOSE_A                = 10032,
     // opvp ep
-    LANG_OPVP_EP_CAPTURE_NPT_H          = 10033,
-    LANG_OPVP_EP_CAPTURE_NPT_A          = 10034,
-    LANG_OPVP_EP_CAPTURE_EWT_H          = 10035,
-    LANG_OPVP_EP_CAPTURE_EWT_A          = 10036,
-    LANG_OPVP_EP_CAPTURE_CGT_H          = 10037,
-    LANG_OPVP_EP_CAPTURE_CGT_A          = 10038,
-    LANG_OPVP_EP_CAPTURE_PWT_H          = 10039,
-    LANG_OPVP_EP_CAPTURE_PWT_A          = 10040,
-    LANG_OPVP_EP_LOOSE_NPT_H            = 10041,
-    LANG_OPVP_EP_LOOSE_NPT_A            = 10042,
-    LANG_OPVP_EP_LOOSE_EWT_H            = 10043,
-    LANG_OPVP_EP_LOOSE_EWT_A            = 10044,
-    LANG_OPVP_EP_LOOSE_CGT_H            = 10045,
-    LANG_OPVP_EP_LOOSE_CGT_A            = 10046,
-    LANG_OPVP_EP_LOOSE_PWT_H            = 10047,
-    LANG_OPVP_EP_LOOSE_PWT_A            = 10048,
+    LANG_OPVP_EP_CAPTURE_NORTHPASS_H    = 10033,
+    LANG_OPVP_EP_CAPTURE_NORTHPASS_A    = 10034,
+    LANG_OPVP_EP_CAPTURE_EASTWALL_H     = 10035,
+    LANG_OPVP_EP_CAPTURE_EASTWALL_A     = 10036,
+    LANG_OPVP_EP_CAPTURE_CROWNGUARD_H   = 10037,
+    LANG_OPVP_EP_CAPTURE_CROWNGUARD_A   = 10038,
+    LANG_OPVP_EP_CAPTURE_PLAGUEWOOD_H   = 10039,
+    LANG_OPVP_EP_CAPTURE_PLAGUEWOOD_A   = 10040,
+    LANG_OPVP_EP_LOOSE_NORTHPASS_H      = 10041,
+    LANG_OPVP_EP_LOOSE_NORTHPASS_A      = 10042,
+    LANG_OPVP_EP_LOOSE_EASTWALL_H       = 10043,
+    LANG_OPVP_EP_LOOSE_EASTWALL_A       = 10044,
+    LANG_OPVP_EP_LOOSE_CROWNGUARD_H     = 10045,
+    LANG_OPVP_EP_LOOSE_CROWNGUARD_A     = 10046,
+    LANG_OPVP_EP_LOOSE_PLAGUEWOOD_H     = 10047,
+    LANG_OPVP_EP_LOOSE_PLAGUEWOOD_A     = 10048,
     // opvp si
     LANG_OPVP_SI_CAPTURE_H              = 10049,
     LANG_OPVP_SI_CAPTURE_A              = 10050,
@@ -962,9 +962,9 @@ enum MangosStrings
     LANG_OPVP_GH_LOOSE_H                = 10053,
     LANG_OPVP_GH_LOOSE_A                = 10054,
     // opvp gossips
-    LANG_OPVP_EP_FLIGHT_NPT             = 10056,
-    LANG_OPVP_EP_FLIGHT_EWT             = 10057,
-    LANG_OPVP_EP_FLIGHT_CGT             = 10058,
+    LANG_OPVP_EP_FLIGHT_NORTHPASS       = 10056,
+    LANG_OPVP_EP_FLIGHT_EASTWALL        = 10057,
+    LANG_OPVP_EP_FLIGHT_CROWNGUARD      = 10058,
     LANG_OPVP_ZM_GOSSIP_ALLIANCE        = 10059,
     LANG_OPVP_ZM_GOSSIP_HORDE           = 10060,
 
diff --git a/src/game/OutdoorPvPEP.cpp b/src/game/OutdoorPvPEP.cpp
index b0f56ff..2d14b08 100644
--- a/src/game/OutdoorPvPEP.cpp
+++ b/src/game/OutdoorPvPEP.cpp
@@ -28,422 +28,302 @@
 #include "World.h"
 #include "GossipDef.h"
 
-OPvPCapturePointEP_EWT::OPvPCapturePointEP_EWT(OutdoorPvP *pvp)
-: OPvPCapturePoint(pvp), m_TowerState(EP_TS_N), m_UnitsSummonedSide(0)
-{
-    SetCapturePointData(EPCapturePoints[EP_EWT].entry,EPCapturePoints[EP_EWT].map,EPCapturePoints[EP_EWT].x,EPCapturePoints[EP_EWT].y,EPCapturePoints[EP_EWT].z,EPCapturePoints[EP_EWT].o,EPCapturePoints[EP_EWT].rot0,EPCapturePoints[EP_EWT].rot1,EPCapturePoints[EP_EWT].rot2,EPCapturePoints[EP_EWT].rot3);
-    AddObject(EP_EWT_FLAGS,EPTowerFlags[EP_EWT].entry,EPTowerFlags[EP_EWT].map,EPTowerFlags[EP_EWT].x,EPTowerFlags[EP_EWT].y,EPTowerFlags[EP_EWT].z,EPTowerFlags[EP_EWT].o,EPTowerFlags[EP_EWT].rot0,EPTowerFlags[EP_EWT].rot1,EPTowerFlags[EP_EWT].rot2,EPTowerFlags[EP_EWT].rot3);
-}
+const uint32 EP_LANG_LOOSE_A[EP_TOWER_NUM] = {LANG_OPVP_EP_LOOSE_CROWNGUARD_A,LANG_OPVP_EP_LOOSE_EASTWALL_A,LANG_OPVP_EP_LOOSE_NORTHPASS_A,LANG_OPVP_EP_LOOSE_PLAGUEWOOD_A};
 
-void OPvPCapturePointEP_EWT::ChangeState()
-{
-    if(fabs(m_value) == m_maxValue)  // state won't change, only phase when maxed out!
-    {
-        // if changing from controlling alliance to horde or vice versa
-        if( m_OldState == OBJECTIVESTATE_ALLIANCE && m_OldState != m_State )
-        {
-            sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_LOOSE_EWT_A));
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_EWT] = 0;
-        }
-        else if ( m_OldState == OBJECTIVESTATE_HORDE && m_OldState != m_State )
-        {
-            sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_LOOSE_EWT_H));
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_EWT] = 0;
-        }
+const uint32 EP_LANG_LOOSE_H[EP_TOWER_NUM] = {LANG_OPVP_EP_LOOSE_CROWNGUARD_H,LANG_OPVP_EP_LOOSE_EASTWALL_H,LANG_OPVP_EP_LOOSE_NORTHPASS_H,LANG_OPVP_EP_LOOSE_PLAGUEWOOD_H};
 
-        uint32 artkit = 21;
+const uint32 EP_LANG_CAPTURE_A[EP_TOWER_NUM] = {LANG_OPVP_EP_CAPTURE_CROWNGUARD_A,LANG_OPVP_EP_CAPTURE_EASTWALL_A,LANG_OPVP_EP_CAPTURE_NORTHPASS_A,LANG_OPVP_EP_CAPTURE_PLAGUEWOOD_A};
 
-        switch(m_State)
-        {
-        case OBJECTIVESTATE_ALLIANCE:
-            if(m_value == m_maxValue)
-                m_TowerState = EP_TS_A;
-            else
-                m_TowerState = EP_TS_A_P;
-            artkit = 2;
-            SummonSupportUnitAtNorthpassTower(ALLIANCE);
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_EWT] = ALLIANCE;
-            if(m_OldState != m_State) sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_CAPTURE_EWT_A));
-            break;
-        case OBJECTIVESTATE_HORDE:
-            if(m_value == -m_maxValue)
-                m_TowerState = EP_TS_H;
-            else
-                m_TowerState = EP_TS_H_P;
-            artkit = 1;
-            SummonSupportUnitAtNorthpassTower(HORDE);
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_EWT] = HORDE;
-            if(m_OldState != m_State) sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_CAPTURE_EWT_H));
-            break;
-        case OBJECTIVESTATE_NEUTRAL:
-            m_TowerState = EP_TS_N;
-            break;
-        case OBJECTIVESTATE_NEUTRAL_ALLIANCE_CHALLENGE:
-        case OBJECTIVESTATE_HORDE_ALLIANCE_CHALLENGE:
-            m_TowerState = EP_TS_N_A;
-            break;
-        case OBJECTIVESTATE_NEUTRAL_HORDE_CHALLENGE:
-        case OBJECTIVESTATE_ALLIANCE_HORDE_CHALLENGE:
-            m_TowerState = EP_TS_N_H;
-            break;
-        }
+const uint32 EP_LANG_CAPTURE_H[EP_TOWER_NUM] = {LANG_OPVP_EP_CAPTURE_CROWNGUARD_H,LANG_OPVP_EP_CAPTURE_EASTWALL_H,LANG_OPVP_EP_CAPTURE_NORTHPASS_H,LANG_OPVP_EP_CAPTURE_PLAGUEWOOD_H};
 
-        GameObject* flag = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT, m_capturePointGUID));
-        GameObject * flag2 = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT, m_Objects[EP_EWT_FLAGS]));
-        if(flag)
-        {
-            flag->SetGoArtKit(artkit);
-        }
-        if(flag2)
-        {
-            flag2->SetGoArtKit(artkit);
-        }
+const uint32 EP_LANG_FLIGHT_GOSSIPS[EP_TOWER_NUM-1] = {LANG_OPVP_EP_FLIGHT_NORTHPASS,LANG_OPVP_EP_FLIGHT_EASTWALL,LANG_OPVP_EP_FLIGHT_CROWNGUARD};
 
-        UpdateTowerState();
+OPvPCapturePointEP::OPvPCapturePointEP(OutdoorPvP *pvp,OutdoorPvPEPTowerType type)
+: OPvPCapturePoint(pvp), m_TowerType(type)
+{
+    SetCapturePointData(EPCapturePoints[type].entry,
+        EPCapturePoints[type].map,
+        EPCapturePoints[type].x,
+        EPCapturePoints[type].y,
+        EPCapturePoints[type].z,
+        EPCapturePoints[type].o,
+        EPCapturePoints[type].rot0,
+        EPCapturePoints[type].rot1,
+        EPCapturePoints[type].rot2,
+        EPCapturePoints[type].rot3);
 
-        // complete quest objective
-        if(m_TowerState == EP_TS_A || m_TowerState == EP_TS_H)
-            SendObjectiveComplete(EP_EWT_CM, 0);
-    }
-}
+    for (uint8 i = 0; i < 2; i++)
+        AddObject(type+EP_TOWER_NUM*i,
+            EPTowerFlags[type+EP_TOWER_NUM*i].entry,
+            EPTowerFlags[type+EP_TOWER_NUM*i].map,
+            EPTowerFlags[type+EP_TOWER_NUM*i].x,
+            EPTowerFlags[type+EP_TOWER_NUM*i].y,
+            EPTowerFlags[type+EP_TOWER_NUM*i].z,
+            EPTowerFlags[type+EP_TOWER_NUM*i].o,
+            EPTowerFlags[type+EP_TOWER_NUM*i].rot0,
+            EPTowerFlags[type+EP_TOWER_NUM*i].rot1,
+            EPTowerFlags[type+EP_TOWER_NUM*i].rot2,
+            EPTowerFlags[type+EP_TOWER_NUM*i].rot3);
 
-void OPvPCapturePointEP_EWT::SendChangePhase()
-{
-    // send this too, sometimes the slider disappears, dunno why :(
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 1);
-    // send these updates to only the ones in this objective
-    uint32 phase = (uint32)ceil(( m_value + m_maxValue) / ( 2 * m_maxValue ) * 100.0f);
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS, phase);
-    // send this too, sometimes it resets :S
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_N, m_neutralValuePct);
+    EP_TOWER_EVENT_TEAM[type] = 0;
 }
 
-void OPvPCapturePointEP_EWT::FillInitialWorldStates(WorldPacket& data, uint32& count)
+OutdoorPvPEP::OutdoorPvPEP()
 {
-    FillInitialWorldState(data, count, EP_EWT_A,   bool(m_TowerState & EP_TS_A));
-    FillInitialWorldState(data, count, EP_EWT_H,   bool(m_TowerState & EP_TS_H));
-    FillInitialWorldState(data, count, EP_EWT_A_P, bool(m_TowerState & EP_TS_A_P));
-    FillInitialWorldState(data, count, EP_EWT_H_P, bool(m_TowerState & EP_TS_H_P));
-    FillInitialWorldState(data, count, EP_EWT_N_A, bool(m_TowerState & EP_TS_N_A));
-    FillInitialWorldState(data, count, EP_EWT_N_H, bool(m_TowerState & EP_TS_N_H));
-    FillInitialWorldState(data, count, EP_EWT_N,   bool(m_TowerState & EP_TS_N));
+    m_TypeId = OUTDOOR_PVP_EP;
 }
 
-void OPvPCapturePointEP_EWT::UpdateTowerState()
+bool OutdoorPvPEP::SetupOutdoorPvP()
 {
-    m_PvP->SendUpdateWorldState(EP_EWT_A , bool(m_TowerState & EP_TS_A));
-    m_PvP->SendUpdateWorldState(EP_EWT_H , bool(m_TowerState & EP_TS_H));
-    m_PvP->SendUpdateWorldState(EP_EWT_A_P , bool(m_TowerState & EP_TS_A_P));
-    m_PvP->SendUpdateWorldState(EP_EWT_H_P , bool(m_TowerState & EP_TS_H_P));
-    m_PvP->SendUpdateWorldState(EP_EWT_N_A , bool(m_TowerState & EP_TS_N_A));
-    m_PvP->SendUpdateWorldState(EP_EWT_N_H , bool(m_TowerState & EP_TS_N_H));
-    m_PvP->SendUpdateWorldState(EP_EWT_N , bool(m_TowerState & EP_TS_N));
-}
+    m_AllianceTowersControlled = 0;
+    m_HordeTowersControlled = 0;
 
-bool OPvPCapturePointEP_EWT::HandlePlayerEnter(Player *plr)
-{
-    if(OPvPCapturePoint::HandlePlayerEnter(plr))
-    {
-        plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 1);
-        uint32 phase = (uint32)ceil(( m_value + m_maxValue) / ( 2 * m_maxValue ) * 100.0f);
-        plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS, phase);
-        plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_N, m_neutralValuePct);
-        return true;
-    }
-    return false;
-}
+    // add the zones affected by the pvp buff
+    for (uint8 i = 0; i < OutdoorPvPEPBuffZonesNum; ++i)
+        RegisterZone(OutdoorPvPEPBuffZones[i]);
 
-void OPvPCapturePointEP_EWT::HandlePlayerLeave(Player *plr)
-{
-    plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 0);
-    OPvPCapturePoint::HandlePlayerLeave(plr);
+    AddCapturePoint(new OPvPCapturePointEP(this,EP_TOWER_CROWNGUARD));
+    AddCapturePoint(new OPvPCapturePointEP(this,EP_TOWER_EASTWALL));
+    AddCapturePoint(new OPvPCapturePointEP(this,EP_TOWER_NORTHPASS));
+    AddCapturePoint(new OPvPCapturePointEP(this,EP_TOWER_PLAGUEWOOD));
+
+    return true;
 }
 
-void OPvPCapturePointEP_EWT::SummonSupportUnitAtNorthpassTower(uint32 team)
+void OutdoorPvPEP::HandlePlayerEnterZone(Player * plr, uint32 zone)
 {
-    if(m_UnitsSummonedSide != team)
+    // add buffs
+    if (plr->GetTeam() == ALLIANCE)
     {
-        m_UnitsSummonedSide = team;
-        const creature_type * ct = NULL;
-        if(team == ALLIANCE)
-            ct=EP_EWT_Summons_A;
-        else
-            ct=EP_EWT_Summons_H;
-
-        for (int i = 0; i < EP_EWT_NUM_CREATURES; ++i)
-        {
-            DelCreature(i);
-            AddCreature(i,ct[i].entry,ct[i].teamval,ct[i].map,ct[i].x,ct[i].y,ct[i].z,ct[i].o,1000000);
-        }
+        if (m_AllianceTowersControlled > 0)
+            plr->CastSpell(plr,EP_AllianceBuffs[m_AllianceTowersControlled-1],true);
     }
+    else
+    {
+        if (m_HordeTowersControlled > 0)
+            plr->CastSpell(plr,EP_HordeBuffs[m_HordeTowersControlled-1],true);
+    }
+    OutdoorPvP::HandlePlayerEnterZone(plr,zone);
 }
 
-// NPT
-OPvPCapturePointEP_NPT::OPvPCapturePointEP_NPT(OutdoorPvP *pvp)
-: OPvPCapturePoint(pvp), m_TowerState(EP_TS_N), m_SummonedGOSide(0)
+void OutdoorPvPEP::HandlePlayerLeaveZone(Player * plr, uint32 zone)
 {
-    SetCapturePointData(EPCapturePoints[EP_NPT].entry,EPCapturePoints[EP_NPT].map,EPCapturePoints[EP_NPT].x,EPCapturePoints[EP_NPT].y,EPCapturePoints[EP_NPT].z,EPCapturePoints[EP_NPT].o,EPCapturePoints[EP_NPT].rot0,EPCapturePoints[EP_NPT].rot1,EPCapturePoints[EP_NPT].rot2,EPCapturePoints[EP_NPT].rot3);
-    AddObject(EP_NPT_FLAGS,EPTowerFlags[EP_NPT].entry,EPTowerFlags[EP_NPT].map,EPTowerFlags[EP_NPT].x,EPTowerFlags[EP_NPT].y,EPTowerFlags[EP_NPT].z,EPTowerFlags[EP_NPT].o,EPTowerFlags[EP_NPT].rot0,EPTowerFlags[EP_NPT].rot1,EPTowerFlags[EP_NPT].rot2,EPTowerFlags[EP_NPT].rot3);
+    // remove buffs
+    if (plr->GetTeam() == ALLIANCE)
+    {
+        for (uint8 i = 0; i < OutdoorPvPEPTeamsBuffNum; ++i)
+            plr->RemoveAurasDueToSpell(EP_AllianceBuffs[i]);
+    }
+    else
+    {
+        for (uint8 i = 0; i < OutdoorPvPEPTeamsBuffNum; ++i)
+            plr->RemoveAurasDueToSpell(EP_HordeBuffs[i]);
+    }
+    OutdoorPvP::HandlePlayerLeaveZone(plr, zone);
 }
 
-void OPvPCapturePointEP_NPT::ChangeState()
+bool OutdoorPvPEP::Update(uint32 diff)
 {
-    if(fabs(m_value) == m_maxValue)  // state won't change, only phase when maxed out!
+    bool changed = false;
+    if (changed = OutdoorPvP::Update(diff))
     {
-        // if changing from controlling alliance to horde or vice versa
-        if( m_OldState == OBJECTIVESTATE_ALLIANCE && m_OldState != m_State )
+        for (uint8 i = 0; i < OutdoorPvPEPTeamsBuffNum; ++i)
         {
-            sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_LOOSE_NPT_A));
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_NPT] = 0;
-        }
-        else if ( m_OldState == OBJECTIVESTATE_HORDE && m_OldState != m_State )
-        {
-            sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_LOOSE_NPT_H));
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_NPT] = 0;
+            TeamCastSpell(TEAM_ALLIANCE, -EP_AllianceBuffs[i]);
+            TeamCastSpell(TEAM_HORDE, -EP_HordeBuffs[i]);
         }
 
-        uint32 artkit = 21;
+        uint32 AllianceBuff = m_AllianceTowersControlled > 0 ? EP_AllianceBuffs[m_AllianceTowersControlled-1] : 0;
+        uint32 HordeBuff = m_HordeTowersControlled > 0 ? EP_HordeBuffs[m_HordeTowersControlled-1] : 0;
+        if (m_AllianceTowersControlled > 0)
+            TeamApplyBuff(TEAM_ALLIANCE, AllianceBuff, HordeBuff);
+        if (m_HordeTowersControlled > 0)
+            TeamApplyBuff(TEAM_HORDE, HordeBuff, AllianceBuff);
 
-        switch(m_State)
-        {
-        case OBJECTIVESTATE_ALLIANCE:
-            if(m_value == m_maxValue)
-                m_TowerState = EP_TS_A;
-            else
-                m_TowerState = EP_TS_A_P;
-            artkit = 2;
-            SummonGO(ALLIANCE);
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_NPT] = ALLIANCE;
-            if(m_OldState != m_State) sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_CAPTURE_NPT_A));
-            break;
-        case OBJECTIVESTATE_HORDE:
-            if(m_value == -m_maxValue)
-                m_TowerState = EP_TS_H;
-            else
-                m_TowerState = EP_TS_H_P;
-            artkit = 1;
-            SummonGO(HORDE);
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_NPT] = HORDE;
-            if(m_OldState != m_State) sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_CAPTURE_NPT_H));
-            break;
-        case OBJECTIVESTATE_NEUTRAL:
-            m_TowerState = EP_TS_N;
-            m_SummonedGOSide = 0;
-            DelObject(EP_NPT_BUFF);
-            break;
-        case OBJECTIVESTATE_NEUTRAL_ALLIANCE_CHALLENGE:
-        case OBJECTIVESTATE_HORDE_ALLIANCE_CHALLENGE:
-            m_TowerState = EP_TS_N_A;
-            break;
-        case OBJECTIVESTATE_NEUTRAL_HORDE_CHALLENGE:
-        case OBJECTIVESTATE_ALLIANCE_HORDE_CHALLENGE:
-            m_TowerState = EP_TS_N_H;
-            break;
-        }
-
-        GameObject * flag = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT, m_capturePointGUID));
-        GameObject * flag2 = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT, m_Objects[EP_NPT_FLAGS]));
-        if(flag)
-        {
-            flag->SetGoArtKit(artkit);
-        }
-        if(flag2)
-        {
-            flag2->SetGoArtKit(artkit);
-        }
-
-        UpdateTowerState();
-
-        // complete quest objective
-        if(m_TowerState == EP_TS_A || m_TowerState == EP_TS_H)
-            SendObjectiveComplete(EP_NPT_CM, 0);
+        SendUpdateWorldState(EP_UI_TOWER_COUNT_A, m_AllianceTowersControlled);
+        SendUpdateWorldState(EP_UI_TOWER_COUNT_H, m_HordeTowersControlled);
     }
+    return changed;
 }
 
-void OPvPCapturePointEP_NPT::SendChangePhase()
+void OutdoorPvPEP::SendRemoveWorldStates(Player *plr)
 {
-    // send this too, sometimes the slider disappears, dunno why :(
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 1);
-    // send these updates to only the ones in this objective
-    uint32 phase = (uint32)ceil(( m_value + m_maxValue) / ( 2 * m_maxValue ) * 100.0f);
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS, phase);
-    // send this too, sometimes it resets :S
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_N, m_neutralValuePct);
-}
+    plr->SendUpdateWorldState(EP_UI_TOWER_COUNT_A,0);
+    plr->SendUpdateWorldState(EP_UI_TOWER_COUNT_H,0);
+    plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY,0);
+    plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS,0);
+    plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_N,0);
 
-void OPvPCapturePointEP_NPT::FillInitialWorldStates(WorldPacket& data, uint32& count)
-{
-    FillInitialWorldState(data, count, EP_NPT_A,   bool(m_TowerState & EP_TS_A));
-    FillInitialWorldState(data, count, EP_NPT_H,   bool(m_TowerState & EP_TS_H));
-    FillInitialWorldState(data, count, EP_NPT_A_P, bool(m_TowerState & EP_TS_A_P));
-    FillInitialWorldState(data, count, EP_NPT_H_P,  bool(m_TowerState & EP_TS_H_P));
-    FillInitialWorldState(data, count, EP_NPT_N_A, bool(m_TowerState & EP_TS_N_A));
-    FillInitialWorldState(data, count, EP_NPT_N_H, bool(m_TowerState & EP_TS_N_H));
-    FillInitialWorldState(data, count, EP_NPT_N,   bool(m_TowerState & EP_TS_N));
+    for (uint8 i = 0; i < EP_TOWER_NUM; ++i)
+    {
+        plr->SendUpdateWorldState(EP_MAP_N[i],0);
+        plr->SendUpdateWorldState(EP_MAP_A[i],0);
+        plr->SendUpdateWorldState(EP_MAP_H[i],0);
+        plr->SendUpdateWorldState(EP_MAP_N_A[i],0);
+        plr->SendUpdateWorldState(EP_MAP_N_H[i],0);
+    }
 }
 
-void OPvPCapturePointEP_NPT::UpdateTowerState()
+void OutdoorPvPEP::FillInitialWorldStates(WorldPacket &data, uint32& count)
 {
-    m_PvP->SendUpdateWorldState(EP_NPT_A , bool(m_TowerState & EP_TS_A));
-    m_PvP->SendUpdateWorldState(EP_NPT_H , bool(m_TowerState & EP_TS_H));
-    m_PvP->SendUpdateWorldState(EP_NPT_A_P , bool(m_TowerState & EP_TS_A_P));
-    m_PvP->SendUpdateWorldState(EP_NPT_H_P , bool(m_TowerState & EP_TS_H_P));
-    m_PvP->SendUpdateWorldState(EP_NPT_N_A , bool(m_TowerState & EP_TS_N_A));
-    m_PvP->SendUpdateWorldState(EP_NPT_N_H , bool(m_TowerState & EP_TS_N_H));
-    m_PvP->SendUpdateWorldState(EP_NPT_N , bool(m_TowerState & EP_TS_N));
+    data << EP_UI_TOWER_COUNT_A << m_AllianceTowersControlled;
+    data << EP_UI_TOWER_COUNT_H << m_HordeTowersControlled;
+    data << EP_UI_TOWER_SLIDER_DISPLAY << uint32(0);
+    data << EP_UI_TOWER_SLIDER_POS << uint32(50);
+    data << EP_UI_TOWER_SLIDER_N << uint32(100);
+    for (OPvPCapturePointMap::iterator itr = m_capturePoints.begin(); itr != m_capturePoints.end(); ++itr)
+    {
+        itr->second->FillInitialWorldStates(data, count);
+    }
 }
 
-bool OPvPCapturePointEP_NPT::HandlePlayerEnter(Player *plr)
+void OPvPCapturePointEP::ChangeState()
 {
-    if(OPvPCapturePoint::HandlePlayerEnter(plr))
+    uint32 field = 0;
+    switch (m_OldState)
     {
-        plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 1);
-        uint32 phase = (uint32)ceil(( m_value + m_maxValue) / ( 2 * m_maxValue ) * 100.0f);
-        plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS, phase);
-        plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_N, m_neutralValuePct);
-        return true;
+    case OBJECTIVESTATE_NEUTRAL:
+        field = EP_MAP_N[m_TowerType];
+        break;
+    case OBJECTIVESTATE_ALLIANCE:
+        field = EP_MAP_A[m_TowerType];
+        if (((OutdoorPvPEP*)m_PvP)->m_AllianceTowersControlled)
+            ((OutdoorPvPEP*)m_PvP)->m_AllianceTowersControlled--;
+        sWorld.SendZoneText(OutdoorPvPEPBuffZones[0],sObjectMgr.GetMangosStringForDBCLocale(EP_LANG_LOOSE_A[m_TowerType]));
+        break;
+    case OBJECTIVESTATE_HORDE:
+        field = EP_MAP_H[m_TowerType];
+        if (((OutdoorPvPEP*)m_PvP)->m_HordeTowersControlled)
+            ((OutdoorPvPEP*)m_PvP)->m_HordeTowersControlled--;
+        sWorld.SendZoneText(OutdoorPvPEPBuffZones[0],sObjectMgr.GetMangosStringForDBCLocale(EP_LANG_LOOSE_H[m_TowerType]));
+        break;
+    case OBJECTIVESTATE_NEUTRAL_ALLIANCE_CHALLENGE:
+    case OBJECTIVESTATE_ALLIANCE_HORDE_CHALLENGE:
+        field = EP_MAP_N_A[m_TowerType];
+        break;
+    case OBJECTIVESTATE_NEUTRAL_HORDE_CHALLENGE:
+    case OBJECTIVESTATE_HORDE_ALLIANCE_CHALLENGE:
+        field = EP_MAP_N_H[m_TowerType];
+        break;
     }
-    return false;
-}
 
-void OPvPCapturePointEP_NPT::HandlePlayerLeave(Player *plr)
-{
-    plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 0);
-    OPvPCapturePoint::HandlePlayerLeave(plr);
-}
+    // send world state update
+    if (field)
+    {
+        m_PvP->SendUpdateWorldState(field, 0);
+        field = 0;
+    }
 
-void OPvPCapturePointEP_NPT::SummonGO(uint32 team)
-{
-    if(m_SummonedGOSide != team)
+    uint32 artkit = 21;
+    switch (m_State)
     {
-        m_SummonedGOSide = team;
-        DelObject(EP_NPT_BUFF);
-        AddObject(EP_NPT_BUFF,EP_NPT_LordaeronShrine.entry,EP_NPT_LordaeronShrine.map,EP_NPT_LordaeronShrine.x,EP_NPT_LordaeronShrine.y,EP_NPT_LordaeronShrine.z,EP_NPT_LordaeronShrine.o,EP_NPT_LordaeronShrine.rot0,EP_NPT_LordaeronShrine.rot1,EP_NPT_LordaeronShrine.rot2,EP_NPT_LordaeronShrine.rot3);
-        GameObject * go = ObjectAccessor::GetGameObjectInWorld(m_Objects[EP_NPT_BUFF]);
-        if(go)
-            go->SetUInt32Value(GAMEOBJECT_FACTION,(team == ALLIANCE ? 84 : 83));
+    case OBJECTIVESTATE_NEUTRAL:
+        field = EP_MAP_N[m_TowerType];
+        break;
+    case OBJECTIVESTATE_ALLIANCE:
+        field = EP_MAP_A[m_TowerType];
+        artkit = 2;
+        if (((OutdoorPvPEP*)m_PvP)->m_AllianceTowersControlled<4)
+            ((OutdoorPvPEP*)m_PvP)->m_AllianceTowersControlled++;
+        sWorld.SendZoneText(OutdoorPvPEPBuffZones[0],sObjectMgr.GetMangosStringForDBCLocale(EP_LANG_CAPTURE_A[m_TowerType]));
+        break;
+    case OBJECTIVESTATE_HORDE:
+        field = EP_MAP_H[m_TowerType];
+        artkit = 1;
+        if (((OutdoorPvPEP*)m_PvP)->m_HordeTowersControlled<4)
+            ((OutdoorPvPEP*)m_PvP)->m_HordeTowersControlled++;
+        sWorld.SendZoneText(OutdoorPvPEPBuffZones[0],sObjectMgr.GetMangosStringForDBCLocale(EP_LANG_CAPTURE_H[m_TowerType]));
+        break;
+    case OBJECTIVESTATE_NEUTRAL_ALLIANCE_CHALLENGE:
+    case OBJECTIVESTATE_ALLIANCE_HORDE_CHALLENGE:
+        field = EP_MAP_N_A[m_TowerType];
+        break;
+    case OBJECTIVESTATE_NEUTRAL_HORDE_CHALLENGE:
+    case OBJECTIVESTATE_HORDE_ALLIANCE_CHALLENGE:
+        field = EP_MAP_N_H[m_TowerType];
+        break;
     }
+
+    UpdateTowerEvents();
+
+    GameObject* flag = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT, m_Objects[m_TowerType]));
+    GameObject* flag2 = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT, m_Objects[m_TowerType+EP_TOWER_NUM]));
+    if (m_capturePoint)
+        m_capturePoint->SetGoArtKit(artkit);
+    if (flag)
+        flag->SetGoArtKit(artkit);
+    if (flag2)
+        flag2->SetGoArtKit(artkit);
+
+    // send world state update
+    if (field)
+        m_PvP->SendUpdateWorldState(field, 1);
+
+    // complete quest objective
+    if (m_State == OBJECTIVESTATE_ALLIANCE || m_State == OBJECTIVESTATE_HORDE)
+        SendObjectiveComplete(EP_CREDITMARKER[m_TowerType], 0);
 }
 
-// CGT
-OPvPCapturePointEP_CGT::OPvPCapturePointEP_CGT(OutdoorPvP *pvp)
-: OPvPCapturePoint(pvp), m_TowerState(EP_TS_N), m_GraveyardSide(0)
+void OPvPCapturePointEP::SendChangePhase()
 {
-    SetCapturePointData(EPCapturePoints[EP_CGT].entry,EPCapturePoints[EP_CGT].map,EPCapturePoints[EP_CGT].x,EPCapturePoints[EP_CGT].y,EPCapturePoints[EP_CGT].z,EPCapturePoints[EP_CGT].o,EPCapturePoints[EP_CGT].rot0,EPCapturePoints[EP_CGT].rot1,EPCapturePoints[EP_CGT].rot2,EPCapturePoints[EP_CGT].rot3);
-    AddObject(EP_CGT_FLAGS,EPTowerFlags[EP_CGT].entry,EPTowerFlags[EP_CGT].map,EPTowerFlags[EP_CGT].x,EPTowerFlags[EP_CGT].y,EPTowerFlags[EP_CGT].z,EPTowerFlags[EP_CGT].o,EPTowerFlags[EP_CGT].rot0,EPTowerFlags[EP_CGT].rot1,EPTowerFlags[EP_CGT].rot2,EPTowerFlags[EP_CGT].rot3);
+    SendUpdateWorldState(EP_UI_TOWER_SLIDER_N, m_neutralValuePct);
+    // send these updates to only the ones in this objective
+    uint32 phase = (uint32)ceil((m_value + m_maxValue) / (2 * m_maxValue) * 100.0f);
+    SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS, phase);
+    SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 1);
 }
 
-void OPvPCapturePointEP_CGT::ChangeState()
+void OPvPCapturePointEP::FillInitialWorldStates(WorldPacket &data)
 {
-    if(fabs(m_value) == m_maxValue)  // state won't change, only phase when maxed out!
+    switch (m_State)
     {
-        // if changing from controlling alliance to horde or vice versa
-        if( m_OldState == OBJECTIVESTATE_ALLIANCE && m_OldState != m_State )
-        {
-            sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_LOOSE_CGT_A));
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_CGT] = 0;
-        }
-        else if ( m_OldState == OBJECTIVESTATE_HORDE && m_OldState != m_State )
-        {
-            sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_LOOSE_CGT_H));
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_CGT] = 0;
-        }
-
-        uint32 artkit = 21;
-
-        switch(m_State)
-        {
         case OBJECTIVESTATE_ALLIANCE:
-            if(m_value == m_maxValue)
-                m_TowerState = EP_TS_A;
-            else
-                m_TowerState = EP_TS_A_P;
-            artkit = 2;
-            LinkGraveYard(ALLIANCE);
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_CGT] = ALLIANCE;
-            if(m_OldState != m_State) sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_CAPTURE_CGT_A));
+            data << uint32(EP_MAP_N[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_A[m_TowerType]) << uint32(1);
+            data << uint32(EP_MAP_H[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_N_A[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_N_H[m_TowerType]) << uint32(0);
             break;
         case OBJECTIVESTATE_HORDE:
-            if(m_value == -m_maxValue)
-                m_TowerState = EP_TS_H;
-            else
-                m_TowerState = EP_TS_H_P;
-            artkit = 1;
-            LinkGraveYard(HORDE);
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_CGT] = HORDE;
-            if(m_OldState != m_State) sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_CAPTURE_CGT_H));
-            break;
-        case OBJECTIVESTATE_NEUTRAL:
-            m_TowerState = EP_TS_N;
+            data << uint32(EP_MAP_N[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_A[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_H[m_TowerType]) << uint32(1);
+            data << uint32(EP_MAP_N_A[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_N_H[m_TowerType]) << uint32(0);
             break;
         case OBJECTIVESTATE_NEUTRAL_ALLIANCE_CHALLENGE:
-        case OBJECTIVESTATE_HORDE_ALLIANCE_CHALLENGE:
-            m_TowerState = EP_TS_N_A;
+        case OBJECTIVESTATE_ALLIANCE_HORDE_CHALLENGE:
+            data << uint32(EP_MAP_N[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_A[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_H[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_N_A[m_TowerType]) << uint32(1);
+            data << uint32(EP_MAP_N_H[m_TowerType]) << uint32(0);
             break;
         case OBJECTIVESTATE_NEUTRAL_HORDE_CHALLENGE:
-        case OBJECTIVESTATE_ALLIANCE_HORDE_CHALLENGE:
-            m_TowerState = EP_TS_N_H;
+        case OBJECTIVESTATE_HORDE_ALLIANCE_CHALLENGE:
+            data << uint32(EP_MAP_N[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_A[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_H[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_N_A[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_N_H[m_TowerType]) << uint32(1);
+            break;
+        case OBJECTIVESTATE_NEUTRAL:
+        default:
+            data << uint32(EP_MAP_N[m_TowerType]) << uint32(1);
+            data << uint32(EP_MAP_A[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_H[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_N_A[m_TowerType]) << uint32(0);
+            data << uint32(EP_MAP_N_H[m_TowerType]) << uint32(0);
             break;
-        }
-
-        GameObject* flag = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT, m_capturePointGUID));
-        GameObject* flag2 = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT,m_Objects[EP_CGT_FLAGS]));
-        if(flag)
-        {
-            flag->SetGoArtKit(artkit);
-        }
-        if(flag2)
-        {
-            flag2->SetGoArtKit(artkit);
-        }
-
-        UpdateTowerState();
-
-        // complete quest objective
-        if(m_TowerState == EP_TS_A || m_TowerState == EP_TS_H)
-            SendObjectiveComplete(EP_CGT_CM, 0);
     }
 }
 
-void OPvPCapturePointEP_CGT::SendChangePhase()
+bool OPvPCapturePointEP::HandlePlayerEnter(Player *plr)
 {
-    // send this too, sometimes the slider disappears, dunno why :(
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 1);
-    // send these updates to only the ones in this objective
-    uint32 phase = (uint32)ceil(( m_value + m_maxValue) / ( 2 * m_maxValue ) * 100.0f);
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS, phase);
-    // send this too, sometimes it resets :S
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_N, m_neutralValuePct);
-}
-
-void OPvPCapturePointEP_CGT::FillInitialWorldStates(WorldPacket& data, uint32& count)
-{
-    FillInitialWorldState(data, count, EP_CGT_A,   bool(m_TowerState & EP_TS_A));
-    FillInitialWorldState(data, count, EP_CGT_H,   bool(m_TowerState & EP_TS_H));
-    FillInitialWorldState(data, count, EP_CGT_A_P, bool(m_TowerState & EP_TS_A_P));
-    FillInitialWorldState(data, count, EP_CGT_H_P, bool(m_TowerState & EP_TS_H_P));
-    FillInitialWorldState(data, count, EP_CGT_N_A, bool(m_TowerState & EP_TS_N_A));
-    FillInitialWorldState(data, count, EP_CGT_N_H, bool(m_TowerState & EP_TS_N_H));
-    FillInitialWorldState(data, count, EP_CGT_N,   bool(m_TowerState & EP_TS_N));
-}
-
-void OPvPCapturePointEP_CGT::UpdateTowerState()
-{
-    m_PvP->SendUpdateWorldState(EP_CGT_A , bool(m_TowerState & EP_TS_A));
-    m_PvP->SendUpdateWorldState(EP_CGT_H , bool(m_TowerState & EP_TS_H));
-    m_PvP->SendUpdateWorldState(EP_CGT_A_P , bool(m_TowerState & EP_TS_A_P));
-    m_PvP->SendUpdateWorldState(EP_CGT_H_P , bool(m_TowerState & EP_TS_H_P));
-    m_PvP->SendUpdateWorldState(EP_CGT_N_A , bool(m_TowerState & EP_TS_N_A));
-    m_PvP->SendUpdateWorldState(EP_CGT_N_H , bool(m_TowerState & EP_TS_N_H));
-    m_PvP->SendUpdateWorldState(EP_CGT_N , bool(m_TowerState & EP_TS_N));
-}
-
-bool OPvPCapturePointEP_CGT::HandlePlayerEnter(Player *plr)
-{
-    if(OPvPCapturePoint::HandlePlayerEnter(plr))
+    if (OPvPCapturePoint::HandlePlayerEnter(plr))
     {
         plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 1);
-        uint32 phase = (uint32)ceil(( m_value + m_maxValue) / ( 2 * m_maxValue ) * 100.0f);
+        uint32 phase = (uint32)ceil((m_value + m_maxValue) / (2 * m_maxValue) * 100.0f);
         plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS, phase);
         plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_N, m_neutralValuePct);
         return true;
@@ -451,314 +331,140 @@ bool OPvPCapturePointEP_CGT::HandlePlayerEnter(Player *plr)
     return false;
 }
 
-void OPvPCapturePointEP_CGT::HandlePlayerLeave(Player *plr)
+void OPvPCapturePointEP::HandlePlayerLeave(Player *plr)
 {
     plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 0);
     OPvPCapturePoint::HandlePlayerLeave(plr);
 }
 
-void OPvPCapturePointEP_CGT::LinkGraveYard(uint32 team)
+// Tower specific events
+void OPvPCapturePointEP::UpdateTowerEvents()
 {
-    if(m_GraveyardSide != team)
+    if (m_State == OBJECTIVESTATE_ALLIANCE || m_State == OBJECTIVESTATE_HORDE)
     {
-        m_GraveyardSide = team;
-        sObjectMgr.RemoveGraveYardLink(EP_GraveYardId,EP_GraveYardZone,team,false);
-        sObjectMgr.AddGraveYardLink(EP_GraveYardId,EP_GraveYardZone,team,false);
-    }
-}
-
-// PWT
-OPvPCapturePointEP_PWT::OPvPCapturePointEP_PWT(OutdoorPvP *pvp)
-: OPvPCapturePoint(pvp), m_TowerState(EP_TS_N), m_FlightMasterSpawned(0)
-{
-    SetCapturePointData(EPCapturePoints[EP_PWT].entry,EPCapturePoints[EP_PWT].map,EPCapturePoints[EP_PWT].x,EPCapturePoints[EP_PWT].y,EPCapturePoints[EP_PWT].z,EPCapturePoints[EP_PWT].o,EPCapturePoints[EP_PWT].rot0,EPCapturePoints[EP_PWT].rot1,EPCapturePoints[EP_PWT].rot2,EPCapturePoints[EP_PWT].rot3);
-    AddObject(EP_PWT_FLAGS,EPTowerFlags[EP_PWT].entry,EPTowerFlags[EP_PWT].map,EPTowerFlags[EP_PWT].x,EPTowerFlags[EP_PWT].y,EPTowerFlags[EP_PWT].z,EPTowerFlags[EP_PWT].o,EPTowerFlags[EP_PWT].rot0,EPTowerFlags[EP_PWT].rot1,EPTowerFlags[EP_PWT].rot2,EPTowerFlags[EP_PWT].rot3);
-}
-
-void OPvPCapturePointEP_PWT::ChangeState()
-{
-    if(fabs(m_value) == m_maxValue)  // state won't change, only phase when maxed out!
-    {
-        // if changing from controlling alliance to horde or vice versa
-        if( m_OldState == OBJECTIVESTATE_ALLIANCE && m_OldState != m_State )
-        {
-            sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_LOOSE_PWT_A));
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_PWT] = 0;
-        }
-        else if ( m_OldState == OBJECTIVESTATE_HORDE && m_OldState != m_State )
+        uint32 team = (m_State == OBJECTIVESTATE_ALLIANCE) ? ALLIANCE : HORDE;
+        switch (m_TowerType)
         {
-            sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_LOOSE_PWT_H));
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_PWT] = 0;
-        }
-
-        uint32 artkit = 21;
-
-        switch(m_State)
-        {
-        case OBJECTIVESTATE_ALLIANCE:
-            if(m_value == m_maxValue)
-                m_TowerState = EP_TS_A;
-            else
-                m_TowerState = EP_TS_A_P;
-            SummonFlightMaster(ALLIANCE);
-            artkit = 2;
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_PWT] = ALLIANCE;
-            if(m_OldState != m_State) sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_CAPTURE_PWT_A));
+        case EP_TOWER_CROWNGUARD:
+            LinkGraveYard(team);
             break;
-        case OBJECTIVESTATE_HORDE:
-            if(m_value == -m_maxValue)
-                m_TowerState = EP_TS_H;
-            else
-                m_TowerState = EP_TS_H_P;
-            SummonFlightMaster(HORDE);
-            artkit = 1;
-            ((OutdoorPvPEP*)m_PvP)->EP_Controls[EP_PWT] = HORDE;
-            if(m_OldState != m_State) sWorld.SendZoneText(EP_GraveYardZone,sObjectMgr.GetMangosStringForDBCLocale(LANG_OPVP_EP_CAPTURE_PWT_H));
+        case EP_TOWER_EASTWALL:
+            SummonSupportUnits(team);
             break;
-        case OBJECTIVESTATE_NEUTRAL:
-            m_TowerState = EP_TS_N;
-            DelCreature(EP_PWT_FLIGHTMASTER);
-            m_FlightMasterSpawned = 0;
+        case EP_TOWER_NORTHPASS:
+            SummonShrine(team);
             break;
-        case OBJECTIVESTATE_NEUTRAL_ALLIANCE_CHALLENGE:
-        case OBJECTIVESTATE_HORDE_ALLIANCE_CHALLENGE:
-            m_TowerState = EP_TS_N_A;
+        case EP_TOWER_PLAGUEWOOD:
+            SummonFlightMaster(team);
             break;
-        case OBJECTIVESTATE_NEUTRAL_HORDE_CHALLENGE:
-        case OBJECTIVESTATE_ALLIANCE_HORDE_CHALLENGE:
-            m_TowerState = EP_TS_N_H;
-            break;
-        }
-
-        GameObject * flag = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT, m_capturePointGUID));
-        GameObject * flag2 = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT, m_Objects[EP_PWT_FLAGS]));
-        if(flag)
-        {
-            flag->SetGoArtKit(artkit);
         }
-        if(flag2)
+    }
+    else if (m_OldState == OBJECTIVESTATE_ALLIANCE || m_OldState == OBJECTIVESTATE_HORDE)
+    {
+        switch (m_TowerType)
         {
-            flag2->SetGoArtKit(artkit);
+        case EP_TOWER_CROWNGUARD:
+            UnlinkGraveYard();
+            break;
+        case EP_TOWER_EASTWALL:
+            UnsummonSupportUnits();
+            break;
+        case EP_TOWER_NORTHPASS:
+            UnsummonShrine();
+            break;
+        case EP_TOWER_PLAGUEWOOD:
+            UnsummonFlightMaster();
+            break;
         }
-
-        UpdateTowerState();
-
-        // complete quest objective
-        if(m_TowerState == EP_TS_A || m_TowerState == EP_TS_H)
-            SendObjectiveComplete(EP_PWT_CM, 0);
     }
 }
 
-void OPvPCapturePointEP_PWT::SendChangePhase()
+void OPvPCapturePointEP::LinkGraveYard(uint32 team)
 {
-    // send this too, sometimes the slider disappears, dunno why :(
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 1);
-    // send these updates to only the ones in this objective
-    uint32 phase = (uint32)ceil(( m_value + m_maxValue) / ( 2 * m_maxValue ) * 100.0f);
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS, phase);
-    // send this too, sometimes it resets :S
-    SendUpdateWorldState(EP_UI_TOWER_SLIDER_N, m_neutralValuePct);
-}
-
-void OPvPCapturePointEP_PWT::FillInitialWorldStates(WorldPacket& data, uint32& count)
-{
-    FillInitialWorldState(data, count, EP_PWT_A,   bool(m_TowerState & EP_TS_A));
-    FillInitialWorldState(data, count, EP_PWT_H,   bool(m_TowerState & EP_TS_H));
-    FillInitialWorldState(data, count, EP_PWT_A_P, bool(m_TowerState & EP_TS_A_P));
-    FillInitialWorldState(data, count, EP_PWT_H_P, bool(m_TowerState & EP_TS_H_P));
-    FillInitialWorldState(data, count, EP_PWT_N_A, bool(m_TowerState & EP_TS_N_A));
-    FillInitialWorldState(data, count, EP_PWT_N_H, bool(m_TowerState & EP_TS_N_H));
-    FillInitialWorldState(data, count, EP_PWT_N,   bool(m_TowerState & EP_TS_N));
-}
-
-void OPvPCapturePointEP_PWT::UpdateTowerState()
-{
-    m_PvP->SendUpdateWorldState(EP_PWT_A , bool(m_TowerState & EP_TS_A));
-    m_PvP->SendUpdateWorldState(EP_PWT_H , bool(m_TowerState & EP_TS_H));
-    m_PvP->SendUpdateWorldState(EP_PWT_A_P , bool(m_TowerState & EP_TS_A_P));
-    m_PvP->SendUpdateWorldState(EP_PWT_H_P , bool(m_TowerState & EP_TS_H_P));
-    m_PvP->SendUpdateWorldState(EP_PWT_N_A , bool(m_TowerState & EP_TS_N_A));
-    m_PvP->SendUpdateWorldState(EP_PWT_N_H , bool(m_TowerState & EP_TS_N_H));
-    m_PvP->SendUpdateWorldState(EP_PWT_N , bool(m_TowerState & EP_TS_N));
-}
-
-bool OPvPCapturePointEP_PWT::HandlePlayerEnter(Player *plr)
-{
-    if(OPvPCapturePoint::HandlePlayerEnter(plr))
+    if (EP_TOWER_EVENT_TEAM[EP_TOWER_CROWNGUARD] != team)
     {
-        plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 1);
-        uint32 phase = (uint32)ceil(( m_value + m_maxValue) / ( 2 * m_maxValue ) * 100.0f);
-        plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS, phase);
-        plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_N, m_neutralValuePct);
-        return true;
+        EP_TOWER_EVENT_TEAM[EP_TOWER_CROWNGUARD] = team;
+        sObjectMgr.RemoveGraveYardLink(EP_GraveYardId,EP_GraveYardZone,team,false);
+        sObjectMgr.AddGraveYardLink(EP_GraveYardId,EP_GraveYardZone,team,false);
     }
-    return false;
 }
 
-void OPvPCapturePointEP_PWT::HandlePlayerLeave(Player *plr)
+void OPvPCapturePointEP::UnlinkGraveYard()
 {
-    plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY, 0);
-    OPvPCapturePoint::HandlePlayerLeave(plr);
+    sObjectMgr.RemoveGraveYardLink(EP_GraveYardId,EP_GraveYardZone,EP_TOWER_EVENT_TEAM[EP_TOWER_CROWNGUARD],false);
+    EP_TOWER_EVENT_TEAM[EP_TOWER_CROWNGUARD] = 0;
 }
 
-void OPvPCapturePointEP_PWT::SummonFlightMaster(uint32 team)
+void OPvPCapturePointEP::SummonSupportUnits(uint32 team)
 {
-    if(m_FlightMasterSpawned != team)
+    if (EP_TOWER_EVENT_TEAM[EP_TOWER_EASTWALL] != team)
     {
-        m_FlightMasterSpawned = team;
-        DelCreature(EP_PWT_FLIGHTMASTER);
-        AddCreature(EP_PWT_FLIGHTMASTER,EP_PWT_FlightMaster.entry,team,EP_PWT_FlightMaster.map,EP_PWT_FlightMaster.x,EP_PWT_FlightMaster.y,EP_PWT_FlightMaster.z,EP_PWT_FlightMaster.o);
-    }
-}
-
-// ep
-OutdoorPvPEP::OutdoorPvPEP()
-{
-    m_TypeId = OUTDOOR_PVP_EP;
-    memset(EP_Controls,0,sizeof(EP_Controls));
-    m_AllianceTowersControlled = 0;
-    m_HordeTowersControlled = 0;
-}
-
-bool OutdoorPvPEP::SetupOutdoorPvP()
-{
-    for (int i = 0; i < EPBuffZonesNum; ++i)
-        RegisterZone(EPBuffZones[i]);
-
-    AddCapturePoint(new OPvPCapturePointEP_EWT(this));
-    AddCapturePoint(new OPvPCapturePointEP_PWT(this));
-    AddCapturePoint(new OPvPCapturePointEP_CGT(this));
-    AddCapturePoint(new OPvPCapturePointEP_NPT(this));
-    return true;
-}
+        EP_TOWER_EVENT_TEAM[EP_TOWER_EASTWALL] = team;
+        const creature_type * ct = NULL;
+        if (team == ALLIANCE)
+            ct=EP_EWT_Summons_A;
+        else
+            ct=EP_EWT_Summons_H;
 
-bool OutdoorPvPEP::Update(uint32 diff)
-{
-    if(OutdoorPvP::Update(diff))
-    {
-        m_AllianceTowersControlled = 0;
-        m_HordeTowersControlled = 0;
-        for (int i = 0; i < EP_TOWER_NUM; ++i)
+        for (uint8 i = 0; i < EP_EWT_NUM_CREATURES; ++i)
         {
-            if(EP_Controls[i] == ALLIANCE)
-                ++m_AllianceTowersControlled;
-            else if(EP_Controls[i] == HORDE)
-                ++m_HordeTowersControlled;
-            SendUpdateWorldState(EP_UI_TOWER_COUNT_A,m_AllianceTowersControlled);
-            SendUpdateWorldState(EP_UI_TOWER_COUNT_H,m_HordeTowersControlled);
-            BuffTeams();
+            DelCreature(i);
+            AddCreature(i,ct[i].entry,ct[i].teamval,ct[i].map,ct[i].x,ct[i].y,ct[i].z,ct[i].o,1000000);
         }
-        return true;
     }
-    return false;
 }
 
-void OutdoorPvPEP::HandlePlayerEnterZone(Player * plr, uint32 zone)
+void OPvPCapturePointEP::UnsummonSupportUnits()
 {
-    // add buffs
-    if(plr->GetTeam() == ALLIANCE)
-    {
-        if(m_AllianceTowersControlled && m_AllianceTowersControlled < 5)
-            plr->CastSpell(plr,EP_AllianceBuffs[m_AllianceTowersControlled-1],true);
-    }
-    else
-    {
-        if(m_HordeTowersControlled && m_HordeTowersControlled < 5)
-            plr->CastSpell(plr,EP_HordeBuffs[m_HordeTowersControlled-1],true);
-    }
-    OutdoorPvP::HandlePlayerEnterZone(plr,zone);
+    for (uint8 i = 0; i < EP_EWT_NUM_CREATURES; ++i)
+        DelCreature(i);
+    EP_TOWER_EVENT_TEAM[EP_TOWER_EASTWALL] = 0;
 }
 
-void OutdoorPvPEP::HandlePlayerLeaveZone(Player * plr, uint32 zone)
+void OPvPCapturePointEP::SummonShrine(uint32 team)
 {
-    // remove buffs
-    if(plr->GetTeam() == ALLIANCE)
+    if (EP_TOWER_EVENT_TEAM[EP_TOWER_NORTHPASS] != team)
     {
-        for (int i = 0; i < 4; ++i)
-            plr->RemoveAurasDueToSpell(EP_AllianceBuffs[i]);
-    }
-    else
-    {
-        for (int i = 0; i < 4; ++i)
-            plr->RemoveAurasDueToSpell(EP_HordeBuffs[i]);
+        EP_TOWER_EVENT_TEAM[EP_TOWER_NORTHPASS] = team;
+        DelObject(EP_NPT_SHRINE);
+        AddObject(EP_NPT_SHRINE,EP_NPT_LordaeronShrine.entry,EP_NPT_LordaeronShrine.map,EP_NPT_LordaeronShrine.x,EP_NPT_LordaeronShrine.y,EP_NPT_LordaeronShrine.z,EP_NPT_LordaeronShrine.o,EP_NPT_LordaeronShrine.rot0,EP_NPT_LordaeronShrine.rot1,EP_NPT_LordaeronShrine.rot2,EP_NPT_LordaeronShrine.rot3);
+        GameObject* go = ObjectAccessor::GetGameObjectInWorld(ObjectGuid(HIGHGUID_GAMEOBJECT, m_Objects[EP_NPT_SHRINE]));
+        if (go)
+            go->SetUInt32Value(GAMEOBJECT_FACTION,(team == ALLIANCE ? 84 : 83));
+
+        DelObject(EP_NPT_SHRINE_AURA);
+        uint32 shrineEntry = (team == ALLIANCE ? EP_NPT_LordaeronShrineAura.entry : EP_NPT_LordaeronShrineAura.entry + 1);
+        AddObject(EP_NPT_SHRINE_AURA,shrineEntry,EP_NPT_LordaeronShrineAura.map,EP_NPT_LordaeronShrineAura.x,EP_NPT_LordaeronShrineAura.y,EP_NPT_LordaeronShrineAura.z,EP_NPT_LordaeronShrineAura.o,EP_NPT_LordaeronShrineAura.rot0,EP_NPT_LordaeronShrineAura.rot1,EP_NPT_LordaeronShrineAura.rot2,EP_NPT_LordaeronShrineAura.rot3);
     }
-    OutdoorPvP::HandlePlayerLeaveZone(plr, zone);
 }
 
-void OutdoorPvPEP::BuffTeams()
+void OPvPCapturePointEP::UnsummonShrine()
 {
-    for (PlayerSet::iterator itr = m_players[0].begin(); itr != m_players[0].end(); ++itr)
-    {
-        Player * plr = *itr;
-        {
-            for (int i = 0; i < 4; ++i)
-                plr->RemoveAurasDueToSpell(EP_AllianceBuffs[i]);
-            if(m_AllianceTowersControlled && m_AllianceTowersControlled < 5)
-                plr->CastSpell(plr,EP_AllianceBuffs[m_AllianceTowersControlled-1],true);
-        }
-    }
-    for (PlayerSet::iterator itr = m_players[1].begin(); itr != m_players[1].end(); ++itr)
-    {
-        Player * plr = *itr;
-        {
-            for (int i = 0; i < 4; ++i)
-                plr->RemoveAurasDueToSpell(EP_HordeBuffs[i]);
-            if(m_HordeTowersControlled && m_HordeTowersControlled < 5)
-                plr->CastSpell(plr,EP_HordeBuffs[m_HordeTowersControlled-1],true);
-        }
-    }
+    DelObject(EP_NPT_SHRINE);
+    DelObject(EP_NPT_SHRINE_AURA);
+    EP_TOWER_EVENT_TEAM[EP_TOWER_NORTHPASS] = 0;
 }
 
-void OutdoorPvPEP::FillInitialWorldStates(WorldPacket& data, uint32& count)
+void OPvPCapturePointEP::SummonFlightMaster(uint32 team)
 {
-    FillInitialWorldState(data, count, EP_UI_TOWER_COUNT_A,        m_AllianceTowersControlled);
-    FillInitialWorldState(data, count, EP_UI_TOWER_COUNT_H,        m_HordeTowersControlled);
-    FillInitialWorldState(data, count, EP_UI_TOWER_SLIDER_DISPLAY, 0);
-    FillInitialWorldState(data, count, EP_UI_TOWER_SLIDER_POS,     50);
-    FillInitialWorldState(data, count, EP_UI_TOWER_SLIDER_N,       100);
-    for (OPvPCapturePointMap::iterator itr = m_capturePoints.begin(); itr != m_capturePoints.end(); ++itr)
+    if (EP_TOWER_EVENT_TEAM[EP_TOWER_PLAGUEWOOD] != team)
     {
-        itr->second->FillInitialWorldStates(data, count);
+        EP_TOWER_EVENT_TEAM[EP_TOWER_PLAGUEWOOD] = team;
+        DelCreature(EP_PWT_FLIGHTMASTER);
+        AddCreature(EP_PWT_FLIGHTMASTER,EP_PWT_FlightMaster.entry,team,EP_PWT_FlightMaster.map,EP_PWT_FlightMaster.x,EP_PWT_FlightMaster.y,EP_PWT_FlightMaster.z,EP_PWT_FlightMaster.o);
+
+        // Change the flightmasters's faction to horde and display a red aura around the npc
+        //Creature* c = ObjectAccessor::GetUnit(*m_capturePoint, ObjectGuid(HIGHGUID_UNIT, m_Creatures[EP_PWT_FLIGHTMASTER]));
+        //if (c && team == HORDE)
+        //{
+        //    c->SetUInt32Value(UNIT_FIELD_FACTIONTEMPLATE, c->GetCreatureInfo()->faction_H);
+        //    c->SetUInt32Value(UNIT_FIELD_AURASTATE, EP_PWT_FlightMasterAura);
+        //}
     }
 }
 
-void OutdoorPvPEP::SendRemoveWorldStates(Player *plr)
+void OPvPCapturePointEP::UnsummonFlightMaster()
 {
-    plr->SendUpdateWorldState(EP_UI_TOWER_COUNT_A,0);
-    plr->SendUpdateWorldState(EP_UI_TOWER_COUNT_H,0);
-    plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_DISPLAY,0);
-    plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_POS,0);
-    plr->SendUpdateWorldState(EP_UI_TOWER_SLIDER_N,0);
-
-    plr->SendUpdateWorldState(EP_EWT_A,0);
-    plr->SendUpdateWorldState(EP_EWT_H,0);
-    plr->SendUpdateWorldState(EP_EWT_N,0);
-    plr->SendUpdateWorldState(EP_EWT_A_P,0);
-    plr->SendUpdateWorldState(EP_EWT_H_P,0);
-    plr->SendUpdateWorldState(EP_EWT_N_A,0);
-    plr->SendUpdateWorldState(EP_EWT_N_H,0);
-
-    plr->SendUpdateWorldState(EP_PWT_A,0);
-    plr->SendUpdateWorldState(EP_PWT_H,0);
-    plr->SendUpdateWorldState(EP_PWT_N,0);
-    plr->SendUpdateWorldState(EP_PWT_A_P,0);
-    plr->SendUpdateWorldState(EP_PWT_H_P,0);
-    plr->SendUpdateWorldState(EP_PWT_N_A,0);
-    plr->SendUpdateWorldState(EP_PWT_N_H,0);
-
-    plr->SendUpdateWorldState(EP_NPT_A,0);
-    plr->SendUpdateWorldState(EP_NPT_H,0);
-    plr->SendUpdateWorldState(EP_NPT_N,0);
-    plr->SendUpdateWorldState(EP_NPT_A_P,0);
-    plr->SendUpdateWorldState(EP_NPT_H_P,0);
-    plr->SendUpdateWorldState(EP_NPT_N_A,0);
-    plr->SendUpdateWorldState(EP_NPT_N_H,0);
-
-    plr->SendUpdateWorldState(EP_CGT_A,0);
-    plr->SendUpdateWorldState(EP_CGT_H,0);
-    plr->SendUpdateWorldState(EP_CGT_N,0);
-    plr->SendUpdateWorldState(EP_CGT_A_P,0);
-    plr->SendUpdateWorldState(EP_CGT_H_P,0);
-    plr->SendUpdateWorldState(EP_CGT_N_A,0);
-    plr->SendUpdateWorldState(EP_CGT_N_H,0);
-}
\ No newline at end of file
+    DelCreature(EP_PWT_FLIGHTMASTER);
+    EP_TOWER_EVENT_TEAM[EP_TOWER_PLAGUEWOOD] = 0;
+}
diff --git a/src/game/OutdoorPvPEP.h b/src/game/OutdoorPvPEP.h
index 2595936..53f86ff 100644
--- a/src/game/OutdoorPvPEP.h
+++ b/src/game/OutdoorPvPEP.h
@@ -19,75 +19,42 @@
 #ifndef OUTDOOR_PVP_EP_
 #define OUTDOOR_PVP_EP_
 
+#include "OutdoorPvP.h"
 #include "OutdoorPvPImpl.h"
 
-#include "DBCStructure.h"
 
-const uint32 EP_AllianceBuffs[4] = {11413, 11414, 11415, 1386};
+#define OutdoorPvPEPBuffZonesNum 3
+#define OutdoorPvPEPTeamsBuffNum 4
+                                                         //  Eastern Plaguelands, Stratholme and Scholomance
+const uint32 OutdoorPvPEPBuffZones[OutdoorPvPEPBuffZonesNum] = {139, 2017, 2057};
 
-const uint32 EP_HordeBuffs[4] = {30880, 30683, 30682, 29520};
+const int EP_AllianceBuffs[OutdoorPvPEPTeamsBuffNum] = {11413, 11414, 11415, 1386};
+const int EP_HordeBuffs[OutdoorPvPEPTeamsBuffNum] = {30880, 30683, 30682, 29520};
 
 const uint32 EP_GraveYardZone = 139;
-
 const uint32 EP_GraveYardId = 927;
 
-const uint32 EPBuffZonesNum = 3;
-
-const uint32 EP_EWT_CM = 17690;
-const uint32 EP_CGT_CM = 17689;
-const uint32 EP_NPT_CM = 17696;
-const uint32 EP_PWT_CM = 17698;
-
-const uint32 EPBuffZones[EPBuffZonesNum] = {139, 2017, 2057};
-
-enum EP_TaxiNodes {
-    EP_CGT_Taxi = 87,
-    EP_EWT_Taxi = 86,
-    EP_NPT_Taxi = 85,
-    EP_PWT_Taxi = 84
-};
-
-enum EP_EastwallTowerWorldStates {
-    EP_EWT_A = 2354,
-    EP_EWT_H = 2356,
-    EP_EWT_A_P = 2357, // ally progressing
-    EP_EWT_H_P = 2358,
-    EP_EWT_N_A = 2359, // ally conquested
-    EP_EWT_N_H = 2360,
-    EP_EWT_N = 2361
+enum OutdoorPvPEPTowerType
+{
+    EP_TOWER_CROWNGUARD = 0,
+    EP_TOWER_EASTWALL,
+    EP_TOWER_NORTHPASS,
+    EP_TOWER_PLAGUEWOOD,
+    EP_TOWER_NUM
 };
 
-enum EP_NorthpassTowerWorldStates {
-    EP_NPT_N = 2352,
-    EP_NPT_N_A = 2362,
-    EP_NPT_N_H = 2363,
-    EP_NPT_A_P = 2364,
-    EP_NPT_H_P = 2365,
-    EP_NPT_A = 2372,
-    EP_NPT_H = 2373
-};
+const uint32 EP_CREDITMARKER[EP_TOWER_NUM] = {17689,17690,17696,17698};
 
-enum EP_PlagewoodTowerWorldStates {
-    EP_PWT_N_A = 2366,
-    EP_PWT_N_H = 2353, //2367 not present! use neutral!
-    EP_PWT_A_P = 2368,
-    EP_PWT_H_P = 2369,
-    EP_PWT_A = 2370,
-    EP_PWT_H = 2371,
-    EP_PWT_N = 2353
-};
+const uint32 EP_MAP_N[EP_TOWER_NUM] = {2355,2361,2352,2353};
+const uint32 EP_MAP_A[EP_TOWER_NUM] = {2378,2354,2372,2370};
+const uint32 EP_MAP_H[EP_TOWER_NUM] = {2379,2356,2373,2371};
+const uint32 EP_MAP_N_A[EP_TOWER_NUM] = {2374,2359,2362,2366};
+const uint32 EP_MAP_N_H[EP_TOWER_NUM] = {2375,2360,2363,2353}; // plaguewood tower has incorrect display value (2353 as well as logical 2367 is wrong)
 
-enum EP_CrownGuardTowerWorldStates {
-    EP_CGT_N_A = 2374,
-    EP_CGT_N_H = 2375,
-    EP_CGT_A_P = 2376,
-    EP_CGT_H_P = 2377,
-    EP_CGT_A = 2378,
-    EP_CGT_H = 2379,
-    EP_CGT_N = 2355
-};
+const uint32 EP_TAXI_NODE[EP_TOWER_NUM] = {84,85,86,87};
 
-enum EP_WorldStates {
+enum OutdoorPvPEPWorldStates
+{
     EP_UI_TOWER_SLIDER_DISPLAY = 2426,
     EP_UI_TOWER_SLIDER_POS = 2427,
     EP_UI_TOWER_SLIDER_N = 2428,
@@ -96,7 +63,8 @@ enum EP_WorldStates {
     EP_UI_TOWER_COUNT_H = 2328
 };
 
-enum EP_Summons {
+enum EP_Summons
+{
     EP_EWT_COMMANDER = 0,
     EP_EWT_SOLDIER1,
     EP_EWT_SOLDIER2,
@@ -105,46 +73,42 @@ enum EP_Summons {
     EP_PWT_FLIGHTMASTER,
 };
 
-enum EP_GoSummons {
-    EP_NPT_BUFF = 0,
-    EP_NPT_FLAGS,
-    EP_EWT_FLAGS,
-    EP_CGT_FLAGS,
-    EP_PWT_FLAGS
-};
-
-enum EP_Towers {
-    EP_EWT = 0, // plaguelands 03
-    EP_NPT,// plaguelands 01
-    EP_PWT,// plaguelands 04
-    EP_CGT,// plaguelands 02
-    EP_TOWER_NUM
+enum EP_GoSummons
+{
+    EP_NPT_SHRINE = EP_TOWER_NUM,
+    EP_NPT_SHRINE_AURA,
 };
 
-const go_type EPCapturePoints[EP_TOWER_NUM] = {
+const go_type EPCapturePoints[EP_TOWER_NUM] =
+{
+    {182096,0,1860.85f,-3731.23f,196.716f,-2.53214f,0.033967f,-0.131914f,0.944741f,-0.298177f},
     {182097,0,2574.51f,-4794.89f,144.704f,-1.45003f,-0.097056f,0.095578f,-0.656229f,0.742165f},
     {181899,0,3181.08f,-4379.36f,174.123f,-2.03472f,-0.065392f,0.119494f,-0.842275f,0.521553f},
-    {182098,0,2962.71f,-3042.31f,154.789f,2.08426f,-0.074807f,-0.113837f,0.855928f,0.49883f},
-    {182096,0,1860.85f,-3731.23f,196.716f,-2.53214f,0.033967f,-0.131914f,0.944741f,-0.298177f}
+    {182098,0,2962.71f,-3042.31f,154.789f,2.08426f,-0.074807f,-0.113837f,0.855928f,0.49883f}
 };
 
-const go_type EPTowerFlags[EP_TOWER_NUM] = {
-    {182106,0,2569.60f,-4772.93f,115.399f,2.72271f,0,0,0.978148f,0.207912f},
-    {182106,0,3148.17f,-4365.51f,145.029f,1.53589f,0,0,0.694658f,0.71934f},
-    {182106,0,2992.63f,-3022.95f,125.593f,3.03687f,0,0,0.99863f,0.052336f},
-    {182106,0,1838.42f,-3703.56f,167.713f,0.890118f,0,0,0.430511f,0.902585f}
+const go_type EPTowerFlags[EP_TOWER_NUM*2] =
+{
+    {182106,0,1877.60f,-3716.76f,167.188f,1.74533f,0.0f,0.0f,0.766044f,0.642788f}, // flags left side
+    {182106,0,2569.60f,-4772.93f,115.399f,2.72271f,0.0f,0.0f,0.978148f,0.207912f},
+    {182106,0,3188.76f,-4358.50f,144.555f,1.97222f,0.0f,0.0f,0.833886f,0.551937f},
+    {182106,0,2975.50f,-3060.36f,125.108f,-1.0472f,0.0f,0.0f,0.5f,-0.866025f},
+    {182106,0,1838.42f,-3703.56f,167.713f,0.890118f,0.0f,0.0f,0.430511f,0.902585f}, // flags right side
+    {182106,0,2539.61f,-4801.55f,115.766f,2.00713f,0.0f,0.0f,0.843391f,0.5373f},
+    {182106,0,3148.17f,-4365.51f,145.029f,1.53589f,0.0f,0.0f,0.694658f,0.71934f},
+    {182106,0,2992.63f,-3022.95f,125.593f,3.03687f,0.0f,0.0f,0.99863f,0.052336f}
 };
 
-const uint32 EPTowerPlayerEnterEvents[EP_TOWER_NUM] = {10691,10699,10701,10705};
-
-const uint32 EPTowerPlayerLeaveEvents[EP_TOWER_NUM] = {10692,10698,10700,10704};
+const uint32 EPTowerPlayerEnterEvents[EP_TOWER_NUM] = {10705,10691,10699,10701};
+const uint32 EPTowerPlayerLeaveEvents[EP_TOWER_NUM] = {10704,10692,10698,10700};
 
-const uint32 EP_NUM_CREATURES = 6;
-const uint32 EP_EWT_NUM_CREATURES = 5;
+const uint8 EP_NUM_CREATURES = 6;
+const uint8 EP_EWT_NUM_CREATURES = 5;
 
 // one lordaeron commander, 4 soldiers
 // should be spawned at EWT and follow a path, but trans-grid pathing isn't safe, so summon them directly at NPT
-const creature_type EP_EWT_Summons_A[EP_EWT_NUM_CREATURES] = {
+const creature_type EP_EWT_Summons_A[EP_EWT_NUM_CREATURES] =
+{
     {17635,469,0, 3167.61f,-4352.09f,138.20f,4.5811f},
     {17647,469,0, 3172.74f,-4352.99f,139.14f,4.9873f},
     {17647,469,0, 3165.89f,-4354.46f,138.67f,3.7244f},
@@ -152,7 +116,8 @@ const creature_type EP_EWT_Summons_A[EP_EWT_NUM_CREATURES] = {
     {17647,469,0, 3169.91f,-4349.68f,138.37f,0.7444f}
 };
 
-const creature_type EP_EWT_Summons_H[EP_EWT_NUM_CREATURES] = {
+const creature_type EP_EWT_Summons_H[EP_EWT_NUM_CREATURES] =
+{
     {17995,67,0, 3167.61f,-4352.09f,138.20f,4.5811f},
     {17996,67,0, 3172.74f,-4352.99f,139.14f,4.9873f},
     {17996,67,0, 3165.89f,-4354.46f,138.67f,3.7244f},
@@ -160,120 +125,80 @@ const creature_type EP_EWT_Summons_H[EP_EWT_NUM_CREATURES] = {
     {17996,67,0, 3169.91f,-4349.68f,138.37f,0.7444f}
 };
 
-enum EP_TowerStates {
-    EP_TS_N = 1,
-    EP_TS_N_A = 2,
-    EP_TS_N_H = 4,
-    EP_TS_A_P = 8,
-    EP_TS_H_P = 16,
-    EP_TS_A = 32,
-    EP_TS_H = 64
-};
-
-// when spawning, pay attention at setting the faction manually!
 const creature_type EP_PWT_FlightMaster = {17209,0,0,2987.5f,-3049.11f,120.126f,5.75959f};
+const uint32 EP_PWT_FlightMasterAura = 36725;
 
-// after spawning, modify the faction so that only the controller will be able to use it with SetUInt32Value(GAMEOBJECT_FACTION, faction_id);
 const go_type EP_NPT_LordaeronShrine = {181682,0,3167.72f,-4355.91f,138.785f,1.69297f,0,0,0.748956f,0.66262f};
+const go_type EP_NPT_LordaeronShrineAura = {180100,0,3167.72f,-4355.91f,138.785f,1.69297f,0,0,0.748956f,0.66262f};
 
-class OutdoorPvPEP;
-
-class OPvPCapturePointEP_EWT : public OPvPCapturePoint
+class OPvPCapturePointEP : public OPvPCapturePoint
 {
-friend class OutdoorPvPEP;
-public:
-    OPvPCapturePointEP_EWT(OutdoorPvP * pvp);
-    void ChangeState();
-    void SendChangePhase();
-    void FillInitialWorldStates(WorldPacket& data, uint32& count);
-    // used when player is activated/inactivated in the area
-    bool HandlePlayerEnter(Player * plr);
-    void HandlePlayerLeave(Player * plr);
-protected:
-    void SummonSupportUnitAtNorthpassTower(uint32 team);
-    void UpdateTowerState();
-protected:
-    uint32 m_TowerState;
-    uint32 m_UnitsSummonedSide;
-};
+    public:
 
-class OPvPCapturePointEP_NPT : public OPvPCapturePoint
-{
-friend class OutdoorPvPEP;
-public:
-    OPvPCapturePointEP_NPT(OutdoorPvP * pvp);
-    void ChangeState();
-    void SendChangePhase();
-    void FillInitialWorldStates(WorldPacket& data, uint32& count);
-    // used when player is activated/inactivated in the area
-    bool HandlePlayerEnter(Player * plr);
-    void HandlePlayerLeave(Player * plr);
-protected:
-    void SummonGO(uint32 team);
-    void UpdateTowerState();
-protected:
-    uint32 m_TowerState;
-    uint32 m_SummonedGOSide;
-};
+        OPvPCapturePointEP(OutdoorPvP * pvp, OutdoorPvPEPTowerType type);
 
-class OPvPCapturePointEP_CGT : public OPvPCapturePoint
-{
-friend class OutdoorPvPEP;
-public:
-    OPvPCapturePointEP_CGT(OutdoorPvP * pvp);
-    void ChangeState();
-    void SendChangePhase();
-    void FillInitialWorldStates(WorldPacket& data, uint32& count);
-    // used when player is activated/inactivated in the area
-    bool HandlePlayerEnter(Player * plr);
-    void HandlePlayerLeave(Player * plr);
-protected:
-    void LinkGraveYard(uint32 team);
-    void UpdateTowerState();
-protected:
-    uint32 m_TowerState;
-    uint32 m_GraveyardSide;
-};
+        void ChangeState();
 
-class OPvPCapturePointEP_PWT : public OPvPCapturePoint
-{
-friend class OutdoorPvPEP;
-public:
-    OPvPCapturePointEP_PWT(OutdoorPvP * pvp);
-    void ChangeState();
-    void SendChangePhase();
-    void FillInitialWorldStates(WorldPacket& data, uint32& count);
-    // used when player is activated/inactivated in the area
-    bool HandlePlayerEnter(Player * plr);
-    void HandlePlayerLeave(Player * plr);
-protected:
-    void SummonFlightMaster(uint32 team);
-    void UpdateTowerState();
-protected:
-    uint32 m_FlightMasterSpawned;
-    uint32 m_TowerState;
+        void SendChangePhase();
+
+        void FillInitialWorldStates(WorldPacket & data);
+
+        // used when player is activated/inactivated in the area
+        bool HandlePlayerEnter(Player * plr);
+        void HandlePlayerLeave(Player * plr);
+
+    protected:
+
+        void UpdateTowerEvents();
+
+        void LinkGraveYard(uint32 team);
+
+        void SummonShrine(uint32 team);
+
+        void SummonSupportUnits(uint32 team);
+
+        void SummonFlightMaster(uint32 team);
+
+        void UnlinkGraveYard();
+
+        void UnsummonShrine();
+
+        void UnsummonSupportUnits();
+
+        void UnsummonFlightMaster();
+
+
+        uint32 EP_TOWER_EVENT_TEAM[EP_TOWER_NUM];
+
+    private:
+
+        OutdoorPvPEPTowerType m_TowerType;
 };
 
 class OutdoorPvPEP : public OutdoorPvP
 {
-friend class OPvPCapturePointEP_EWT;
-friend class OPvPCapturePointEP_NPT;
-friend class OPvPCapturePointEP_PWT;
-friend class OPvPCapturePointEP_CGT;
-public:
-    OutdoorPvPEP();
-    bool SetupOutdoorPvP();
-    void HandlePlayerEnterZone(Player *plr, uint32 zone);
-    void HandlePlayerLeaveZone(Player *plr, uint32 zone);
-    bool Update(uint32 diff);
-    void FillInitialWorldStates(WorldPacket& data, uint32& count);
-    void SendRemoveWorldStates(Player * plr);
-    void BuffTeams();
-private:
-    // how many towers are controlled
-    uint32 EP_Controls[EP_TOWER_NUM];
-    uint32 m_AllianceTowersControlled;
-    uint32 m_HordeTowersControlled;
+    friend class OPvPCapturePointEP;
+
+    public:
+
+        OutdoorPvPEP();
+
+        bool SetupOutdoorPvP();
+
+        void HandlePlayerEnterZone(Player *plr, uint32 zone);
+        void HandlePlayerLeaveZone(Player *plr, uint32 zone);
+
+        bool Update(uint32 diff);
+
+        void FillInitialWorldStates(WorldPacket &data, uint32& count);
+
+        void SendRemoveWorldStates(Player * plr);
+
+    private:
+
+        // how many towers are controlled
+        uint32 m_AllianceTowersControlled;
+        uint32 m_HordeTowersControlled;
 };
 
 #endif
\ No newline at end of file
