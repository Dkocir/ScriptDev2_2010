diff --git a/Makefile.am b/Makefile.am
index 5b217d2..87c550f 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -344,6 +344,9 @@ scripts/northrend/icecrown_citadel/frozen_halls/pit_of_saron/boss_krick_and_ick.
 scripts/northrend/icecrown_citadel/frozen_halls/pit_of_saron/boss_scourgelord_tyrannus.cpp \
 scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp \
 scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp \
+scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp \
+scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h \
+scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp \
 scripts/northrend/icecrown_citadel/icecrown_citadel/blood_prince_council.cpp \
 scripts/northrend/icecrown_citadel/icecrown_citadel/boss_blood_queen_lanathel.cpp \
 scripts/northrend/icecrown_citadel/icecrown_citadel/boss_deathbringer_saurfang.cpp \
diff --git a/VC90/90ScriptDev2.vcproj b/VC90/90ScriptDev2.vcproj
index 143fe90..b89c396 100644
--- a/VC90/90ScriptDev2.vcproj
+++ b/VC90/90ScriptDev2.vcproj
@@ -2180,6 +2180,18 @@
 								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\boss_devourer_of_souls.cpp"
 								>
 							</File>
+							<File
+								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\forge_of_souls.cpp"
+								>
+							</File>
+							<File
+								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\forge_of_souls.h"
+								>
+							</File>
+							<File
+								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\instance_forge_of_souls.cpp"
+								>
+							</File>
 						</Filter>
 					</Filter>
 				</Filter>
diff --git a/fos.patch b/fos.patch
deleted file mode 100644
index ce31b99..0000000
--- a/fos.patch
+++ /dev/null
@@ -1,3979 +0,0 @@
-From 5465ecc2a92bf8635b7351d9040393fba66196db Mon Sep 17 00:00:00 2001
-From: Xfurry <mail@nomail.com>
-Date: Sat, 10 Apr 2010 00:08:40 +0300
-Subject: [PATCH] [SP_07] Forge of Souls
-
----
- VC90/90ScriptDev2.vcproj                           |   12 +
- patches/custom/Northrend/SP_07_ForgeOfSouls.patch  | 1973 ++++++++++++++++++++
- .../frozen_halls/forge_of_souls/boss_bronjahm.cpp  |  274 +++-
- .../forge_of_souls/boss_devourer_of_souls.cpp      |  526 +++++-
- .../frozen_halls/forge_of_souls/forge_of_souls.cpp |  777 ++++++++
- .../frozen_halls/forge_of_souls/forge_of_souls.h   |   37 +
- .../forge_of_souls/instance_forge_of_souls.cpp     |  195 ++
- .../Mangos/Northrend/ForgeOfSouls_Mangos.sql       |   19 +
- .../ScriptDev2/Northrend/ForgeOfSouls_Script.sql   |   49 +
- system/ScriptLoader.cpp                            |    4 +
- 10 files changed, 3834 insertions(+), 32 deletions(-)
- create mode 100644 patches/custom/Northrend/SP_07_ForgeOfSouls.patch
- create mode 100644 scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp
- create mode 100644 scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h
- create mode 100644 scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp
- create mode 100644 sql/Custom_Updates/Mangos/Northrend/ForgeOfSouls_Mangos.sql
- create mode 100644 sql/Custom_Updates/ScriptDev2/Northrend/ForgeOfSouls_Script.sql
-
-diff --git a/VC90/90ScriptDev2.vcproj b/VC90/90ScriptDev2.vcproj
-index 143fe90..b89c396 100644
---- a/VC90/90ScriptDev2.vcproj
-+++ b/VC90/90ScriptDev2.vcproj
-@@ -2180,6 +2180,18 @@
- 								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\boss_devourer_of_souls.cpp"
- 								>
- 							</File>
-+							<File
-+								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\forge_of_souls.cpp"
-+								>
-+							</File>
-+							<File
-+								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\forge_of_souls.h"
-+								>
-+							</File>
-+							<File
-+								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\instance_forge_of_souls.cpp"
-+								>
-+							</File>
- 						</Filter>
- 					</Filter>
- 				</Filter>
-diff --git a/patches/custom/Northrend/SP_07_ForgeOfSouls.patch b/patches/custom/Northrend/SP_07_ForgeOfSouls.patch
-new file mode 100644
-index 0000000..af36a36
---- /dev/null
-+++ b/patches/custom/Northrend/SP_07_ForgeOfSouls.patch
-@@ -0,0 +1,1973 @@
-+diff --git a/VC90/90ScriptDev2.vcproj b/VC90/90ScriptDev2.vcproj
-+index 143fe90..b89c396 100644
-+--- a/VC90/90ScriptDev2.vcproj
-++++ b/VC90/90ScriptDev2.vcproj
-+@@ -2180,6 +2180,18 @@
-+ 								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\boss_devourer_of_souls.cpp"
-+ 								>
-+ 							</File>
-++							<File
-++								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\forge_of_souls.cpp"
-++								>
-++							</File>
-++							<File
-++								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\forge_of_souls.h"
-++								>
-++							</File>
-++							<File
-++								RelativePath="..\scripts\northrend\icecrown_citadel\frozen_halls\forge_of_souls\instance_forge_of_souls.cpp"
-++								>
-++							</File>
-+ 						</Filter>
-+ 					</Filter>
-+ 				</Filter>
-+diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp
-+index 17a047b..0846d7e 100644
-+--- a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp
-++++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp
-+@@ -1,24 +1,266 @@
-+ /* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
-+- * This program is free software; you can redistribute it and/or modify
-+- * it under the terms of the GNU General Public License as published by
-+- * the Free Software Foundation; either version 2 of the License, or
-+- * (at your option) any later version.
-+- *
-+- * This program is distributed in the hope that it will be useful,
-+- * but WITHOUT ANY WARRANTY; without even the implied warranty of
-+- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-+- * GNU General Public License for more details.
-+- *
-+- * You should have received a copy of the GNU General Public License
-+- * along with this program; if not, write to the Free Software
-+- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-+- */
-++* This program is free software; you can redistribute it and/or modify
-++* it under the terms of the GNU General Public License as published by
-++* the Free Software Foundation; either version 2 of the License, or
-++* (at your option) any later version.
-++*
-++* This program is distributed in the hope that it will be useful,
-++* but WITHOUT ANY WARRANTY; without even the implied warranty of
-++* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-++* GNU General Public License for more details.
-++*
-++* You should have received a copy of the GNU General Public License
-++* along with this program; if not, write to the Free Software
-++* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-++*/
-+ 
-+ /* ScriptData
-+ SDName: boss_bronjahm
-+-SD%Complete: 0%
-+-SDComment:
-++SD%Complete: 70%
-++SDComment: Soulstorm, Corrupt soul
-+ SDCategory: The Forge of Souls
-+ EndScriptData */
-+ 
-+ #include "precompiled.h"
-++#include "forge_of_souls.h"
-++
-++enum Spells
-++{
-++    SPELL_CORRUPT_SOUL          = 68839,
-++    SPELL_MAGICSBANE            = 68793,
-++    SPELL_MAGICSBANE_H          = 69050,
-++    SPELL_SHADOW_BOLT           = 70043,
-++    SPELL_SHADOW_BOLT_H         = 70043,
-++    SPELL_FEAR                  = 30584,//68950,
-++    SPELL_SOULSTORM             = 68872,
-++    SPELL_TELEPORT              = 68988,
-++    SPELL_SOULSTORM_EFFECT      = 68925,
-++    SPELL_SOULSTORM_DMG         = 68921,
-++
-++    NPC_CORRUPT_SOUL_FRAGMENT   = 36535,
-++    EQUIP_ID                    = 35514,
-++};
-++
-++enum Yells
-++{
-++    SAY_AGGRO                               = -1610017,
-++    SAY_SOULSTORM                           = -1610018,
-++    SAY_SLAY1                               = -1610019,
-++    SAY_SLAY2                               = -1610020,
-++    SAY_CORRUPT_SOUL                        = -1610021,
-++    SAY_DEATH                               = -1610022,
-++};
-++
-++#define HOME_X                      5297.33f
-++#define HOME_Y                      2506.64f
-++
-++struct MANGOS_DLL_DECL boss_BronjahnAI : public ScriptedAI
-++{
-++    boss_BronjahnAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        SetEquipmentSlots(false, EQUIP_ID, -1, -1);
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiCorruptSoulTimer;
-++    uint32 m_uiMagicsBaneTimer;
-++    uint32 m_uiShadowBoltTimer;
-++    uint32 m_uiFearTimer;
-++    uint32 m_uiSoulStormTimer;
-++
-++    bool m_bIsSoulStorm;
-++    bool m_bHasTeleported;
-++
-++    void Reset()
-++    {        
-++        m_uiCorruptSoulTimer    = urand(15000, 25000);
-++        m_uiMagicsBaneTimer     = urand(8000, 15000);
-++        m_uiShadowBoltTimer     = 2000;
-++        m_uiFearTimer           = 1000;
-++
-++        m_bIsSoulStorm          = false;
-++        m_bHasTeleported        = false;
-++
-++        if (m_pInstance)
-++            m_pInstance->SetData(TYPE_BRONJAHN, NOT_STARTED);
-++    }
-++
-++    void Aggro(Unit* pWho)
-++    {
-++        if (m_pInstance)
-++            m_pInstance->SetData(TYPE_BRONJAHN, IN_PROGRESS);
-++
-++        DoScriptText(SAY_AGGRO, m_creature);
-++    }
-++
-++    void KilledUnit(Unit *pVictim)
-++    {
-++        if(irand(0,1))
-++            DoScriptText(SAY_SLAY1, m_creature);
-++        else
-++            DoScriptText(SAY_SLAY2, m_creature);
-++    }
-++
-++    void JustDied(Unit* pKiller)  
-++    {
-++        DoScriptText(SAY_DEATH, m_creature);
-++
-++        if (m_pInstance)
-++            m_pInstance->SetData(TYPE_BRONJAHN, DONE);
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        //Return since we have no target
-++        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-++            return;
-++
-++        if (m_uiCorruptSoulTimer < uiDiff && !m_bIsSoulStorm)
-++        {
-++            DoScriptText(SAY_CORRUPT_SOUL, m_creature);
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++            {
-++                DoCast(pTarget, SPELL_CORRUPT_SOUL);
-++                /*if(Creature *pTemp = m_creature->SummonCreature(NPC_CORRUPT_SOUL_FRAGMENT, pTarget->GetPositionX(), pTarget->GetPositionY(), pTarget->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 30000))
-++                {
-++                    pTemp->SetSplineFlags(SPLINEFLAG_WALKMODE);
-++                    pTemp->GetMotionMaster()->MovePoint(0, m_creature->GetPositionX(), m_creature->GetPositionY(), m_creature->GetPositionZ());
-++                }*/
-++            }
-++            m_uiCorruptSoulTimer = urand(15000, 25000);
-++        }
-++        else
-++            m_uiCorruptSoulTimer -= uiDiff;
-++
-++        if (m_uiMagicsBaneTimer < uiDiff)
-++        {
-++            DoCast(m_creature->getVictim(), m_bIsRegularMode ? SPELL_MAGICSBANE : SPELL_MAGICSBANE_H);
-++            m_uiMagicsBaneTimer = urand(8000, 15000);
-++        }
-++        else
-++            m_uiMagicsBaneTimer -= uiDiff;
-++
-++        if (m_uiShadowBoltTimer < uiDiff)
-++        {
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, m_bIsRegularMode ? SPELL_SHADOW_BOLT : SPELL_SHADOW_BOLT_H);
-++            
-++            if(m_bIsSoulStorm)
-++                m_uiShadowBoltTimer = 3000;
-++            else
-++                m_uiShadowBoltTimer = 5000;
-++        }
-++        else
-++            m_uiShadowBoltTimer -= uiDiff;
-++
-++        if (m_uiFearTimer < uiDiff && m_bIsSoulStorm)
-++        {
-++            m_creature->CastStop();
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(m_creature, SPELL_FEAR);
-++            m_uiFearTimer = urand(8000, 12000);
-++        }
-++        else
-++            m_uiFearTimer -= uiDiff;
-++
-++        if(m_creature->GetHealthPercent() <= 30.0f && !m_bHasTeleported)
-++        {
-++            m_creature->CastStop();
-++            m_uiSoulStormTimer = 2000;
-++            m_bHasTeleported = true;
-++            m_creature->GetMotionMaster()->Clear();
-++            m_creature->GetMotionMaster()->MovePoint(0, 5297.33f, 2506.64f, 686.068f);     
-++        }
-++
-++        if (m_uiSoulStormTimer < uiDiff && !m_bIsSoulStorm)
-++        {
-++            m_creature->CastStop();
-++            m_uiFearTimer = 7000;
-++            //DoCast(m_creature, SPELL_SOULSTORM); // spell broken!!!
-++            DoCast(m_creature, SPELL_SOULSTORM_EFFECT);
-++            DoScriptText(SAY_SOULSTORM, m_creature);
-++            m_creature->GetMotionMaster()->Clear();
-++            m_creature->GetMotionMaster()->MoveIdle();
-++            m_bIsSoulStorm = true;;
-++        }
-++        else
-++            m_uiSoulStormTimer -= uiDiff;
-++
-++        DoMeleeAttackIfReady();
-++
-++        if (m_creature->GetDistance2d(HOME_X, HOME_Y) > 30)
-++            EnterEvadeMode();
-++    }
-++};
-++
-++CreatureAI* GetAI_boss_Bronjahn(Creature* pCreature)
-++{
-++    return new boss_BronjahnAI (pCreature);
-++}
-++
-++struct MANGOS_DLL_DECL mob_corrupted_soul_fragmentAI : public ScriptedAI
-++{
-++    mob_corrupted_soul_fragmentAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++uint32 m_uiRangeCheck_Timer;
-++
-++    void Reset()
-++    {
-++        m_uiRangeCheck_Timer = 1000;
-++    }
-++
-++    void AttackStart(Unit* pWho)
-++    {
-++        return;
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        if (m_uiRangeCheck_Timer < uiDiff)
-++        {
-++            if (m_pInstance)
-++            {
-++                if (Creature* pBronjahm = ((Creature*)Unit::GetUnit((*m_creature), m_pInstance->GetData64(NPC_BRONJAHM))))
-++                {
-++                    float fDistance = m_creature->GetDistance2d(pBronjahm);
-++                    if (fDistance <= 2)
-++                    {
-++                        //((boss_bronjahmAI*)pBronjahm->AI())->SoulFragmentHit();
-++                        m_creature->DealDamage(m_creature, m_creature->GetHealth(), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
-++                    }
-++                }
-++            }
-++            m_uiRangeCheck_Timer = 1000;
-++        }
-++        else m_uiRangeCheck_Timer -= uiDiff;
-++    }
-++};
-++
-++CreatureAI* GetAI_mob_corrupted_soul_fragment(Creature* pCreature)
-++{
-++    return new mob_corrupted_soul_fragmentAI (pCreature);
-++}
-++
-++void AddSC_boss_Bronjahn()
-++{
-++    Script *newscript;
-++    newscript = new Script;
-++    newscript->Name="boss_Bronjahn";
-++    newscript->GetAI = &GetAI_boss_Bronjahn;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->Name="mob_corrupted_soul_fragment";
-++    newscript->GetAI = &GetAI_mob_corrupted_soul_fragment;
-++    newscript->RegisterSelf();
-++}
-+diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp
-+index 1e43052..a4bf51e 100644
-+--- a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp
-++++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp
-+@@ -1,24 +1,518 @@
-+ /* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
-+- * This program is free software; you can redistribute it and/or modify
-+- * it under the terms of the GNU General Public License as published by
-+- * the Free Software Foundation; either version 2 of the License, or
-+- * (at your option) any later version.
-+- *
-+- * This program is distributed in the hope that it will be useful,
-+- * but WITHOUT ANY WARRANTY; without even the implied warranty of
-+- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-+- * GNU General Public License for more details.
-+- *
-+- * You should have received a copy of the GNU General Public License
-+- * along with this program; if not, write to the Free Software
-+- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-+- */
-++* This program is free software; you can redistribute it and/or modify
-++* it under the terms of the GNU General Public License as published by
-++* the Free Software Foundation; either version 2 of the License, or
-++* (at your option) any later version.
-++*
-++* This program is distributed in the hope that it will be useful,
-++* but WITHOUT ANY WARRANTY; without even the implied warranty of
-++* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-++* GNU General Public License for more details.
-++*
-++* You should have received a copy of the GNU General Public License
-++* along with this program; if not, write to the Free Software
-++* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-++*/
-+ 
-+ /* ScriptData
-+ SDName: boss_devourer_of_souls
-+-SD%Complete: 0%
-+-SDComment:
-++SD%Complete: 60%
-++SDComment:  Texts, outro, well of souls
-+ SDCategory: The Forge of Souls
-+ EndScriptData */
-+ 
-+ #include "precompiled.h"
-++#include "forge_of_souls.h"
-++
-++enum
-++{
-++    NPC_HORDE_CHAMPION1         = 37584,
-++    NPC_HORDE_CHAMPION2         = 37588,
-++    NPC_HORDE_CHAMPION3         = 37587,
-++    NPC_HORDE_SLYVANAS          = 38161,
-++    NPC_HORDE_LORALEN           = 37779,
-++    NPC_HORDE_KELIRA            = 37583,
-++
-++    SPELL_PHANTOM_BLAST         = 68982,
-++    SPELL_PHANTOM_BLAST_H       = 70322,
-++    SPELL_MIRRORED_SOUL         = 69051,
-++    SPELL_WELL_OF_SOULS         = 68820,
-++    SPELL_UNLEASHED_SOULS       = 68939,
-++    SPELL_WAILING_SOULS         = 68912,
-++    SPELL_WELL_OF_SOULS_VIS     = 68854,
-++
-++    SPELL_WELL_OF_SOULS_AURA    = 68863,
-++    SPELL_WELL_OF_SOULS_AURA_H  = 70323,
-++
-++    ACHIEVEMENT_THREE_FACED     = 4523,
-++
-++    MOB_WELL_OF_SOULS           = 36536,
-++};
-++//Spells
-++
-++enum Yells
-++{
-++    EMOTE_MIRRORED_SOUL                     = -1610023,
-++    EMOTE_WAILING_SOULS                     = -1610024,
-++    EMOTE_UNLEASHED_SOULS                   = -1610025,
-++    SAY_AGGRO_FEMALE                        = -1610026,
-++    SAY_WAILING_SOULS_FEMALE                = -1610027,
-++    SAY_UNLEASH_SOULS_FEMALE                = -1610028,
-++    SAY_SLAY1_FEMALE                        = -1610029,
-++    SAY_SLAY2_FEMALE                        = -1610030,
-++    SAY_DEATH_FEMALE                        = -1610031,
-++    SAY_AGGRO_MALE                          = -1610032,
-++    SAY_WAILING_SOULS_MALE                  = -1610033,
-++    SAY_UNLEASH_SOULS_MALE                  = -1610034,
-++    SAY_SLAY1_MALE                          = -1610035,
-++    SAY_SLAY2_MALE                          = -1610036,
-++    SAY_DEATH_MALE                          = -1610037,
-++};
-++
-++//Positional defines 
-++struct LocationsXY
-++{
-++    float x, y, z, o;
-++    uint32 id;
-++};
-++static LocationsXY SummonLoc[]=
-++{
-++    {5590.47f, 2427.79f, 705.935f, 0.802851f}, //champ1
-++    {5593.59f, 2428.34f, 705.935f, 0.977384f},
-++    {5600.81f, 2429.31f, 705.935f, 0.890118f},
-++    {5600.80f, 2421.12f, 705.935f, 0.890118f},
-++    {5601.43f, 2426.53f, 705.935f, 0.890118f},
-++    {5601.55f, 2418.36f, 705.935f, 1.151920f},
-++    {5598.00f, 2429.14f, 705.935f, 1.047200f},
-++    {5594.04f, 2424.87f, 705.935f, 1.151920f},
-++    {5597.89f, 2421.54f, 705.935f, 0.610865f},
-++    {5598.57f, 2434.62f, 705.935f, 1.134460f},
-++    {5585.46f, 2417.99f, 705.935f, 1.064650f},// champ2
-++    {5585.46f, 2417.99f, 705.935f, 1.064650f},
-++    {5605.81f, 2428.42f, 705.935f, 0.820305f},
-++    {5591.61f, 2412.66f, 705.935f, 0.925025f},
-++    {5593.90f, 2410.64f, 705.935f, 0.872665f},
-++    {5586.76f, 2416.73f, 705.935f, 0.942478f},
-++    {5592.23f, 2419.14f, 705.935f, 0.855211f},// champ3
-++    {5594.61f, 2416.87f, 705.935f, 0.907571f},
-++    {5589.77f, 2421.03f, 705.935f, 0.855211f},
-++    {5606.12f, 2436.60f, 705.935f, 0.890110f},// sylvanas / jaina
-++    {5602.58f, 2435.95f, 705.935f, 0.959931f},// lolaren / elandra
-++    {5606.13f, 2433.16f, 705.935f, 0.785398f},// kalira / koreln
-++};
-++
-++static LocationsXY MoveLoc[]=
-++{
-++    {5650.92f, 2488.89f, 708.696f}, // jaina / sylvanas
-++    {5637.01f, 2482.89f, 708.695f}, // champions
-++};
-++
-++#define HOME_X                      5661.58f
-++#define HOME_Y                      2507.2f
-++
-++/******** JAINA & SYLVANAS *******/
-++
-++enum
-++{
-++    SAY_SYLVANAS                           = -1610015,
-++    SAY_JAINA                              = -1610008,
-++};
-++
-++struct MANGOS_DLL_DECL npc_sylvanas_jaina_fos_endAI: public ScriptedAI
-++{
-++    npc_sylvanas_jaina_fos_endAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++
-++    uint32 m_uiSpeech_Timer;
-++    uint8 m_uiOutro_Phase;
-++    bool m_bIsOutro;
-++    uint32 creatureEntry;
-++
-++    void Reset()
-++    {
-++        m_uiOutro_Phase     = 0;
-++        m_uiSpeech_Timer    = 1000;
-++        m_bIsOutro          = true;
-++        creatureEntry = m_creature->GetEntry();
-++    }
-++
-++    void SummonHordeChampions()
-++    {
-++        for (uint8 i = 0; i < 10; i++)
-++        {
-++            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_1_HORDE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++            if (pTemp)
-++                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-++        }
-++
-++        for (uint8 i = 10; i < 16; i++)
-++        {
-++            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_2_HORDE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++            if (pTemp)
-++                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-++        }
-++
-++        for (uint8 i = 16; i < 19; i++)
-++        {
-++            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_3_HORDE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++            if (pTemp)
-++                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-++        }
-++
-++        Creature *pLoralen = m_creature->SummonCreature(NPC_LORALEN, SummonLoc[20].x, SummonLoc[20].y, SummonLoc[20].z, SummonLoc[20].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++        if (pLoralen)
-++            pLoralen->GetMotionMaster()->MovePoint(0, MoveLoc[0].x - 5, MoveLoc[0].y + 5, MoveLoc[0].z);
-++
-++        Creature *pKalira = m_creature->SummonCreature(NPC_KALIRA, SummonLoc[21].x, SummonLoc[21].y, SummonLoc[21].z, SummonLoc[21].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++        if (pKalira)
-++            pKalira->GetMotionMaster()->MovePoint(0, MoveLoc[0].x + 5, MoveLoc[0].y - 5, MoveLoc[0].z);
-++
-++    }
-++
-++    void SummonAlyChampions()
-++    {
-++        for (uint8 i = 0; i < 10; i++)
-++        {
-++            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_1_ALLIANCE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++            if (pTemp)
-++                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-++        }
-++
-++        for (uint8 i = 10; i < 16; i++)
-++        {
-++            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_2_ALLIANCE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++            if (pTemp)
-++                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-++        }
-++
-++        for (uint8 i = 16; i < 19; i++)
-++        {
-++            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_3_ALLIANCE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++            if (pTemp)
-++                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-++        }
-++
-++        Creature *pElandra = m_creature->SummonCreature(NPC_ELANDRA, SummonLoc[20].x, SummonLoc[20].y, SummonLoc[20].z, SummonLoc[20].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++        if (pElandra)
-++            pElandra->GetMotionMaster()->MovePoint(0, MoveLoc[0].x - 5, MoveLoc[0].y + 5, MoveLoc[0].z);
-++
-++        Creature *pKoreln = m_creature->SummonCreature(NPC_KORELN, SummonLoc[21].x, SummonLoc[21].y, SummonLoc[21].z, SummonLoc[21].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++        if (pKoreln)
-++            pKoreln->GetMotionMaster()->MovePoint(0, MoveLoc[0].x + 5, MoveLoc[0].y - 5, MoveLoc[0].z);
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        if (m_bIsOutro)
-++        {
-++            if(m_uiSpeech_Timer < uiDiff)
-++            {
-++                switch(m_uiOutro_Phase)
-++                {
-++                case 0:
-++                    switch (creatureEntry)
-++                    {
-++                    case NPC_JAINA_END:
-++                        SummonAlyChampions();
-++                        break;
-++                    case NPC_SYLVANAS_END:
-++                        SummonHordeChampions();
-++                        break;
-++                    }
-++                    ++m_uiOutro_Phase;
-++                    m_uiSpeech_Timer = 30000;
-++                    break;
-++                case 1:
-++                    switch (creatureEntry)
-++                    {
-++                    case NPC_JAINA_END:
-++                        DoScriptText(SAY_JAINA, m_creature);
-++                        break;
-++                    case NPC_SYLVANAS_END:
-++                        DoScriptText(SAY_SYLVANAS, m_creature);
-++                        break;
-++                    }
-++                    ++m_uiOutro_Phase;
-++                    m_uiSpeech_Timer = 5000;
-++                    break;
-++
-++                default:
-++                    m_uiSpeech_Timer = 100000;
-++                }
-++            }else m_uiSpeech_Timer -= uiDiff;
-++        }
-++    }
-++};
-++
-++struct MANGOS_DLL_DECL boss_Devourer_of_SoulsAI : public ScriptedAI
-++{
-++    boss_Devourer_of_SoulsAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiPhantomBlastTimer;
-++    uint32 m_uiMirroredSoulTimer;
-++    uint32 m_uiWellOfSoulsTimer;
-++    uint32 m_uiUnleashedSoulsTimer;
-++    uint32 m_uiWailingSoulsTimer;
-++
-++    bool m_bIsThreeFaced;
-++
-++    bool isHorde;
-++    bool isAly;
-++
-++    void Reset()
-++    {        
-++        m_bIsThreeFaced         = false;
-++
-++        isHorde                 = false;
-++        isAly                   = false;
-++
-++        m_uiPhantomBlastTimer   = 45000;
-++        m_uiMirroredSoulTimer   = 20000;
-++        m_uiWellOfSoulsTimer    = 30000;
-++        m_uiUnleashedSoulsTimer = 25000;
-++        m_uiWailingSoulsTimer   = 28000;
-++
-++        if (m_pInstance)
-++            m_pInstance->SetData(TYPE_DEVOURER_OF_SOULS, NOT_STARTED);
-++    }
-++
-++    void MoveInLineOfSight(Unit* pWho)
-++    {
-++        if(pWho->getFaction() == 1 || pWho->getFaction() == 3 || pWho->getFaction() == 4 || pWho->getFaction() == 115 || pWho->getFaction() == 1629)
-++            isAly = true;
-++
-++        if(pWho->getFaction() == 2 || pWho->getFaction() == 5 || pWho->getFaction() == 6 || pWho->getFaction() == 116 || pWho->getFaction() == 1610)
-++            isHorde = true;
-++    }
-++
-++    void Aggro(Unit* pWho)
-++    {
-++        if (m_pInstance)
-++            m_pInstance->SetData(TYPE_DEVOURER_OF_SOULS, IN_PROGRESS);
-++
-++        if(irand(0,1))
-++            DoScriptText(SAY_AGGRO_FEMALE, m_creature);
-++        else
-++            DoScriptText(SAY_AGGRO_MALE, m_creature);
-++    }
-++
-++    void KilledUnit(Unit *pVictim)
-++    {
-++        switch (urand(0, 3))
-++        {
-++        case 0:
-++            DoScriptText(SAY_SLAY1_FEMALE, m_creature);
-++            break;
-++        case 1:
-++            DoScriptText(SAY_SLAY2_FEMALE, m_creature);
-++            break;
-++        case 2:
-++            DoScriptText(SAY_SLAY1_MALE, m_creature);
-++            break;
-++        case 3:
-++            DoScriptText(SAY_SLAY2_MALE, m_creature);
-++            break;
-++        }
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        //Return since we have no target
-++        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-++            return;
-++
-++        if (m_uiPhantomBlastTimer < uiDiff)
-++        {
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, m_bIsRegularMode ? SPELL_PHANTOM_BLAST : SPELL_PHANTOM_BLAST_H);
-++            m_uiPhantomBlastTimer = 45000;
-++        }
-++        else
-++            m_uiPhantomBlastTimer -= uiDiff;
-++
-++        if (m_uiMirroredSoulTimer < uiDiff)
-++        {
-++            DoScriptText(EMOTE_MIRRORED_SOUL, m_creature);
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, SPELL_MIRRORED_SOUL);
-++            m_uiMirroredSoulTimer = 20000;
-++        }
-++        else
-++            m_uiMirroredSoulTimer -= uiDiff;
-++
-++        if (m_uiWellOfSoulsTimer < uiDiff)
-++        {
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, SPELL_WELL_OF_SOULS);
-++            m_uiWellOfSoulsTimer = 20000;
-++        }
-++        else
-++            m_uiWellOfSoulsTimer -= uiDiff;
-++
-++        if (m_uiUnleashedSoulsTimer < uiDiff)
-++        {
-++            switch (urand(0, 1))
-++            {
-++            case 0:
-++                DoScriptText(SAY_UNLEASH_SOULS_FEMALE, m_creature);
-++                break;
-++            case 1:
-++                DoScriptText(SAY_UNLEASH_SOULS_MALE, m_creature);
-++                break;
-++            }
-++
-++            DoScriptText(EMOTE_UNLEASHED_SOULS, m_creature);
-++            m_creature->CastStop();
-++            DoCast(m_creature, SPELL_UNLEASHED_SOULS);
-++
-++            m_uiUnleashedSoulsTimer = 30000;
-++        }
-++        else
-++            m_uiUnleashedSoulsTimer -= uiDiff;
-++
-++        if (m_uiWailingSoulsTimer < uiDiff)
-++        {
-++            if(irand(0,1))
-++                DoScriptText(SAY_WAILING_SOULS_FEMALE, m_creature);
-++            else
-++                DoScriptText(SAY_WAILING_SOULS_MALE, m_creature);
-++            DoScriptText(EMOTE_WAILING_SOULS, m_creature);
-++
-++            DoCast(m_creature->getVictim(), SPELL_WAILING_SOULS);
-++
-++            m_uiWailingSoulsTimer = 15000;
-++        }
-++        else
-++            m_uiWailingSoulsTimer -= uiDiff;
-++
-++        DoMeleeAttackIfReady();
-++
-++        if (m_creature->GetDistance2d(HOME_X, HOME_Y) > 50)
-++            EnterEvadeMode();
-++    }
-++
-++    void JustDied(Unit* pKiller)
-++    {
-++        if (m_pInstance)
-++            m_pInstance->SetData(TYPE_DEVOURER_OF_SOULS, DONE);
-++
-++        switch (urand(0, 1))
-++        {
-++        case 0:
-++            DoScriptText(SAY_DEATH_FEMALE, m_creature);
-++            break;
-++        case 1:
-++            DoScriptText(SAY_DEATH_MALE, m_creature);
-++            break;
-++        }
-++
-++        if(isAly)
-++        {
-++            Creature *pJaina = m_creature->SummonCreature(NPC_JAINA_END, SummonLoc[19].x, SummonLoc[19].y, SummonLoc[19].z, SummonLoc[19].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++            if (pJaina)
-++                pJaina->GetMotionMaster()->MovePoint(0, MoveLoc[0].x, MoveLoc[0].y, MoveLoc[0].z);
-++        }
-++
-++        if(isHorde)
-++        {
-++            Creature *pSylvanas = m_creature->SummonCreature(NPC_SYLVANAS_END, SummonLoc[19].x, SummonLoc[19].y, SummonLoc[19].z, SummonLoc[19].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-++            if (pSylvanas)
-++                pSylvanas->GetMotionMaster()->MovePoint(0, MoveLoc[0].x, MoveLoc[0].y, MoveLoc[0].z);
-++        }
-++    }
-++};
-++
-++CreatureAI* GetAI_boss_Devourer_of_Souls(Creature* pCreature)
-++{
-++    return new boss_Devourer_of_SoulsAI (pCreature);
-++}
-++
-++struct MANGOS_DLL_DECL mob_well_of_soulsAI : public ScriptedAI
-++{
-++    mob_well_of_soulsAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
-++        pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
-++        SetCombatMovement(false);
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiSpellTimer;
-++
-++    void Reset()
-++    { 
-++        m_uiSpellTimer = 1000;
-++        DoCast(m_creature, m_bIsRegularMode ? SPELL_WELL_OF_SOULS_AURA : SPELL_WELL_OF_SOULS_AURA_H);
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        /*if (m_uiSpellTimer < uiDiff)
-++        {
-++            Map *map = m_creature->GetMap();
-++            if (map->IsDungeon())
-++            {
-++                Map::PlayerList const &PlayerList = map->GetPlayers();
-++
-++                if (PlayerList.isEmpty())
-++                    return;
-++
-++                for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
-++                {
-++                    if (i->getSource()->isAlive() && m_creature->GetDistance2d(i->getSource()->GetPositionX(), i->getSource()->GetPositionY()) < 4)
-++                        m_creature->DealDamage(i->getSource(), m_bIsRegularMode ? urand(2925, 3075) : urand(3900, 4100), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
-++                }
-++            } 
-++            m_uiSpellTimer = 1000;
-++        }
-++        else
-++            m_uiSpellTimer -= uiDiff;*/
-++    }
-++};
-++
-++CreatureAI* GetAI_mob_well_of_souls(Creature* pCreature)
-++{
-++    return new mob_well_of_soulsAI (pCreature);
-++}
-++
-++CreatureAI* GetAI_npc_sylvanas_jaina_fos_end(Creature* pCreature)
-++{
-++    return new npc_sylvanas_jaina_fos_endAI (pCreature);
-++}
-++
-++void AddSC_boss_Devourer_Of_Souls()
-++{
-++    Script *newscript;
-++    newscript = new Script;
-++    newscript->Name="boss_Devourer_of_Souls";
-++    newscript->GetAI = &GetAI_boss_Devourer_of_Souls;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->Name="mob_well_of_souls";
-++    newscript->GetAI = &GetAI_mob_well_of_souls;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->GetAI = &GetAI_npc_sylvanas_jaina_fos_end;
-++    newscript->Name = "npc_slyvanas_jaina_fos_end";
-++    newscript->RegisterSelf();
-++}
-+diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp
-+new file mode 100644
-+index 0000000..b209a0b
-+--- /dev/null
-++++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp
-+@@ -0,0 +1,777 @@
-++/* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
-++* This program is free software; you can redistribute it and/or modify
-++* it under the terms of the GNU General Public License as published by
-++* the Free Software Foundation; either version 2 of the License, or
-++* (at your option) any later version.
-++*
-++* This program is distributed in the hope that it will be useful,
-++* but WITHOUT ANY WARRANTY; without even the implied warranty of
-++* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-++* GNU General Public License for more details.
-++*
-++* You should have received a copy of the GNU General Public License
-++* along with this program; if not, write to the Free Software
-++* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-++*/
-++
-++/* ScriptData
-++SDName: forge_of_souls
-++SD%Complete: 70%
-++SDComment:  Implement event (Jaina & Sylvanas)
-++SDCategory: The Forge of Souls
-++EndScriptData */
-++
-++#include "precompiled.h"
-++#include "forge_of_souls.h"
-++
-++enum
-++{
-++    /**** SPELLS ****/
-++
-++    //Spiteful Apparition
-++    SPELL_SPITE                 = 68895,
-++    SPELL_SPITE_H               = 70212,
-++
-++    //Spectral Warden
-++    SPELL_VEIL_OF_SHADOWS       = 69633,
-++    SPELL_WAIL_OF_SOULS         = 69148,
-++    SPELL_WAIL_OF_SOULS_H       = 70210,
-++
-++    //Soulguard Watchman
-++    SPELL_SHROUD_OF_RUNES       = 69056,
-++    SPELL_UNHOLY_RAGE           = 69053,
-++
-++    //Soulguard Reaper
-++    SPELL_FROST_NOVA            = 69060,
-++    SPELL_FROST_NOVA_H          = 70209,
-++    SPELL_SHADOW_LANCE          = 69058,
-++
-++    //Soulguard Bonecaster
-++    SPELL_BONE_VOLLEY           = 69080,
-++    SPELL_BONE_VOLLEY_H         = 70206,
-++    SPELL_RAISE_DEAD            = 69562,
-++    SPELL_SHIELD_OF_BONES       = 69069,
-++    SPELL_SHIELD_OF_BONES_H     = 70207,
-++
-++    //Soulguard Animator
-++    // Raise dead 69562
-++    SPELL_SHADOW_BOLT           = 69068,
-++    SPELL_SHADOW_BOLT_H         = 70208, 
-++    SPELL_SOUL_SICKNESS         = 69131,
-++    SPELL_SOUL_SIPHON           = 69128,
-++
-++    //Soulguard Adept
-++    //Raise dead 69562
-++    //Shadow Bolt 69068/70208
-++    SPELL_DRAIN_LIFE            = 69066,
-++    SPELL_DRAIN_LIFE_H          = 70213,
-++    SPELL_SHADOW_MEND           = 69564,
-++    SPELL_SHADOW_MEND_H         = 70205,
-++
-++    //Soul Horror
-++    SPELL_SOUL_STRIKE           = 69088,
-++    SPELL_SOUL_STRIKE_H         = 70211,
-++};
-++
-++struct MANGOS_DLL_DECL npc_SpitefulApparitionAI: public ScriptedAI
-++{
-++    npc_SpitefulApparitionAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiSpiteTimer;
-++
-++    void Reset()
-++    {
-++        m_uiSpiteTimer = 8000;
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        //Return since we have no target
-++        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-++            return;
-++
-++        if (m_uiSpiteTimer < uiDiff)
-++        {
-++            DoCast(m_creature->getVictim(), m_bIsRegularMode ? SPELL_SPITE : SPELL_SPITE_H);
-++            m_uiSpiteTimer = 8000;
-++        }
-++        else
-++            m_uiSpiteTimer -= uiDiff;
-++
-++        DoMeleeAttackIfReady();
-++    }
-++};
-++
-++struct MANGOS_DLL_DECL npc_SpectralWardenAI: public ScriptedAI
-++{
-++    npc_SpectralWardenAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiVeilOfShadowsTimer;
-++    uint32 m_uiWailOfSoulsTimer;
-++
-++    void Reset()
-++    {
-++        m_uiVeilOfShadowsTimer  = 5000;
-++        m_uiWailOfSoulsTimer    = 10000;
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        //Return since we have no target
-++        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-++            return;
-++
-++        if (m_uiVeilOfShadowsTimer < uiDiff)
-++        {
-++            DoCast(m_creature->getVictim(), SPELL_VEIL_OF_SHADOWS);
-++            m_uiVeilOfShadowsTimer = 10000;
-++        }
-++        else
-++            m_uiVeilOfShadowsTimer -= uiDiff;
-++
-++        if (m_uiWailOfSoulsTimer < uiDiff)
-++        {
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, m_bIsRegularMode ? SPELL_WAIL_OF_SOULS : SPELL_WAIL_OF_SOULS_H);
-++            m_uiWailOfSoulsTimer = 5000;
-++        }
-++        else
-++            m_uiWailOfSoulsTimer -= uiDiff;
-++
-++        DoMeleeAttackIfReady();
-++    }
-++};
-++
-++struct MANGOS_DLL_DECL npc_SoulguardWatchmanAI: public ScriptedAI
-++{
-++    npc_SoulguardWatchmanAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiShroudOfRunesTimer;
-++    uint32 m_uiUnholyRageTimer;
-++
-++    void Reset()
-++    {
-++        m_uiShroudOfRunesTimer  = 1000;
-++        m_uiUnholyRageTimer     = 1000;
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        //Return since we have no target
-++        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-++            return;
-++
-++        if (m_uiShroudOfRunesTimer < uiDiff)
-++        {
-++            DoCast(m_creature, SPELL_SHROUD_OF_RUNES);
-++            m_uiShroudOfRunesTimer = 5000;
-++        }
-++        else
-++            m_uiShroudOfRunesTimer -= uiDiff;
-++
-++        if (m_uiUnholyRageTimer < uiDiff)
-++        {
-++            DoCast(m_creature, SPELL_UNHOLY_RAGE);
-++            m_uiUnholyRageTimer = 8000;
-++        }
-++        else
-++            m_uiUnholyRageTimer -= uiDiff;
-++
-++        DoMeleeAttackIfReady();
-++    }
-++};
-++
-++struct MANGOS_DLL_DECL npc_SoulguardReaperAI: public ScriptedAI
-++{
-++    npc_SoulguardReaperAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiFrostNovaTimer;
-++    uint32 m_uiShadowLanceTimer;
-++
-++    void Reset()
-++    {
-++        m_uiFrostNovaTimer      = 8000;
-++        m_uiShadowLanceTimer    = 5000;
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        //Return since we have no target
-++        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-++            return;
-++
-++        if (m_uiFrostNovaTimer < uiDiff)
-++        {
-++            DoCast(m_creature, m_bIsRegularMode ? SPELL_FROST_NOVA : SPELL_FROST_NOVA_H);
-++            m_uiFrostNovaTimer = 9600;
-++        }
-++        else
-++            m_uiFrostNovaTimer -= uiDiff;
-++
-++        if (m_uiShadowLanceTimer < uiDiff)
-++        {
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, SPELL_SHADOW_LANCE);
-++            m_uiShadowLanceTimer = 8000;
-++        }
-++        else
-++            m_uiShadowLanceTimer -= uiDiff;
-++
-++        DoMeleeAttackIfReady();
-++    }
-++};
-++
-++struct MANGOS_DLL_DECL npc_SoulguardBonecasterAI: public ScriptedAI
-++{
-++    npc_SoulguardBonecasterAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiBoneVolleyTimer;
-++    uint32 m_uiRaiseDeadTimer;
-++    uint32 m_uiShieldOfBonesTimer;
-++
-++    void Reset()
-++    {
-++        m_uiBoneVolleyTimer     = 6000;
-++        m_uiRaiseDeadTimer      = 25000;
-++        m_uiShieldOfBonesTimer  = 6000;
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        //Return since we have no target
-++        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-++            return;
-++
-++        if (m_uiBoneVolleyTimer < uiDiff)
-++        {
-++            DoCast(m_creature, m_bIsRegularMode ? SPELL_BONE_VOLLEY : SPELL_BONE_VOLLEY_H);
-++            m_uiBoneVolleyTimer = 7000;
-++        }
-++        else
-++            m_uiBoneVolleyTimer -= uiDiff;
-++
-++        if (m_uiRaiseDeadTimer < uiDiff)
-++        {
-++            DoCast(m_creature, SPELL_RAISE_DEAD);
-++            m_uiRaiseDeadTimer = 25000;
-++        }
-++        else
-++            m_uiRaiseDeadTimer -= uiDiff;
-++
-++        if (m_uiShieldOfBonesTimer < uiDiff)
-++        {
-++            DoCast(m_creature, m_bIsRegularMode ? SPELL_SHIELD_OF_BONES : SPELL_SHIELD_OF_BONES_H);
-++            m_uiShieldOfBonesTimer = 8000;
-++        }
-++        else
-++            m_uiShieldOfBonesTimer -= uiDiff;
-++
-++        DoMeleeAttackIfReady();
-++    }
-++};
-++
-++struct MANGOS_DLL_DECL npc_SoulguardAnimatorAI: public ScriptedAI
-++{
-++    npc_SoulguardAnimatorAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiRaiseDeadTimer;
-++    uint32 m_uiShadowBoltTimer;
-++    uint32 m_uiSoulSicknessTimer;
-++    uint32 m_uiSoulSiphonTimer;
-++
-++    void Reset()
-++    {
-++        m_uiRaiseDeadTimer      = 25000;
-++        m_uiShadowBoltTimer     = 5000;
-++        m_uiSoulSicknessTimer   = 8000;
-++        m_uiSoulSiphonTimer     = 10000;
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        //Return since we have no target
-++        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-++            return;
-++
-++        if (m_uiRaiseDeadTimer < uiDiff)
-++        {
-++            DoCast(m_creature, SPELL_RAISE_DEAD);
-++            m_uiRaiseDeadTimer = 25000;
-++        }
-++        else
-++            m_uiRaiseDeadTimer -= uiDiff;
-++
-++        if (m_uiShadowBoltTimer < uiDiff)
-++        {
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, m_bIsRegularMode ? SPELL_SHADOW_BOLT : SPELL_SHADOW_BOLT_H);
-++            m_uiShadowBoltTimer = 5000;
-++        }
-++        else
-++            m_uiShadowBoltTimer -= uiDiff;
-++
-++        if (m_uiSoulSicknessTimer < uiDiff)
-++        {
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, SPELL_SOUL_SICKNESS);
-++            m_uiSoulSicknessTimer = 10000;
-++        }
-++        else
-++            m_uiSoulSicknessTimer -= uiDiff;
-++
-++        if (m_uiSoulSiphonTimer < uiDiff)
-++        {
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, SPELL_SOUL_SIPHON);
-++            m_uiSoulSiphonTimer = 8000;
-++        }
-++        else
-++            m_uiSoulSiphonTimer -= uiDiff;
-++
-++        DoMeleeAttackIfReady();
-++    }
-++};
-++
-++struct MANGOS_DLL_DECL npc_SoulguardAdeptAI: public ScriptedAI
-++{
-++    npc_SoulguardAdeptAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiRaiseDeadTimer;
-++    uint32 m_uiShadowBoltTimer;
-++    uint32 m_uiDrainLifeTimer;
-++    uint32 m_uiShadowMendTimer;
-++
-++    void Reset()
-++    {
-++        m_uiRaiseDeadTimer      = 25000;
-++        m_uiShadowBoltTimer     = 8000;
-++        m_uiDrainLifeTimer      = 7000;
-++        m_uiShadowMendTimer     = 35000;
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        //Return since we have no target
-++        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-++            return;
-++
-++        if (m_uiRaiseDeadTimer < uiDiff)
-++        {
-++            DoCast(m_creature, SPELL_RAISE_DEAD);
-++            m_uiRaiseDeadTimer = 25000;
-++        }
-++        else
-++            m_uiRaiseDeadTimer -= uiDiff;
-++
-++        if (m_uiShadowBoltTimer < uiDiff)
-++        {
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, m_bIsRegularMode ? SPELL_SHADOW_BOLT : SPELL_SHADOW_BOLT_H);
-++            m_uiShadowBoltTimer = 4000;
-++        }
-++        else
-++            m_uiShadowBoltTimer -= uiDiff;
-++
-++        if (m_uiDrainLifeTimer < uiDiff)
-++        {
-++            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-++                DoCast(pTarget, m_bIsRegularMode ? SPELL_DRAIN_LIFE : SPELL_DRAIN_LIFE_H);
-++            m_uiDrainLifeTimer = 9000;
-++        }
-++        else
-++            m_uiDrainLifeTimer -= uiDiff;
-++
-++        if (m_uiShadowMendTimer < uiDiff)
-++        {
-++            DoCast(m_creature, m_bIsRegularMode ? SPELL_SHADOW_MEND : SPELL_SHADOW_MEND_H);
-++            m_uiShadowMendTimer = 20000;
-++        }
-++        else
-++            m_uiShadowMendTimer -= uiDiff;
-++
-++        DoMeleeAttackIfReady();
-++    }
-++};
-++
-++struct MANGOS_DLL_DECL npc_SoulHorrorAI: public ScriptedAI
-++{
-++    npc_SoulHorrorAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++    bool m_bIsRegularMode;
-++
-++    uint32 m_uiSoulStrikeTimer;
-++
-++    void Reset()
-++    {
-++        m_uiSoulStrikeTimer = 6000;
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        //Return since we have no target
-++        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-++            return;
-++
-++        if (m_uiSoulStrikeTimer < uiDiff)
-++        {
-++            DoCast(m_creature->getVictim(), m_bIsRegularMode ? SPELL_SOUL_STRIKE : SPELL_SOUL_STRIKE_H);
-++            m_uiSoulStrikeTimer = 8000;
-++        }
-++        else
-++            m_uiSoulStrikeTimer -= uiDiff;
-++
-++        DoMeleeAttackIfReady();
-++    }
-++};
-++
-++/******** JAINA & SYLVANAS *******/
-++
-++#define GOSSIP_ITEM_SYLVANAS "What would you have of me, Banshee Queen?"
-++#define GOSSIP_ITEM_JAINA "What should we do, Lady Jaina?"
-++
-++enum
-++{
-++    SAY_SPEECH_SYLVANAS1                              = -1610009,
-++    SAY_SPEECH_SYLVANAS2                              = -1610010,
-++    SAY_SPEECH_SYLVANAS3                              = -1610011,
-++    SAY_SPEECH_SYLVANAS4                              = -1610012,
-++    SAY_SPEECH_SYLVANAS5                              = -1610013,
-++    SAY_SPEECH_SYLVANAS6                              = -1610014,
-++
-++    SAY_SPEECH_JAINA1                              = -1610000,
-++    SAY_SPEECH_JAINA2                              = -1610001,
-++    SAY_SPEECH_JAINA3                              = -1610002,
-++    SAY_SPEECH_JAINA4                              = -1610003,
-++    SAY_SPEECH_JAINA5                              = -1610004,
-++    SAY_SPEECH_JAINA6                              = -1610005,
-++    SAY_SPEECH_JAINA7                              = -1610006,
-++    SAY_SPEECH_JAINA8                              = -1610007,
-++};
-++
-++struct MANGOS_DLL_DECL npc_sylvanas_jaina_fos_startAI: public ScriptedAI
-++{
-++    npc_sylvanas_jaina_fos_startAI(Creature *pCreature) : ScriptedAI(pCreature)
-++    {
-++        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-++        pCreature->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
-++        Reset();
-++    }
-++
-++    ScriptedInstance* m_pInstance;
-++
-++    uint32 m_uiSpeech_Timer;
-++    uint8 m_uiIntro_Phase;
-++    bool m_bIsIntro;
-++    uint32 creatureEntry;
-++
-++    void Reset()
-++    {
-++        m_uiIntro_Phase     = 0;
-++        m_uiSpeech_Timer    = 1000;
-++        m_bIsIntro          = false;
-++        creatureEntry = m_creature->GetEntry();
-++    }
-++
-++    void StartIntro()
-++    {
-++        m_bIsIntro = true;
-++    }
-++
-++    void UpdateAI(const uint32 uiDiff)
-++    {
-++        if (m_bIsIntro)
-++        {
-++            if(m_uiSpeech_Timer < uiDiff)
-++            {
-++                switch(m_uiIntro_Phase)
-++                {
-++                case 0:
-++                    switch (creatureEntry)
-++                    {
-++                    case NPC_JAINA_START:
-++                        DoScriptText(SAY_SPEECH_JAINA1, m_creature);
-++                        break;
-++                    case NPC_SYLVANAS_START:
-++                        DoScriptText(SAY_SPEECH_SYLVANAS1, m_creature);
-++                        break;
-++                    }
-++                    ++m_uiIntro_Phase;
-++                    m_uiSpeech_Timer = 12000;
-++                    break;
-++                case 1:
-++                    switch (creatureEntry)
-++                    {
-++                    case NPC_JAINA_START:
-++                        DoScriptText(SAY_SPEECH_JAINA2, m_creature);
-++                        break;
-++                    case NPC_SYLVANAS_START:
-++                        DoScriptText(SAY_SPEECH_SYLVANAS2, m_creature);
-++                        break;
-++                    }
-++                    ++m_uiIntro_Phase;
-++                    m_uiSpeech_Timer = 10000;
-++                    break;
-++                case 2:
-++                    switch (creatureEntry)
-++                    {
-++                    case NPC_JAINA_START:
-++                        DoScriptText(SAY_SPEECH_JAINA3, m_creature);
-++                        break;
-++                    case NPC_SYLVANAS_START:
-++                        DoScriptText(SAY_SPEECH_SYLVANAS3, m_creature);
-++                        break;
-++                    }
-++                    ++m_uiIntro_Phase;
-++                    m_uiSpeech_Timer = 10000;
-++                    break;
-++                case 3:
-++                    switch (creatureEntry)
-++                    {
-++                    case NPC_JAINA_START:
-++                        DoScriptText(SAY_SPEECH_JAINA4, m_creature);
-++                        break;
-++                    case NPC_SYLVANAS_START:
-++                        DoScriptText(SAY_SPEECH_SYLVANAS4, m_creature);
-++                        break;
-++                    }
-++                    ++m_uiIntro_Phase;
-++                    m_uiSpeech_Timer = 10000;
-++                    break;
-++                case 4:
-++                    switch (creatureEntry)
-++                    {
-++                    case NPC_JAINA_START:
-++                        DoScriptText(SAY_SPEECH_JAINA5, m_creature);
-++                        break;
-++                    case NPC_SYLVANAS_START:
-++                        DoScriptText(SAY_SPEECH_SYLVANAS5, m_creature);
-++                        break;
-++                    }
-++                    ++m_uiIntro_Phase;
-++                    m_uiSpeech_Timer = 10000;
-++                    break;
-++                case 5:
-++                    switch (creatureEntry)
-++                    {
-++                    case NPC_JAINA_START:
-++                        DoScriptText(SAY_SPEECH_JAINA6, m_creature);
-++                        break;
-++                    case NPC_SYLVANAS_START:
-++                        DoScriptText(SAY_SPEECH_SYLVANAS6, m_creature);
-++                        m_bIsIntro = false;
-++                        break;
-++                    }
-++                    ++m_uiIntro_Phase;
-++                    m_uiSpeech_Timer = 12000;
-++                    break;
-++                case 6:
-++                    DoScriptText(SAY_SPEECH_JAINA7, m_creature);
-++                    ++m_uiIntro_Phase;
-++                    m_uiSpeech_Timer = 6000;
-++                    break;
-++                case 8:
-++                    DoScriptText(SAY_SPEECH_JAINA8, m_creature);
-++                    ++m_uiIntro_Phase;
-++                    m_bIsIntro = false;
-++                    m_uiSpeech_Timer = 10000;
-++                    break;
-++
-++                default:
-++                    m_uiSpeech_Timer = 100000;
-++                }
-++            }else m_uiSpeech_Timer -= uiDiff;
-++        }
-++    }
-++};
-++
-++bool GossipHello_npc_slyvanas_jaina_fos(Player* pPlayer, Creature* pCreature)
-++{
-++    uint32 creatureEntry;
-++    creatureEntry = pCreature->GetEntry();
-++
-++    if (pCreature->isQuestGiver())
-++        pPlayer->PrepareQuestMenu(pCreature->GetGUID());
-++
-++    switch (creatureEntry)
-++    {
-++    case NPC_JAINA_START:
-++        pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_ITEM_JAINA, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+1);
-++        break;
-++    case NPC_SYLVANAS_START:
-++        pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_ITEM_SYLVANAS, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+1);
-++        break;
-++    }
-++    pPlayer->SEND_GOSSIP_MENU(DEFAULT_GOSSIP_MESSAGE, pCreature->GetGUID());
-++    return true;
-++}
-++
-++bool GossipSelect_npc_slyvanas_jaina_fos(Player* pPlayer, Creature* pCreature, uint32 uiSender, uint32 uiAction)
-++{
-++    switch(uiAction)
-++    {
-++    case GOSSIP_ACTION_INFO_DEF+1:
-++        ((npc_sylvanas_jaina_fos_startAI*)pCreature->AI())->StartIntro();
-++        pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
-++        pPlayer->CLOSE_GOSSIP_MENU();
-++    }
-++
-++    return true;
-++}
-++
-++CreatureAI* GetAI_npc_SpitefulApparitionAI(Creature* pCreature)
-++{
-++    return new npc_SpitefulApparitionAI (pCreature);
-++}
-++
-++CreatureAI* GetAI_npc_SpectralWardenAI(Creature* pCreature)
-++{
-++    return new npc_SpectralWardenAI (pCreature);
-++}
-++
-++CreatureAI* GetAI_npc_SoulguardWatchmanAI(Creature* pCreature)
-++{
-++    return new npc_SoulguardWatchmanAI (pCreature);
-++}
-++
-++CreatureAI* GetAI_npc_SoulguardReaperAI(Creature* pCreature)
-++{
-++    return new npc_SoulguardReaperAI (pCreature);
-++}
-++
-++CreatureAI* GetAI_npc_SoulguardBonecasterAI(Creature* pCreature)
-++{
-++    return new npc_SoulguardBonecasterAI (pCreature);
-++}
-++
-++CreatureAI* GetAI_npc_SoulguardAnimatorAI(Creature* pCreature)
-++{
-++    return new npc_SoulguardAnimatorAI (pCreature);
-++}
-++
-++CreatureAI* GetAI_npc_SoulguardAdeptAI(Creature* pCreature)
-++{
-++    return new npc_SoulguardAdeptAI (pCreature);
-++}
-++
-++CreatureAI* GetAI_npc_SoulHorrorAI(Creature* pCreature)
-++{
-++    return new npc_SoulHorrorAI (pCreature);
-++}
-++
-++CreatureAI* GetAI_npc_sylvanas_jaina_fos_start(Creature* pCreature)
-++{
-++    return new npc_sylvanas_jaina_fos_startAI (pCreature);
-++}
-++
-++void AddSC_Forge_Of_Souls()
-++{
-++    Script *newscript;
-++    newscript = new Script;
-++    newscript->Name="npc_SpitefulApparition";
-++    newscript->GetAI = &GetAI_npc_SpitefulApparitionAI;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->Name="npc_SpectralWarden";
-++    newscript->GetAI = &GetAI_npc_SpectralWardenAI;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->Name="npc_SoulguardWatchman";
-++    newscript->GetAI = &GetAI_npc_SoulguardWatchmanAI;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->Name="npc_SoulguardReaper";
-++    newscript->GetAI = &GetAI_npc_SoulguardReaperAI;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->Name="npc_SoulguardBonecaster";
-++    newscript->GetAI = &GetAI_npc_SoulguardBonecasterAI;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->Name="npc_SoulguardAnimator";
-++    newscript->GetAI = &GetAI_npc_SoulguardAnimatorAI;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->Name="npc_SoulguardAdept";
-++    newscript->GetAI = &GetAI_npc_SoulguardAdeptAI;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->Name="npc_SoulHorror";
-++    newscript->GetAI = &GetAI_npc_SoulHorrorAI;
-++    newscript->RegisterSelf();
-++
-++    newscript = new Script;
-++    newscript->GetAI = &GetAI_npc_sylvanas_jaina_fos_start;
-++    newscript->Name = "npc_slyvanas_jaina_fos_start";
-++    newscript->pGossipHello = &GossipHello_npc_slyvanas_jaina_fos;
-++    newscript->pGossipSelect = &GossipSelect_npc_slyvanas_jaina_fos;
-++    newscript->RegisterSelf();
-++}
-+\ No newline at end of file
-+diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h
-+new file mode 100644
-+index 0000000..37b7a7a
-+--- /dev/null
-++++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h
-+@@ -0,0 +1,37 @@
-++/* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
-++ * This program is free software licensed under GPL version 2
-++ * Please see the included DOCS/LICENSE.TXT for more information */
-++
-++#ifndef DEF_ICECROWN_H
-++#define DEF_ICECROWN_H
-++
-++enum
-++{
-++    NPC_SLYVANAS_PART1             = 37596,
-++    NPC_SLYVANAS_PART2             = 38161,
-++    NPC_JAINA_PART1                = 37597,
-++    NPC_JAINA_PART2                = 38160,
-++    NPC_KALIRA                     = 37583,
-++    NPC_LORALEN                    = 37779,
-++    NPC_ELANDRA                    = 37774,
-++    NPC_KORELN                     = 37582,
-++    NPC_CHAMPION_1_HORDE           = 37584,
-++    NPC_CHAMPION_2_HORDE           = 37587,
-++    NPC_CHAMPION_3_HORDE           = 37588,
-++    NPC_CHAMPION_1_ALLIANCE        = 37496,
-++    NPC_CHAMPION_2_ALLIANCE        = 37497,
-++    NPC_CHAMPION_3_ALLIANCE        = 37498,
-++
-++    NPC_BRONJAHM                    = 36497,
-++    NPC_DEVOURER_OF_SOULS           = 36502,
-++
-++    NPC_JAINA_START                 = 37597,
-++    NPC_JAINA_END                   = 38160,
-++    NPC_SYLVANAS_START              = 37596,
-++    NPC_SYLVANAS_END                = 38161,
-++
-++    TYPE_BRONJAHN                 = 1,
-++    TYPE_DEVOURER_OF_SOULS        = 2,
-++};
-++
-++#endif
-+diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp
-+new file mode 100644
-+index 0000000..dce7966
-+--- /dev/null
-++++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp
-+@@ -0,0 +1,195 @@
-++/* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
-++ * This program is free software; you can redistribute it and/or modify
-++ * it under the terms of the GNU General Public License as published by
-++ * the Free Software Foundation; either version 2 of the License, or
-++ * (at your option) any later version.
-++ *
-++ * This program is distributed in the hope that it will be useful,
-++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
-++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-++ * GNU General Public License for more details.
-++ *
-++ * You should have received a copy of the GNU General Public License
-++ * along with this program; if not, write to the Free Software
-++ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-++ */
-++
-++/* ScriptData
-++SDName: instance_forge_of_souls
-++SD%Complete: 100%
-++SDComment:
-++SDCategory: The Forge of Souls
-++EndScriptData */
-++
-++#include "precompiled.h"
-++#include "forge_of_souls.h"
-++
-++#define MAX_ENCOUNTER     2
-++
-++struct MANGOS_DLL_DECL instance_forge_of_souls : public ScriptedInstance
-++{
-++    instance_forge_of_souls(Map* pMap) : ScriptedInstance(pMap) {Initialize();};
-++
-++	std::string str_data;
-++    uint64 m_uiBronjahn;
-++	uint64 m_uiDevourer;
-++
-++    uint32 m_auiEncounter[MAX_ENCOUNTER];
-++
-++   void Initialize()
-++   {
-++        memset(&m_auiEncounter, 0, sizeof(m_auiEncounter));
-++
-++        m_uiBronjahn = 0;
-++		m_uiDevourer = 0;
-++    }
-++
-++    bool IsEncounterInProgress() const
-++    {
-++        for (uint8 i = 0; i < MAX_ENCOUNTER; ++i)
-++            if (m_auiEncounter[i] == IN_PROGRESS) return true;
-++
-++        return false;
-++    }
-++
-++    void OnCreatureCreate(Creature* pCreature, bool add)
-++    {
-++        Map::PlayerList const &players = instance->GetPlayers();
-++        uint32 TeamInInstance = 0;
-++
-++        if (!players.isEmpty())
-++        {
-++            if (Player* pPlayer = players.begin()->getSource())
-++                TeamInInstance = pPlayer->GetTeam();
-++        }
-++
-++        switch(pCreature->GetEntry())
-++        {
-++            case NPC_BRONJAHM:    
-++                m_uiBronjahn = pCreature->GetGUID();        
-++                break;
-++			case NPC_DEVOURER_OF_SOULS:    
-++                m_uiDevourer = pCreature->GetGUID();        
-++                break;
-++            case NPC_SLYVANAS_PART1:
-++                if (TeamInInstance == ALLIANCE)
-++                   pCreature->UpdateEntry(NPC_JAINA_PART1, ALLIANCE);
-++				break;
-++            case NPC_KALIRA:
-++                if (TeamInInstance == ALLIANCE)
-++                   pCreature->UpdateEntry(NPC_ELANDRA, ALLIANCE);
-++				break;
-++            case NPC_LORALEN:
-++                if (TeamInInstance == ALLIANCE)
-++                    pCreature->UpdateEntry(NPC_KORELN, ALLIANCE);
-++				break;
-++            case NPC_CHAMPION_1_HORDE:
-++                if (TeamInInstance == ALLIANCE)
-++                   pCreature->UpdateEntry(NPC_CHAMPION_1_ALLIANCE, ALLIANCE);
-++				break;
-++            case NPC_CHAMPION_2_HORDE:
-++                if (TeamInInstance == ALLIANCE)
-++                   pCreature->UpdateEntry(NPC_CHAMPION_2_ALLIANCE, ALLIANCE);
-++				break;
-++            case NPC_CHAMPION_3_HORDE: // No 3rd set for Alliance?
-++                if (TeamInInstance == ALLIANCE) 
-++                   pCreature->UpdateEntry(NPC_CHAMPION_3_ALLIANCE, ALLIANCE);
-++				break;
-++        }
-++    }
-++
-++    uint64 GetData64(uint32 identifier)
-++    {
-++        switch(identifier)
-++        {
-++            case TYPE_BRONJAHN:			    return m_uiBronjahn;
-++			case TYPE_DEVOURER_OF_SOULS:    return m_uiDevourer;
-++        }
-++
-++        return 0;
-++    }
-++
-++    void SetData(uint32 type, uint32 data)
-++    {
-++        switch(type)
-++        {
-++        case TYPE_BRONJAHN:
-++            m_auiEncounter[0] = data; break;
-++        case TYPE_DEVOURER_OF_SOULS:
-++            m_auiEncounter[1] = data; break;
-++        }
-++
-++        if (data == DONE)
-++        {
-++            SaveToDB();
-++        }
-++    }
-++
-++    uint32 GetData(uint32 type)
-++    {
-++        switch(type)
-++        {
-++            case TYPE_BRONJAHN:			    return m_auiEncounter[0];
-++			case TYPE_DEVOURER_OF_SOULS:    return m_auiEncounter[1];
-++        }
-++
-++        return 0;
-++    }
-++
-++    std::string GetSaveData()
-++    {
-++        OUT_SAVE_INST_DATA;
-++
-++        std::ostringstream saveStream;
-++        saveStream << "F S " << m_auiEncounter[0] << " " << m_auiEncounter[1];
-++
-++        str_data = saveStream.str();
-++
-++        OUT_SAVE_INST_DATA_COMPLETE;
-++        return str_data;
-++    }
-++
-++    void Load(const char* in)
-++    {
-++        if (!in)
-++        {
-++            OUT_LOAD_INST_DATA_FAIL;
-++            return;
-++        }
-++
-++        OUT_LOAD_INST_DATA(in);
-++
-++        char dataHead1, dataHead2;
-++        uint16 data0, data1, data2, data3;
-++
-++        std::istringstream loadStream(in);
-++        loadStream >> dataHead1 >> dataHead2 >> data0 >> data1 >> data2 >> data3;
-++
-++        if (dataHead1 == 'F' && dataHead2 == 'S')
-++        {
-++            m_auiEncounter[0] = data0;
-++            m_auiEncounter[1] = data1;
-++
-++            for (uint8 i = 0; i < MAX_ENCOUNTER; ++i)
-++                if (m_auiEncounter[i] == IN_PROGRESS)
-++                    m_auiEncounter[i] = NOT_STARTED;
-++
-++        } else OUT_LOAD_INST_DATA_FAIL;
-++
-++        OUT_LOAD_INST_DATA_COMPLETE;
-++    }
-++};
-++
-++InstanceData* GetInstanceData_instance_forge_of_souls(Map* pMap)
-++{
-++   return new instance_forge_of_souls(pMap);
-++}
-++
-++void AddSC_instance_forge_of_souls()
-++{
-++   Script *newscript;
-++   newscript = new Script;
-++   newscript->Name = "instance_forge_of_souls";
-++   newscript->GetInstanceData = &GetInstanceData_instance_forge_of_souls;
-++   newscript->RegisterSelf();
-++}
-+diff --git a/sql/Custom_Updates/Mangos/Northrend/ForgeOfSouls_Mangos.sql b/sql/Custom_Updates/Mangos/Northrend/ForgeOfSouls_Mangos.sql
-+new file mode 100644
-+index 0000000..c503c5a
-+--- /dev/null
-++++ b/sql/Custom_Updates/Mangos/Northrend/ForgeOfSouls_Mangos.sql
-+@@ -0,0 +1,19 @@
-++/* FORGE OF SOULS */
-++-- Trash
-++UPDATE `creature_template` SET `ScriptName`='npc_SpitefulApparition' WHERE `entry`=36551;
-++UPDATE `creature_template` SET `ScriptName`='npc_SpectralWarden' WHERE `entry`=36666;
-++UPDATE `creature_template` SET `ScriptName`='npc_SoulguardWatchman' WHERE `entry`=36478;
-++UPDATE `creature_template` SET `ScriptName`='npc_SoulguardReaper' WHERE `entry`=36499;
-++UPDATE `creature_template` SET `ScriptName`='npc_SoulguardBonecaster' WHERE `entry`=36564;
-++UPDATE `creature_template` SET `ScriptName`='npc_SoulguardAnimator' WHERE `entry`=36516;
-++UPDATE `creature_template` SET `ScriptName`='npc_SoulguardAdept' WHERE `entry`=36620;
-++UPDATE `creature_template` SET `ScriptName`='npc_SoulHorror' WHERE `entry`=36522;
-++-- Boss
-++UPDATE `creature_template` SET `ScriptName`='boss_Bronjahn' WHERE `entry`=36497;
-++UPDATE `creature_template` SET `ScriptName`='mob_corrupted_soul_fragment' WHERE `entry`=36535;
-++UPDATE `creature_template` SET `ScriptName`='boss_Devourer_of_Souls' WHERE `entry`=36502;
-++UPDATE `creature_template` SET `ScriptName`='mob_well_of_souls' WHERE `entry`=36536;
-++-- Npc
-++UPDATE `creature_template` SET `ScriptName`='npc_slyvanas_jaina_fos_start' WHERE `entry` in (37596, 37597);
-++UPDATE `creature_template` SET `ScriptName`='npc_slyvanas_jaina_fos_end' WHERE `entry` in (38160, 38161);
-++update creature set spawnMask = 0 where id in (37584, 37497, 37496, 37588, 38161, 38160);
-+\ No newline at end of file
-+diff --git a/sql/Custom_Updates/ScriptDev2/Northrend/ForgeOfSouls_Script.sql b/sql/Custom_Updates/ScriptDev2/Northrend/ForgeOfSouls_Script.sql
-+new file mode 100644
-+index 0000000..ad6edea
-+--- /dev/null
-++++ b/sql/Custom_Updates/ScriptDev2/Northrend/ForgeOfSouls_Script.sql
-+@@ -0,0 +1,49 @@
-++delete from script_texts where entry between -1610300 and -1610000;
-++/* FORGE OF SOULS */
-++-- Intro:
-++-- Jaina
-++INSERT INTO `script_texts` VALUES ('-1610000', 'Thank the Light for seeing you here safely. We have much more to do if we are to defeat the Lich King and put an end to the scourge!', null, null, null, null, null, null, null, null, 16617, '1', '0', '0', 'jaina_intro1');
-++INSERT INTO `script_texts` VALUES ('-1610001', 'Our allies within the Argent Crusade and The Knights of the Ebon Blade have broken through the front gate of Icecrown and are attempting to establish a foothold within the citadel!', null, null, null, null, null, null, null, null, 16618, '1', '0', '0', 'jaina_intro2');
-++INSERT INTO `script_texts` VALUES ('-1610002', 'Their succes hingers on what we discover within these cursed halls. Althou our mission is broght with peril, we must perseveir!', null, null, null, null, null, null, null, null, 16619, '1', '0', '0', 'Jaina_intro3');
-++INSERT INTO `script_texts` VALUES ('-1610003', 'With the attention of the Lich King drawn toward the front gate, we will be working our way to the side, and search of information that will enable us to defeat the scourge once and for all!', '', '', null, null, null, null, null, null, 16620, '1', '0', '0', 'jaina_intro4');
-++INSERT INTO `script_texts` VALUES ('-1610004', 'King Varian\'s SI:7 agents have gathered information about a private sanctum of the Lich King\'s deep within a place called "The Halls of Reflection"', null, null, null, null, null, null, null, null, 16621, '1', '0', '0', 'jaina_intro5');
-++INSERT INTO `script_texts` VALUES ('-1610005', 'We will carve a path through this wrecthed place and find a way to enter the Halls of Reflection. I sense powerfull magic hidden away within those halls. Magic that could be the key to destroying the scourge.', '', null, null, null, null, null, null, null, 16622, '1', '0', '0','jaina_intro6');
-++INSERT INTO `script_texts` VALUES ('-1610006', 'Your first mission is to destroy the machines of death within this malevolent engine of souls, and clear a path for our soldiers.', '', null, null, null, null, null, null, null, 16623, '1', '0', '0','jaina_outro7');
-++INSERT INTO `script_texts` VALUES ('-1610007', 'Make haste champions! I will prepare the troops to fall in behind you.', '', null, null, null, null, null, null, null, 16624, '1', '0', '0','jaina_intro8');
-++INSERT INTO `script_texts` VALUES ('-1610008', 'Excelent work champions! We shall set up our base camp within these chambers. My magi will make the scourge transport device working shortly. Step inside it when you are ready for your next mission. I will meet you on the other side.', '', null, null, null, null, null, null, null, 16625, '1', '0', '0','jaina_outro');
-++-- Sylvanas
-++INSERT INTO `script_texts` VALUES ('-1610009', 'The Argent Crusade and The Knights of the Ebon Blade have assalted the gates of the Icecrown Citadel, and are preparing for a massive attack upon the scourge. Our mission is a bit more suddle, but equaly as important.', null, null, null, null, null, null, null, null, 17038, '1', '0', '0', 'sylvanas_intro1');
-++INSERT INTO `script_texts` VALUES ('-1610010', 'With the attention of the Lich King turn towards the front gate, we will be working our way to the side, in search of information that will enable us to defeat him. Once and for all!', null, null, null, null, null, null, null, null, 17039, '1', '0', '0', 'sylvanas_intro2');
-++INSERT INTO `script_texts` VALUES ('-1610011', 'Our scouts have reported that the Lick KIng has a private chamber outside the Frozen Throne, deep within a place called "The Halls of Reflection". That is our target champions!', null, null, null, null, null, null, null, null, 17040, '1', '0', '0', 'sylvanas_intro3');
-++INSERT INTO `script_texts` VALUES ('-1610012', 'We will cut a swat of destruction through this cursed place, and find a way to enter the Halls of Reflection. If there is anything of value to be find here, it will be found in the halls.', '', '', null, null, null, null, null, null, 17041, '1', '0', '0', 'sylvanas_intro4');
-++INSERT INTO `script_texts` VALUES ('-1610013', 'Your first mission is to destroy the machines of death within this wretched engine of souls, and clear a path for our soldiers!', null, null, null, null, null, null, null, null, 17042, '1', '0', '0', 'sylvanas_intro5');
-++INSERT INTO `script_texts` VALUES ('-1610014', 'The Dark Lady watches over you! Make haste!', '', null, null, null, null, null, null, null, 17043, '1', '0', '0','sylvanas_intro6');
-++INSERT INTO `script_texts` VALUES ('-1610015', 'Excelent work champions! We shall set up our base camp within these chambers. My magi will make the scourge transport device working shortly. Step inside it when you are ready for your next mission. I will meet you on the other side.', '', null, null, null, null, null, null, null, 17044, '1', '0', '0','sylvanas_outro');
-++-- Bronjahm
-++INSERT INTO `script_texts` VALUES ('-1610016', 'More souls to power the engine!', null, null, null, null, null, null, null, null, 16595, '1', '0', '0', 'Bronjahn - Aggro1');
-++INSERT INTO `script_texts` VALUES ('-1610017', 'Finally...a captive audience!', null, null, null, null, null, null, null, null, 16595, '1', '0', '0', 'Bronjahn - Aggro2');
-++INSERT INTO `script_texts` VALUES ('-1610018', 'The vortex of the harvested calls to you!', null, null, null, null, null, null, null, null, 16599, '1', '0', '0', 'Bronjahn - Soulstorm');
-++INSERT INTO `script_texts` VALUES ('-1610019', 'Another soul to strengthen the host!', '', '', null, null, null, null, null, null, 16596, '1', '0', '0', 'slay1');
-++INSERT INTO `script_texts` VALUES ('-1610020', 'Fodder for the engine!', null, null, null, null, null, null, null, null, 16597, '1', '0', '0', 'Bronjahn - Slay2');
-++INSERT INTO `script_texts` VALUES ('-1610021', 'I will sever the soul from your body!', '', null, null, null, null, null, null, null, 16600, '1', '0', '0','corrupt soul');
-++INSERT INTO `script_texts` VALUES ('-1610022', 'My soul for you, master.', '', null, null, null, null, null, null, null, 16598, '1', '0', '0','death');
-++-- Devourer of Souls
-++INSERT INTO `script_texts` VALUES ('-1610023', 'Devourer of Souls begins to cast Mirrored Soul!', null, null, null, null, null, null, null, null, '0', '3', '0', '0', 'Mirrored Soul');
-++INSERT INTO `script_texts` VALUES ('-1610024', 'Devourer of Souls begins to cast Wailing Souls!', null, null, null, null, null, null, null, null, '0', '3', '0', '0', 'Wailing Souls');
-++INSERT INTO `script_texts` VALUES ('-1610025', 'Devourer of Souls begins to Unleash Souls!', '', '', '', '', '', '', '', '', '0', '3', '0', '0', 'Unleash Souls');
-++INSERT INTO `script_texts` VALUES ('-1610026', 'You dare look upon the host of souls?! I SHALL DEVOUR YOU WHOLE!', null, null, null, null, null, null, null, null, 16890, '1', '0', '0', 'famale_aggro');
-++INSERT INTO `script_texts` VALUES ('-1610027', 'Stare into the abyss, and see your end!', null, null, null, null, null, null, null, null, 16895, '1', '0', '0', 'female_Wailing Souls');
-++INSERT INTO `script_texts` VALUES ('-1610028', 'SUFFERING! ANGUISH! CHAOS! RISE AND FEED!', '', '', '', '', '', '', '', '', 16894, '1', '0', '0', 'female_Unleash Souls');
-++INSERT INTO `script_texts` VALUES ('-1610029', 'Damnation!', null, null, null, null, null, null, null, null, 16891, '1', '0', '0', 'female_slay1');
-++INSERT INTO `script_texts` VALUES ('-1610030', 'Doomed for eternity!', null, null, null, null, null, null, null, null, 16892, '1', '0', '0', 'female_slay2');
-++INSERT INTO `script_texts` VALUES ('-1610031', 'The swell of souls will not be abated! You only delay the inevitable!', null, null, null, null, null, null, null, null, 16893, '1', '0', '0', 'female_death');
-++INSERT INTO `script_texts` VALUES ('-1610032', 'You dare look upon the host of souls?! I SHALL DEVOUR YOU WHOLE!', null, null, null, null, null, null, null, null, 16884, '1', '0', '0', 'male1_aggro');
-++INSERT INTO `script_texts` VALUES ('-1610033', 'Stare into the abyss, and see your end!', null, null, null, null, null, null, null, null, 16889, '1', '0', '0', 'male1_Wailing Souls');
-++INSERT INTO `script_texts` VALUES ('-1610034', 'SUFFERING! ANGUISH! CHAOS! RISE AND FEED!', '', '', '', '', '', '', '', '', 16888, '1', '0', '0', 'male1_Unleash Souls');
-++INSERT INTO `script_texts` VALUES ('-1610035', 'Damnation!', null, null, null, null, null, null, null, null, 16885, '1', '0', '0', 'male1_slay1');
-++INSERT INTO `script_texts` VALUES ('-1610036', 'Doomed for eternity!', null, null, null, null, null, null, null, null, 16886, '1', '0', '0', 'male1_slay2');
-++INSERT INTO `script_texts` VALUES ('-1610037', 'The swell of souls will not be abated! You only delay the inevitable!', null, null, null, null, null, null, null, null, 16887, '1', '0', '0', 'male1_death');
-++INSERT INTO `script_texts` VALUES ('-1610038', 'SUFFERING! ANGUISH! CHAOS! RISE AND FEED!', '', '', '', '', '', '', '', '', 16899, '1', '0', '0', 'male2_Unleash Souls');
-++INSERT INTO `script_texts` VALUES ('-1610039', 'Damnation!', null, null, null, null, null, null, null, null, 16896, '1', '0', '0', 'male2_slay1');
-++INSERT INTO `script_texts` VALUES ('-1610040', 'Doomed for eternity!', null, null, null, null, null, null, null, null, 16897, '1', '0', '0', 'male2_slay2');
-++INSERT INTO `script_texts` VALUES ('-1610041', 'The swell of souls will not be abated! You only delay the inevitable!', null, null, null, null, null, null, null, null, 16898, '1', '0', '0', 'male2_death');
-+diff --git a/system/ScriptLoader.cpp b/system/ScriptLoader.cpp
-+index 53e496d..72e694d 100644
-+--- a/system/ScriptLoader.cpp
-++++ b/system/ScriptLoader.cpp
-+@@ -275,6 +275,10 @@ extern void AddSC_boss_galdarah();
-+ extern void AddSC_boss_moorabi();
-+ extern void AddSC_boss_sladran();
-+ extern void AddSC_instance_gundrak();
-++extern void AddSC_boss_Bronjahn();                          //icecrown citadel - frozen halls - forge of souls
-++extern void AddSC_boss_Devourer_Of_Souls();
-++extern void AddSC_Forge_Of_Souls();                         
-++extern void AddSC_instance_forge_of_souls();
-+ extern void AddSC_boss_anubrekhan();                        //naxxramas
-+ extern void AddSC_boss_four_horsemen();
-+ extern void AddSC_boss_faerlina();
-diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp
-index 17a047b..0846d7e 100644
---- a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp
-+++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp
-@@ -1,24 +1,266 @@
- /* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
-- * This program is free software; you can redistribute it and/or modify
-- * it under the terms of the GNU General Public License as published by
-- * the Free Software Foundation; either version 2 of the License, or
-- * (at your option) any later version.
-- *
-- * This program is distributed in the hope that it will be useful,
-- * but WITHOUT ANY WARRANTY; without even the implied warranty of
-- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- * GNU General Public License for more details.
-- *
-- * You should have received a copy of the GNU General Public License
-- * along with this program; if not, write to the Free Software
-- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-- */
-+* This program is free software; you can redistribute it and/or modify
-+* it under the terms of the GNU General Public License as published by
-+* the Free Software Foundation; either version 2 of the License, or
-+* (at your option) any later version.
-+*
-+* This program is distributed in the hope that it will be useful,
-+* but WITHOUT ANY WARRANTY; without even the implied warranty of
-+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-+* GNU General Public License for more details.
-+*
-+* You should have received a copy of the GNU General Public License
-+* along with this program; if not, write to the Free Software
-+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-+*/
- 
- /* ScriptData
- SDName: boss_bronjahm
--SD%Complete: 0%
--SDComment:
-+SD%Complete: 70%
-+SDComment: Soulstorm, Corrupt soul
- SDCategory: The Forge of Souls
- EndScriptData */
- 
- #include "precompiled.h"
-+#include "forge_of_souls.h"
-+
-+enum Spells
-+{
-+    SPELL_CORRUPT_SOUL          = 68839,
-+    SPELL_MAGICSBANE            = 68793,
-+    SPELL_MAGICSBANE_H          = 69050,
-+    SPELL_SHADOW_BOLT           = 70043,
-+    SPELL_SHADOW_BOLT_H         = 70043,
-+    SPELL_FEAR                  = 30584,//68950,
-+    SPELL_SOULSTORM             = 68872,
-+    SPELL_TELEPORT              = 68988,
-+    SPELL_SOULSTORM_EFFECT      = 68925,
-+    SPELL_SOULSTORM_DMG         = 68921,
-+
-+    NPC_CORRUPT_SOUL_FRAGMENT   = 36535,
-+    EQUIP_ID                    = 35514,
-+};
-+
-+enum Yells
-+{
-+    SAY_AGGRO                               = -1610017,
-+    SAY_SOULSTORM                           = -1610018,
-+    SAY_SLAY1                               = -1610019,
-+    SAY_SLAY2                               = -1610020,
-+    SAY_CORRUPT_SOUL                        = -1610021,
-+    SAY_DEATH                               = -1610022,
-+};
-+
-+#define HOME_X                      5297.33f
-+#define HOME_Y                      2506.64f
-+
-+struct MANGOS_DLL_DECL boss_BronjahnAI : public ScriptedAI
-+{
-+    boss_BronjahnAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        SetEquipmentSlots(false, EQUIP_ID, -1, -1);
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiCorruptSoulTimer;
-+    uint32 m_uiMagicsBaneTimer;
-+    uint32 m_uiShadowBoltTimer;
-+    uint32 m_uiFearTimer;
-+    uint32 m_uiSoulStormTimer;
-+
-+    bool m_bIsSoulStorm;
-+    bool m_bHasTeleported;
-+
-+    void Reset()
-+    {        
-+        m_uiCorruptSoulTimer    = urand(15000, 25000);
-+        m_uiMagicsBaneTimer     = urand(8000, 15000);
-+        m_uiShadowBoltTimer     = 2000;
-+        m_uiFearTimer           = 1000;
-+
-+        m_bIsSoulStorm          = false;
-+        m_bHasTeleported        = false;
-+
-+        if (m_pInstance)
-+            m_pInstance->SetData(TYPE_BRONJAHN, NOT_STARTED);
-+    }
-+
-+    void Aggro(Unit* pWho)
-+    {
-+        if (m_pInstance)
-+            m_pInstance->SetData(TYPE_BRONJAHN, IN_PROGRESS);
-+
-+        DoScriptText(SAY_AGGRO, m_creature);
-+    }
-+
-+    void KilledUnit(Unit *pVictim)
-+    {
-+        if(irand(0,1))
-+            DoScriptText(SAY_SLAY1, m_creature);
-+        else
-+            DoScriptText(SAY_SLAY2, m_creature);
-+    }
-+
-+    void JustDied(Unit* pKiller)  
-+    {
-+        DoScriptText(SAY_DEATH, m_creature);
-+
-+        if (m_pInstance)
-+            m_pInstance->SetData(TYPE_BRONJAHN, DONE);
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        //Return since we have no target
-+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-+            return;
-+
-+        if (m_uiCorruptSoulTimer < uiDiff && !m_bIsSoulStorm)
-+        {
-+            DoScriptText(SAY_CORRUPT_SOUL, m_creature);
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+            {
-+                DoCast(pTarget, SPELL_CORRUPT_SOUL);
-+                /*if(Creature *pTemp = m_creature->SummonCreature(NPC_CORRUPT_SOUL_FRAGMENT, pTarget->GetPositionX(), pTarget->GetPositionY(), pTarget->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 30000))
-+                {
-+                    pTemp->SetSplineFlags(SPLINEFLAG_WALKMODE);
-+                    pTemp->GetMotionMaster()->MovePoint(0, m_creature->GetPositionX(), m_creature->GetPositionY(), m_creature->GetPositionZ());
-+                }*/
-+            }
-+            m_uiCorruptSoulTimer = urand(15000, 25000);
-+        }
-+        else
-+            m_uiCorruptSoulTimer -= uiDiff;
-+
-+        if (m_uiMagicsBaneTimer < uiDiff)
-+        {
-+            DoCast(m_creature->getVictim(), m_bIsRegularMode ? SPELL_MAGICSBANE : SPELL_MAGICSBANE_H);
-+            m_uiMagicsBaneTimer = urand(8000, 15000);
-+        }
-+        else
-+            m_uiMagicsBaneTimer -= uiDiff;
-+
-+        if (m_uiShadowBoltTimer < uiDiff)
-+        {
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, m_bIsRegularMode ? SPELL_SHADOW_BOLT : SPELL_SHADOW_BOLT_H);
-+            
-+            if(m_bIsSoulStorm)
-+                m_uiShadowBoltTimer = 3000;
-+            else
-+                m_uiShadowBoltTimer = 5000;
-+        }
-+        else
-+            m_uiShadowBoltTimer -= uiDiff;
-+
-+        if (m_uiFearTimer < uiDiff && m_bIsSoulStorm)
-+        {
-+            m_creature->CastStop();
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(m_creature, SPELL_FEAR);
-+            m_uiFearTimer = urand(8000, 12000);
-+        }
-+        else
-+            m_uiFearTimer -= uiDiff;
-+
-+        if(m_creature->GetHealthPercent() <= 30.0f && !m_bHasTeleported)
-+        {
-+            m_creature->CastStop();
-+            m_uiSoulStormTimer = 2000;
-+            m_bHasTeleported = true;
-+            m_creature->GetMotionMaster()->Clear();
-+            m_creature->GetMotionMaster()->MovePoint(0, 5297.33f, 2506.64f, 686.068f);     
-+        }
-+
-+        if (m_uiSoulStormTimer < uiDiff && !m_bIsSoulStorm)
-+        {
-+            m_creature->CastStop();
-+            m_uiFearTimer = 7000;
-+            //DoCast(m_creature, SPELL_SOULSTORM); // spell broken!!!
-+            DoCast(m_creature, SPELL_SOULSTORM_EFFECT);
-+            DoScriptText(SAY_SOULSTORM, m_creature);
-+            m_creature->GetMotionMaster()->Clear();
-+            m_creature->GetMotionMaster()->MoveIdle();
-+            m_bIsSoulStorm = true;;
-+        }
-+        else
-+            m_uiSoulStormTimer -= uiDiff;
-+
-+        DoMeleeAttackIfReady();
-+
-+        if (m_creature->GetDistance2d(HOME_X, HOME_Y) > 30)
-+            EnterEvadeMode();
-+    }
-+};
-+
-+CreatureAI* GetAI_boss_Bronjahn(Creature* pCreature)
-+{
-+    return new boss_BronjahnAI (pCreature);
-+}
-+
-+struct MANGOS_DLL_DECL mob_corrupted_soul_fragmentAI : public ScriptedAI
-+{
-+    mob_corrupted_soul_fragmentAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+uint32 m_uiRangeCheck_Timer;
-+
-+    void Reset()
-+    {
-+        m_uiRangeCheck_Timer = 1000;
-+    }
-+
-+    void AttackStart(Unit* pWho)
-+    {
-+        return;
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        if (m_uiRangeCheck_Timer < uiDiff)
-+        {
-+            if (m_pInstance)
-+            {
-+                if (Creature* pBronjahm = ((Creature*)Unit::GetUnit((*m_creature), m_pInstance->GetData64(NPC_BRONJAHM))))
-+                {
-+                    float fDistance = m_creature->GetDistance2d(pBronjahm);
-+                    if (fDistance <= 2)
-+                    {
-+                        //((boss_bronjahmAI*)pBronjahm->AI())->SoulFragmentHit();
-+                        m_creature->DealDamage(m_creature, m_creature->GetHealth(), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
-+                    }
-+                }
-+            }
-+            m_uiRangeCheck_Timer = 1000;
-+        }
-+        else m_uiRangeCheck_Timer -= uiDiff;
-+    }
-+};
-+
-+CreatureAI* GetAI_mob_corrupted_soul_fragment(Creature* pCreature)
-+{
-+    return new mob_corrupted_soul_fragmentAI (pCreature);
-+}
-+
-+void AddSC_boss_Bronjahn()
-+{
-+    Script *newscript;
-+    newscript = new Script;
-+    newscript->Name="boss_Bronjahn";
-+    newscript->GetAI = &GetAI_boss_Bronjahn;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->Name="mob_corrupted_soul_fragment";
-+    newscript->GetAI = &GetAI_mob_corrupted_soul_fragment;
-+    newscript->RegisterSelf();
-+}
-diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp
-index 1e43052..a4bf51e 100644
---- a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp
-+++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp
-@@ -1,24 +1,518 @@
- /* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
-- * This program is free software; you can redistribute it and/or modify
-- * it under the terms of the GNU General Public License as published by
-- * the Free Software Foundation; either version 2 of the License, or
-- * (at your option) any later version.
-- *
-- * This program is distributed in the hope that it will be useful,
-- * but WITHOUT ANY WARRANTY; without even the implied warranty of
-- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- * GNU General Public License for more details.
-- *
-- * You should have received a copy of the GNU General Public License
-- * along with this program; if not, write to the Free Software
-- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-- */
-+* This program is free software; you can redistribute it and/or modify
-+* it under the terms of the GNU General Public License as published by
-+* the Free Software Foundation; either version 2 of the License, or
-+* (at your option) any later version.
-+*
-+* This program is distributed in the hope that it will be useful,
-+* but WITHOUT ANY WARRANTY; without even the implied warranty of
-+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-+* GNU General Public License for more details.
-+*
-+* You should have received a copy of the GNU General Public License
-+* along with this program; if not, write to the Free Software
-+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-+*/
- 
- /* ScriptData
- SDName: boss_devourer_of_souls
--SD%Complete: 0%
--SDComment:
-+SD%Complete: 60%
-+SDComment:  Texts, outro, well of souls
- SDCategory: The Forge of Souls
- EndScriptData */
- 
- #include "precompiled.h"
-+#include "forge_of_souls.h"
-+
-+enum
-+{
-+    NPC_HORDE_CHAMPION1         = 37584,
-+    NPC_HORDE_CHAMPION2         = 37588,
-+    NPC_HORDE_CHAMPION3         = 37587,
-+    NPC_HORDE_SLYVANAS          = 38161,
-+    NPC_HORDE_LORALEN           = 37779,
-+    NPC_HORDE_KELIRA            = 37583,
-+
-+    SPELL_PHANTOM_BLAST         = 68982,
-+    SPELL_PHANTOM_BLAST_H       = 70322,
-+    SPELL_MIRRORED_SOUL         = 69051,
-+    SPELL_WELL_OF_SOULS         = 68820,
-+    SPELL_UNLEASHED_SOULS       = 68939,
-+    SPELL_WAILING_SOULS         = 68912,
-+    SPELL_WELL_OF_SOULS_VIS     = 68854,
-+
-+    SPELL_WELL_OF_SOULS_AURA    = 68863,
-+    SPELL_WELL_OF_SOULS_AURA_H  = 70323,
-+
-+    ACHIEVEMENT_THREE_FACED     = 4523,
-+
-+    MOB_WELL_OF_SOULS           = 36536,
-+};
-+//Spells
-+
-+enum Yells
-+{
-+    EMOTE_MIRRORED_SOUL                     = -1610023,
-+    EMOTE_WAILING_SOULS                     = -1610024,
-+    EMOTE_UNLEASHED_SOULS                   = -1610025,
-+    SAY_AGGRO_FEMALE                        = -1610026,
-+    SAY_WAILING_SOULS_FEMALE                = -1610027,
-+    SAY_UNLEASH_SOULS_FEMALE                = -1610028,
-+    SAY_SLAY1_FEMALE                        = -1610029,
-+    SAY_SLAY2_FEMALE                        = -1610030,
-+    SAY_DEATH_FEMALE                        = -1610031,
-+    SAY_AGGRO_MALE                          = -1610032,
-+    SAY_WAILING_SOULS_MALE                  = -1610033,
-+    SAY_UNLEASH_SOULS_MALE                  = -1610034,
-+    SAY_SLAY1_MALE                          = -1610035,
-+    SAY_SLAY2_MALE                          = -1610036,
-+    SAY_DEATH_MALE                          = -1610037,
-+};
-+
-+//Positional defines 
-+struct LocationsXY
-+{
-+    float x, y, z, o;
-+    uint32 id;
-+};
-+static LocationsXY SummonLoc[]=
-+{
-+    {5590.47f, 2427.79f, 705.935f, 0.802851f}, //champ1
-+    {5593.59f, 2428.34f, 705.935f, 0.977384f},
-+    {5600.81f, 2429.31f, 705.935f, 0.890118f},
-+    {5600.80f, 2421.12f, 705.935f, 0.890118f},
-+    {5601.43f, 2426.53f, 705.935f, 0.890118f},
-+    {5601.55f, 2418.36f, 705.935f, 1.151920f},
-+    {5598.00f, 2429.14f, 705.935f, 1.047200f},
-+    {5594.04f, 2424.87f, 705.935f, 1.151920f},
-+    {5597.89f, 2421.54f, 705.935f, 0.610865f},
-+    {5598.57f, 2434.62f, 705.935f, 1.134460f},
-+    {5585.46f, 2417.99f, 705.935f, 1.064650f},// champ2
-+    {5585.46f, 2417.99f, 705.935f, 1.064650f},
-+    {5605.81f, 2428.42f, 705.935f, 0.820305f},
-+    {5591.61f, 2412.66f, 705.935f, 0.925025f},
-+    {5593.90f, 2410.64f, 705.935f, 0.872665f},
-+    {5586.76f, 2416.73f, 705.935f, 0.942478f},
-+    {5592.23f, 2419.14f, 705.935f, 0.855211f},// champ3
-+    {5594.61f, 2416.87f, 705.935f, 0.907571f},
-+    {5589.77f, 2421.03f, 705.935f, 0.855211f},
-+    {5606.12f, 2436.60f, 705.935f, 0.890110f},// sylvanas / jaina
-+    {5602.58f, 2435.95f, 705.935f, 0.959931f},// lolaren / elandra
-+    {5606.13f, 2433.16f, 705.935f, 0.785398f},// kalira / koreln
-+};
-+
-+static LocationsXY MoveLoc[]=
-+{
-+    {5650.92f, 2488.89f, 708.696f}, // jaina / sylvanas
-+    {5637.01f, 2482.89f, 708.695f}, // champions
-+};
-+
-+#define HOME_X                      5661.58f
-+#define HOME_Y                      2507.2f
-+
-+/******** JAINA & SYLVANAS *******/
-+
-+enum
-+{
-+    SAY_SYLVANAS                           = -1610015,
-+    SAY_JAINA                              = -1610008,
-+};
-+
-+struct MANGOS_DLL_DECL npc_sylvanas_jaina_fos_endAI: public ScriptedAI
-+{
-+    npc_sylvanas_jaina_fos_endAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+
-+    uint32 m_uiSpeech_Timer;
-+    uint8 m_uiOutro_Phase;
-+    bool m_bIsOutro;
-+    uint32 creatureEntry;
-+
-+    void Reset()
-+    {
-+        m_uiOutro_Phase     = 0;
-+        m_uiSpeech_Timer    = 1000;
-+        m_bIsOutro          = true;
-+        creatureEntry = m_creature->GetEntry();
-+    }
-+
-+    void SummonHordeChampions()
-+    {
-+        for (uint8 i = 0; i < 10; i++)
-+        {
-+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_1_HORDE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+            if (pTemp)
-+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-+        }
-+
-+        for (uint8 i = 10; i < 16; i++)
-+        {
-+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_2_HORDE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+            if (pTemp)
-+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-+        }
-+
-+        for (uint8 i = 16; i < 19; i++)
-+        {
-+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_3_HORDE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+            if (pTemp)
-+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-+        }
-+
-+        Creature *pLoralen = m_creature->SummonCreature(NPC_LORALEN, SummonLoc[20].x, SummonLoc[20].y, SummonLoc[20].z, SummonLoc[20].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+        if (pLoralen)
-+            pLoralen->GetMotionMaster()->MovePoint(0, MoveLoc[0].x - 5, MoveLoc[0].y + 5, MoveLoc[0].z);
-+
-+        Creature *pKalira = m_creature->SummonCreature(NPC_KALIRA, SummonLoc[21].x, SummonLoc[21].y, SummonLoc[21].z, SummonLoc[21].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+        if (pKalira)
-+            pKalira->GetMotionMaster()->MovePoint(0, MoveLoc[0].x + 5, MoveLoc[0].y - 5, MoveLoc[0].z);
-+
-+    }
-+
-+    void SummonAlyChampions()
-+    {
-+        for (uint8 i = 0; i < 10; i++)
-+        {
-+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_1_ALLIANCE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+            if (pTemp)
-+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-+        }
-+
-+        for (uint8 i = 10; i < 16; i++)
-+        {
-+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_2_ALLIANCE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+            if (pTemp)
-+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-+        }
-+
-+        for (uint8 i = 16; i < 19; i++)
-+        {
-+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_3_ALLIANCE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+            if (pTemp)
-+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
-+        }
-+
-+        Creature *pElandra = m_creature->SummonCreature(NPC_ELANDRA, SummonLoc[20].x, SummonLoc[20].y, SummonLoc[20].z, SummonLoc[20].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+        if (pElandra)
-+            pElandra->GetMotionMaster()->MovePoint(0, MoveLoc[0].x - 5, MoveLoc[0].y + 5, MoveLoc[0].z);
-+
-+        Creature *pKoreln = m_creature->SummonCreature(NPC_KORELN, SummonLoc[21].x, SummonLoc[21].y, SummonLoc[21].z, SummonLoc[21].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+        if (pKoreln)
-+            pKoreln->GetMotionMaster()->MovePoint(0, MoveLoc[0].x + 5, MoveLoc[0].y - 5, MoveLoc[0].z);
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        if (m_bIsOutro)
-+        {
-+            if(m_uiSpeech_Timer < uiDiff)
-+            {
-+                switch(m_uiOutro_Phase)
-+                {
-+                case 0:
-+                    switch (creatureEntry)
-+                    {
-+                    case NPC_JAINA_END:
-+                        SummonAlyChampions();
-+                        break;
-+                    case NPC_SYLVANAS_END:
-+                        SummonHordeChampions();
-+                        break;
-+                    }
-+                    ++m_uiOutro_Phase;
-+                    m_uiSpeech_Timer = 30000;
-+                    break;
-+                case 1:
-+                    switch (creatureEntry)
-+                    {
-+                    case NPC_JAINA_END:
-+                        DoScriptText(SAY_JAINA, m_creature);
-+                        break;
-+                    case NPC_SYLVANAS_END:
-+                        DoScriptText(SAY_SYLVANAS, m_creature);
-+                        break;
-+                    }
-+                    ++m_uiOutro_Phase;
-+                    m_uiSpeech_Timer = 5000;
-+                    break;
-+
-+                default:
-+                    m_uiSpeech_Timer = 100000;
-+                }
-+            }else m_uiSpeech_Timer -= uiDiff;
-+        }
-+    }
-+};
-+
-+struct MANGOS_DLL_DECL boss_Devourer_of_SoulsAI : public ScriptedAI
-+{
-+    boss_Devourer_of_SoulsAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiPhantomBlastTimer;
-+    uint32 m_uiMirroredSoulTimer;
-+    uint32 m_uiWellOfSoulsTimer;
-+    uint32 m_uiUnleashedSoulsTimer;
-+    uint32 m_uiWailingSoulsTimer;
-+
-+    bool m_bIsThreeFaced;
-+
-+    bool isHorde;
-+    bool isAly;
-+
-+    void Reset()
-+    {        
-+        m_bIsThreeFaced         = false;
-+
-+        isHorde                 = false;
-+        isAly                   = false;
-+
-+        m_uiPhantomBlastTimer   = 45000;
-+        m_uiMirroredSoulTimer   = 20000;
-+        m_uiWellOfSoulsTimer    = 30000;
-+        m_uiUnleashedSoulsTimer = 25000;
-+        m_uiWailingSoulsTimer   = 28000;
-+
-+        if (m_pInstance)
-+            m_pInstance->SetData(TYPE_DEVOURER_OF_SOULS, NOT_STARTED);
-+    }
-+
-+    void MoveInLineOfSight(Unit* pWho)
-+    {
-+        if(pWho->getFaction() == 1 || pWho->getFaction() == 3 || pWho->getFaction() == 4 || pWho->getFaction() == 115 || pWho->getFaction() == 1629)
-+            isAly = true;
-+
-+        if(pWho->getFaction() == 2 || pWho->getFaction() == 5 || pWho->getFaction() == 6 || pWho->getFaction() == 116 || pWho->getFaction() == 1610)
-+            isHorde = true;
-+    }
-+
-+    void Aggro(Unit* pWho)
-+    {
-+        if (m_pInstance)
-+            m_pInstance->SetData(TYPE_DEVOURER_OF_SOULS, IN_PROGRESS);
-+
-+        if(irand(0,1))
-+            DoScriptText(SAY_AGGRO_FEMALE, m_creature);
-+        else
-+            DoScriptText(SAY_AGGRO_MALE, m_creature);
-+    }
-+
-+    void KilledUnit(Unit *pVictim)
-+    {
-+        switch (urand(0, 3))
-+        {
-+        case 0:
-+            DoScriptText(SAY_SLAY1_FEMALE, m_creature);
-+            break;
-+        case 1:
-+            DoScriptText(SAY_SLAY2_FEMALE, m_creature);
-+            break;
-+        case 2:
-+            DoScriptText(SAY_SLAY1_MALE, m_creature);
-+            break;
-+        case 3:
-+            DoScriptText(SAY_SLAY2_MALE, m_creature);
-+            break;
-+        }
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        //Return since we have no target
-+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-+            return;
-+
-+        if (m_uiPhantomBlastTimer < uiDiff)
-+        {
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, m_bIsRegularMode ? SPELL_PHANTOM_BLAST : SPELL_PHANTOM_BLAST_H);
-+            m_uiPhantomBlastTimer = 45000;
-+        }
-+        else
-+            m_uiPhantomBlastTimer -= uiDiff;
-+
-+        if (m_uiMirroredSoulTimer < uiDiff)
-+        {
-+            DoScriptText(EMOTE_MIRRORED_SOUL, m_creature);
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, SPELL_MIRRORED_SOUL);
-+            m_uiMirroredSoulTimer = 20000;
-+        }
-+        else
-+            m_uiMirroredSoulTimer -= uiDiff;
-+
-+        if (m_uiWellOfSoulsTimer < uiDiff)
-+        {
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, SPELL_WELL_OF_SOULS);
-+            m_uiWellOfSoulsTimer = 20000;
-+        }
-+        else
-+            m_uiWellOfSoulsTimer -= uiDiff;
-+
-+        if (m_uiUnleashedSoulsTimer < uiDiff)
-+        {
-+            switch (urand(0, 1))
-+            {
-+            case 0:
-+                DoScriptText(SAY_UNLEASH_SOULS_FEMALE, m_creature);
-+                break;
-+            case 1:
-+                DoScriptText(SAY_UNLEASH_SOULS_MALE, m_creature);
-+                break;
-+            }
-+
-+            DoScriptText(EMOTE_UNLEASHED_SOULS, m_creature);
-+            m_creature->CastStop();
-+            DoCast(m_creature, SPELL_UNLEASHED_SOULS);
-+
-+            m_uiUnleashedSoulsTimer = 30000;
-+        }
-+        else
-+            m_uiUnleashedSoulsTimer -= uiDiff;
-+
-+        if (m_uiWailingSoulsTimer < uiDiff)
-+        {
-+            if(irand(0,1))
-+                DoScriptText(SAY_WAILING_SOULS_FEMALE, m_creature);
-+            else
-+                DoScriptText(SAY_WAILING_SOULS_MALE, m_creature);
-+            DoScriptText(EMOTE_WAILING_SOULS, m_creature);
-+
-+            DoCast(m_creature->getVictim(), SPELL_WAILING_SOULS);
-+
-+            m_uiWailingSoulsTimer = 15000;
-+        }
-+        else
-+            m_uiWailingSoulsTimer -= uiDiff;
-+
-+        DoMeleeAttackIfReady();
-+
-+        if (m_creature->GetDistance2d(HOME_X, HOME_Y) > 50)
-+            EnterEvadeMode();
-+    }
-+
-+    void JustDied(Unit* pKiller)
-+    {
-+        if (m_pInstance)
-+            m_pInstance->SetData(TYPE_DEVOURER_OF_SOULS, DONE);
-+
-+        switch (urand(0, 1))
-+        {
-+        case 0:
-+            DoScriptText(SAY_DEATH_FEMALE, m_creature);
-+            break;
-+        case 1:
-+            DoScriptText(SAY_DEATH_MALE, m_creature);
-+            break;
-+        }
-+
-+        if(isAly)
-+        {
-+            Creature *pJaina = m_creature->SummonCreature(NPC_JAINA_END, SummonLoc[19].x, SummonLoc[19].y, SummonLoc[19].z, SummonLoc[19].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+            if (pJaina)
-+                pJaina->GetMotionMaster()->MovePoint(0, MoveLoc[0].x, MoveLoc[0].y, MoveLoc[0].z);
-+        }
-+
-+        if(isHorde)
-+        {
-+            Creature *pSylvanas = m_creature->SummonCreature(NPC_SYLVANAS_END, SummonLoc[19].x, SummonLoc[19].y, SummonLoc[19].z, SummonLoc[19].o, TEMPSUMMON_DEAD_DESPAWN, 0);
-+            if (pSylvanas)
-+                pSylvanas->GetMotionMaster()->MovePoint(0, MoveLoc[0].x, MoveLoc[0].y, MoveLoc[0].z);
-+        }
-+    }
-+};
-+
-+CreatureAI* GetAI_boss_Devourer_of_Souls(Creature* pCreature)
-+{
-+    return new boss_Devourer_of_SoulsAI (pCreature);
-+}
-+
-+struct MANGOS_DLL_DECL mob_well_of_soulsAI : public ScriptedAI
-+{
-+    mob_well_of_soulsAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
-+        pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
-+        SetCombatMovement(false);
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiSpellTimer;
-+
-+    void Reset()
-+    { 
-+        m_uiSpellTimer = 1000;
-+        DoCast(m_creature, m_bIsRegularMode ? SPELL_WELL_OF_SOULS_AURA : SPELL_WELL_OF_SOULS_AURA_H);
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        /*if (m_uiSpellTimer < uiDiff)
-+        {
-+            Map *map = m_creature->GetMap();
-+            if (map->IsDungeon())
-+            {
-+                Map::PlayerList const &PlayerList = map->GetPlayers();
-+
-+                if (PlayerList.isEmpty())
-+                    return;
-+
-+                for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
-+                {
-+                    if (i->getSource()->isAlive() && m_creature->GetDistance2d(i->getSource()->GetPositionX(), i->getSource()->GetPositionY()) < 4)
-+                        m_creature->DealDamage(i->getSource(), m_bIsRegularMode ? urand(2925, 3075) : urand(3900, 4100), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
-+                }
-+            } 
-+            m_uiSpellTimer = 1000;
-+        }
-+        else
-+            m_uiSpellTimer -= uiDiff;*/
-+    }
-+};
-+
-+CreatureAI* GetAI_mob_well_of_souls(Creature* pCreature)
-+{
-+    return new mob_well_of_soulsAI (pCreature);
-+}
-+
-+CreatureAI* GetAI_npc_sylvanas_jaina_fos_end(Creature* pCreature)
-+{
-+    return new npc_sylvanas_jaina_fos_endAI (pCreature);
-+}
-+
-+void AddSC_boss_Devourer_Of_Souls()
-+{
-+    Script *newscript;
-+    newscript = new Script;
-+    newscript->Name="boss_Devourer_of_Souls";
-+    newscript->GetAI = &GetAI_boss_Devourer_of_Souls;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->Name="mob_well_of_souls";
-+    newscript->GetAI = &GetAI_mob_well_of_souls;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->GetAI = &GetAI_npc_sylvanas_jaina_fos_end;
-+    newscript->Name = "npc_slyvanas_jaina_fos_end";
-+    newscript->RegisterSelf();
-+}
-diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp
-new file mode 100644
-index 0000000..b209a0b
---- /dev/null
-+++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp
-@@ -0,0 +1,777 @@
-+/* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
-+* This program is free software; you can redistribute it and/or modify
-+* it under the terms of the GNU General Public License as published by
-+* the Free Software Foundation; either version 2 of the License, or
-+* (at your option) any later version.
-+*
-+* This program is distributed in the hope that it will be useful,
-+* but WITHOUT ANY WARRANTY; without even the implied warranty of
-+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-+* GNU General Public License for more details.
-+*
-+* You should have received a copy of the GNU General Public License
-+* along with this program; if not, write to the Free Software
-+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-+*/
-+
-+/* ScriptData
-+SDName: forge_of_souls
-+SD%Complete: 70%
-+SDComment:  Implement event (Jaina & Sylvanas)
-+SDCategory: The Forge of Souls
-+EndScriptData */
-+
-+#include "precompiled.h"
-+#include "forge_of_souls.h"
-+
-+enum
-+{
-+    /**** SPELLS ****/
-+
-+    //Spiteful Apparition
-+    SPELL_SPITE                 = 68895,
-+    SPELL_SPITE_H               = 70212,
-+
-+    //Spectral Warden
-+    SPELL_VEIL_OF_SHADOWS       = 69633,
-+    SPELL_WAIL_OF_SOULS         = 69148,
-+    SPELL_WAIL_OF_SOULS_H       = 70210,
-+
-+    //Soulguard Watchman
-+    SPELL_SHROUD_OF_RUNES       = 69056,
-+    SPELL_UNHOLY_RAGE           = 69053,
-+
-+    //Soulguard Reaper
-+    SPELL_FROST_NOVA            = 69060,
-+    SPELL_FROST_NOVA_H          = 70209,
-+    SPELL_SHADOW_LANCE          = 69058,
-+
-+    //Soulguard Bonecaster
-+    SPELL_BONE_VOLLEY           = 69080,
-+    SPELL_BONE_VOLLEY_H         = 70206,
-+    SPELL_RAISE_DEAD            = 69562,
-+    SPELL_SHIELD_OF_BONES       = 69069,
-+    SPELL_SHIELD_OF_BONES_H     = 70207,
-+
-+    //Soulguard Animator
-+    // Raise dead 69562
-+    SPELL_SHADOW_BOLT           = 69068,
-+    SPELL_SHADOW_BOLT_H         = 70208, 
-+    SPELL_SOUL_SICKNESS         = 69131,
-+    SPELL_SOUL_SIPHON           = 69128,
-+
-+    //Soulguard Adept
-+    //Raise dead 69562
-+    //Shadow Bolt 69068/70208
-+    SPELL_DRAIN_LIFE            = 69066,
-+    SPELL_DRAIN_LIFE_H          = 70213,
-+    SPELL_SHADOW_MEND           = 69564,
-+    SPELL_SHADOW_MEND_H         = 70205,
-+
-+    //Soul Horror
-+    SPELL_SOUL_STRIKE           = 69088,
-+    SPELL_SOUL_STRIKE_H         = 70211,
-+};
-+
-+struct MANGOS_DLL_DECL npc_SpitefulApparitionAI: public ScriptedAI
-+{
-+    npc_SpitefulApparitionAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiSpiteTimer;
-+
-+    void Reset()
-+    {
-+        m_uiSpiteTimer = 8000;
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        //Return since we have no target
-+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-+            return;
-+
-+        if (m_uiSpiteTimer < uiDiff)
-+        {
-+            DoCast(m_creature->getVictim(), m_bIsRegularMode ? SPELL_SPITE : SPELL_SPITE_H);
-+            m_uiSpiteTimer = 8000;
-+        }
-+        else
-+            m_uiSpiteTimer -= uiDiff;
-+
-+        DoMeleeAttackIfReady();
-+    }
-+};
-+
-+struct MANGOS_DLL_DECL npc_SpectralWardenAI: public ScriptedAI
-+{
-+    npc_SpectralWardenAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiVeilOfShadowsTimer;
-+    uint32 m_uiWailOfSoulsTimer;
-+
-+    void Reset()
-+    {
-+        m_uiVeilOfShadowsTimer  = 5000;
-+        m_uiWailOfSoulsTimer    = 10000;
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        //Return since we have no target
-+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-+            return;
-+
-+        if (m_uiVeilOfShadowsTimer < uiDiff)
-+        {
-+            DoCast(m_creature->getVictim(), SPELL_VEIL_OF_SHADOWS);
-+            m_uiVeilOfShadowsTimer = 10000;
-+        }
-+        else
-+            m_uiVeilOfShadowsTimer -= uiDiff;
-+
-+        if (m_uiWailOfSoulsTimer < uiDiff)
-+        {
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, m_bIsRegularMode ? SPELL_WAIL_OF_SOULS : SPELL_WAIL_OF_SOULS_H);
-+            m_uiWailOfSoulsTimer = 5000;
-+        }
-+        else
-+            m_uiWailOfSoulsTimer -= uiDiff;
-+
-+        DoMeleeAttackIfReady();
-+    }
-+};
-+
-+struct MANGOS_DLL_DECL npc_SoulguardWatchmanAI: public ScriptedAI
-+{
-+    npc_SoulguardWatchmanAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiShroudOfRunesTimer;
-+    uint32 m_uiUnholyRageTimer;
-+
-+    void Reset()
-+    {
-+        m_uiShroudOfRunesTimer  = 1000;
-+        m_uiUnholyRageTimer     = 1000;
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        //Return since we have no target
-+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-+            return;
-+
-+        if (m_uiShroudOfRunesTimer < uiDiff)
-+        {
-+            DoCast(m_creature, SPELL_SHROUD_OF_RUNES);
-+            m_uiShroudOfRunesTimer = 5000;
-+        }
-+        else
-+            m_uiShroudOfRunesTimer -= uiDiff;
-+
-+        if (m_uiUnholyRageTimer < uiDiff)
-+        {
-+            DoCast(m_creature, SPELL_UNHOLY_RAGE);
-+            m_uiUnholyRageTimer = 8000;
-+        }
-+        else
-+            m_uiUnholyRageTimer -= uiDiff;
-+
-+        DoMeleeAttackIfReady();
-+    }
-+};
-+
-+struct MANGOS_DLL_DECL npc_SoulguardReaperAI: public ScriptedAI
-+{
-+    npc_SoulguardReaperAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiFrostNovaTimer;
-+    uint32 m_uiShadowLanceTimer;
-+
-+    void Reset()
-+    {
-+        m_uiFrostNovaTimer      = 8000;
-+        m_uiShadowLanceTimer    = 5000;
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        //Return since we have no target
-+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-+            return;
-+
-+        if (m_uiFrostNovaTimer < uiDiff)
-+        {
-+            DoCast(m_creature, m_bIsRegularMode ? SPELL_FROST_NOVA : SPELL_FROST_NOVA_H);
-+            m_uiFrostNovaTimer = 9600;
-+        }
-+        else
-+            m_uiFrostNovaTimer -= uiDiff;
-+
-+        if (m_uiShadowLanceTimer < uiDiff)
-+        {
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, SPELL_SHADOW_LANCE);
-+            m_uiShadowLanceTimer = 8000;
-+        }
-+        else
-+            m_uiShadowLanceTimer -= uiDiff;
-+
-+        DoMeleeAttackIfReady();
-+    }
-+};
-+
-+struct MANGOS_DLL_DECL npc_SoulguardBonecasterAI: public ScriptedAI
-+{
-+    npc_SoulguardBonecasterAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiBoneVolleyTimer;
-+    uint32 m_uiRaiseDeadTimer;
-+    uint32 m_uiShieldOfBonesTimer;
-+
-+    void Reset()
-+    {
-+        m_uiBoneVolleyTimer     = 6000;
-+        m_uiRaiseDeadTimer      = 25000;
-+        m_uiShieldOfBonesTimer  = 6000;
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        //Return since we have no target
-+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-+            return;
-+
-+        if (m_uiBoneVolleyTimer < uiDiff)
-+        {
-+            DoCast(m_creature, m_bIsRegularMode ? SPELL_BONE_VOLLEY : SPELL_BONE_VOLLEY_H);
-+            m_uiBoneVolleyTimer = 7000;
-+        }
-+        else
-+            m_uiBoneVolleyTimer -= uiDiff;
-+
-+        if (m_uiRaiseDeadTimer < uiDiff)
-+        {
-+            DoCast(m_creature, SPELL_RAISE_DEAD);
-+            m_uiRaiseDeadTimer = 25000;
-+        }
-+        else
-+            m_uiRaiseDeadTimer -= uiDiff;
-+
-+        if (m_uiShieldOfBonesTimer < uiDiff)
-+        {
-+            DoCast(m_creature, m_bIsRegularMode ? SPELL_SHIELD_OF_BONES : SPELL_SHIELD_OF_BONES_H);
-+            m_uiShieldOfBonesTimer = 8000;
-+        }
-+        else
-+            m_uiShieldOfBonesTimer -= uiDiff;
-+
-+        DoMeleeAttackIfReady();
-+    }
-+};
-+
-+struct MANGOS_DLL_DECL npc_SoulguardAnimatorAI: public ScriptedAI
-+{
-+    npc_SoulguardAnimatorAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiRaiseDeadTimer;
-+    uint32 m_uiShadowBoltTimer;
-+    uint32 m_uiSoulSicknessTimer;
-+    uint32 m_uiSoulSiphonTimer;
-+
-+    void Reset()
-+    {
-+        m_uiRaiseDeadTimer      = 25000;
-+        m_uiShadowBoltTimer     = 5000;
-+        m_uiSoulSicknessTimer   = 8000;
-+        m_uiSoulSiphonTimer     = 10000;
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        //Return since we have no target
-+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-+            return;
-+
-+        if (m_uiRaiseDeadTimer < uiDiff)
-+        {
-+            DoCast(m_creature, SPELL_RAISE_DEAD);
-+            m_uiRaiseDeadTimer = 25000;
-+        }
-+        else
-+            m_uiRaiseDeadTimer -= uiDiff;
-+
-+        if (m_uiShadowBoltTimer < uiDiff)
-+        {
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, m_bIsRegularMode ? SPELL_SHADOW_BOLT : SPELL_SHADOW_BOLT_H);
-+            m_uiShadowBoltTimer = 5000;
-+        }
-+        else
-+            m_uiShadowBoltTimer -= uiDiff;
-+
-+        if (m_uiSoulSicknessTimer < uiDiff)
-+        {
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, SPELL_SOUL_SICKNESS);
-+            m_uiSoulSicknessTimer = 10000;
-+        }
-+        else
-+            m_uiSoulSicknessTimer -= uiDiff;
-+
-+        if (m_uiSoulSiphonTimer < uiDiff)
-+        {
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, SPELL_SOUL_SIPHON);
-+            m_uiSoulSiphonTimer = 8000;
-+        }
-+        else
-+            m_uiSoulSiphonTimer -= uiDiff;
-+
-+        DoMeleeAttackIfReady();
-+    }
-+};
-+
-+struct MANGOS_DLL_DECL npc_SoulguardAdeptAI: public ScriptedAI
-+{
-+    npc_SoulguardAdeptAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiRaiseDeadTimer;
-+    uint32 m_uiShadowBoltTimer;
-+    uint32 m_uiDrainLifeTimer;
-+    uint32 m_uiShadowMendTimer;
-+
-+    void Reset()
-+    {
-+        m_uiRaiseDeadTimer      = 25000;
-+        m_uiShadowBoltTimer     = 8000;
-+        m_uiDrainLifeTimer      = 7000;
-+        m_uiShadowMendTimer     = 35000;
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        //Return since we have no target
-+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-+            return;
-+
-+        if (m_uiRaiseDeadTimer < uiDiff)
-+        {
-+            DoCast(m_creature, SPELL_RAISE_DEAD);
-+            m_uiRaiseDeadTimer = 25000;
-+        }
-+        else
-+            m_uiRaiseDeadTimer -= uiDiff;
-+
-+        if (m_uiShadowBoltTimer < uiDiff)
-+        {
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, m_bIsRegularMode ? SPELL_SHADOW_BOLT : SPELL_SHADOW_BOLT_H);
-+            m_uiShadowBoltTimer = 4000;
-+        }
-+        else
-+            m_uiShadowBoltTimer -= uiDiff;
-+
-+        if (m_uiDrainLifeTimer < uiDiff)
-+        {
-+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
-+                DoCast(pTarget, m_bIsRegularMode ? SPELL_DRAIN_LIFE : SPELL_DRAIN_LIFE_H);
-+            m_uiDrainLifeTimer = 9000;
-+        }
-+        else
-+            m_uiDrainLifeTimer -= uiDiff;
-+
-+        if (m_uiShadowMendTimer < uiDiff)
-+        {
-+            DoCast(m_creature, m_bIsRegularMode ? SPELL_SHADOW_MEND : SPELL_SHADOW_MEND_H);
-+            m_uiShadowMendTimer = 20000;
-+        }
-+        else
-+            m_uiShadowMendTimer -= uiDiff;
-+
-+        DoMeleeAttackIfReady();
-+    }
-+};
-+
-+struct MANGOS_DLL_DECL npc_SoulHorrorAI: public ScriptedAI
-+{
-+    npc_SoulHorrorAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+    bool m_bIsRegularMode;
-+
-+    uint32 m_uiSoulStrikeTimer;
-+
-+    void Reset()
-+    {
-+        m_uiSoulStrikeTimer = 6000;
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        //Return since we have no target
-+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
-+            return;
-+
-+        if (m_uiSoulStrikeTimer < uiDiff)
-+        {
-+            DoCast(m_creature->getVictim(), m_bIsRegularMode ? SPELL_SOUL_STRIKE : SPELL_SOUL_STRIKE_H);
-+            m_uiSoulStrikeTimer = 8000;
-+        }
-+        else
-+            m_uiSoulStrikeTimer -= uiDiff;
-+
-+        DoMeleeAttackIfReady();
-+    }
-+};
-+
-+/******** JAINA & SYLVANAS *******/
-+
-+#define GOSSIP_ITEM_SYLVANAS "What would you have of me, Banshee Queen?"
-+#define GOSSIP_ITEM_JAINA "What should we do, Lady Jaina?"
-+
-+enum
-+{
-+    SAY_SPEECH_SYLVANAS1                              = -1610009,
-+    SAY_SPEECH_SYLVANAS2                              = -1610010,
-+    SAY_SPEECH_SYLVANAS3                              = -1610011,
-+    SAY_SPEECH_SYLVANAS4                              = -1610012,
-+    SAY_SPEECH_SYLVANAS5                              = -1610013,
-+    SAY_SPEECH_SYLVANAS6                              = -1610014,
-+
-+    SAY_SPEECH_JAINA1                              = -1610000,
-+    SAY_SPEECH_JAINA2                              = -1610001,
-+    SAY_SPEECH_JAINA3                              = -1610002,
-+    SAY_SPEECH_JAINA4                              = -1610003,
-+    SAY_SPEECH_JAINA5                              = -1610004,
-+    SAY_SPEECH_JAINA6                              = -1610005,
-+    SAY_SPEECH_JAINA7                              = -1610006,
-+    SAY_SPEECH_JAINA8                              = -1610007,
-+};
-+
-+struct MANGOS_DLL_DECL npc_sylvanas_jaina_fos_startAI: public ScriptedAI
-+{
-+    npc_sylvanas_jaina_fos_startAI(Creature *pCreature) : ScriptedAI(pCreature)
-+    {
-+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
-+        pCreature->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
-+        Reset();
-+    }
-+
-+    ScriptedInstance* m_pInstance;
-+
-+    uint32 m_uiSpeech_Timer;
-+    uint8 m_uiIntro_Phase;
-+    bool m_bIsIntro;
-+    uint32 creatureEntry;
-+
-+    void Reset()
-+    {
-+        m_uiIntro_Phase     = 0;
-+        m_uiSpeech_Timer    = 1000;
-+        m_bIsIntro          = false;
-+        creatureEntry = m_creature->GetEntry();
-+    }
-+
-+    void StartIntro()
-+    {
-+        m_bIsIntro = true;
-+    }
-+
-+    void UpdateAI(const uint32 uiDiff)
-+    {
-+        if (m_bIsIntro)
-+        {
-+            if(m_uiSpeech_Timer < uiDiff)
-+            {
-+                switch(m_uiIntro_Phase)
-+                {
-+                case 0:
-+                    switch (creatureEntry)
-+                    {
-+                    case NPC_JAINA_START:
-+                        DoScriptText(SAY_SPEECH_JAINA1, m_creature);
-+                        break;
-+                    case NPC_SYLVANAS_START:
-+                        DoScriptText(SAY_SPEECH_SYLVANAS1, m_creature);
-+                        break;
-+                    }
-+                    ++m_uiIntro_Phase;
-+                    m_uiSpeech_Timer = 12000;
-+                    break;
-+                case 1:
-+                    switch (creatureEntry)
-+                    {
-+                    case NPC_JAINA_START:
-+                        DoScriptText(SAY_SPEECH_JAINA2, m_creature);
-+                        break;
-+                    case NPC_SYLVANAS_START:
-+                        DoScriptText(SAY_SPEECH_SYLVANAS2, m_creature);
-+                        break;
-+                    }
-+                    ++m_uiIntro_Phase;
-+                    m_uiSpeech_Timer = 10000;
-+                    break;
-+                case 2:
-+                    switch (creatureEntry)
-+                    {
-+                    case NPC_JAINA_START:
-+                        DoScriptText(SAY_SPEECH_JAINA3, m_creature);
-+                        break;
-+                    case NPC_SYLVANAS_START:
-+                        DoScriptText(SAY_SPEECH_SYLVANAS3, m_creature);
-+                        break;
-+                    }
-+                    ++m_uiIntro_Phase;
-+                    m_uiSpeech_Timer = 10000;
-+                    break;
-+                case 3:
-+                    switch (creatureEntry)
-+                    {
-+                    case NPC_JAINA_START:
-+                        DoScriptText(SAY_SPEECH_JAINA4, m_creature);
-+                        break;
-+                    case NPC_SYLVANAS_START:
-+                        DoScriptText(SAY_SPEECH_SYLVANAS4, m_creature);
-+                        break;
-+                    }
-+                    ++m_uiIntro_Phase;
-+                    m_uiSpeech_Timer = 10000;
-+                    break;
-+                case 4:
-+                    switch (creatureEntry)
-+                    {
-+                    case NPC_JAINA_START:
-+                        DoScriptText(SAY_SPEECH_JAINA5, m_creature);
-+                        break;
-+                    case NPC_SYLVANAS_START:
-+                        DoScriptText(SAY_SPEECH_SYLVANAS5, m_creature);
-+                        break;
-+                    }
-+                    ++m_uiIntro_Phase;
-+                    m_uiSpeech_Timer = 10000;
-+                    break;
-+                case 5:
-+                    switch (creatureEntry)
-+                    {
-+                    case NPC_JAINA_START:
-+                        DoScriptText(SAY_SPEECH_JAINA6, m_creature);
-+                        break;
-+                    case NPC_SYLVANAS_START:
-+                        DoScriptText(SAY_SPEECH_SYLVANAS6, m_creature);
-+                        m_bIsIntro = false;
-+                        break;
-+                    }
-+                    ++m_uiIntro_Phase;
-+                    m_uiSpeech_Timer = 12000;
-+                    break;
-+                case 6:
-+                    DoScriptText(SAY_SPEECH_JAINA7, m_creature);
-+                    ++m_uiIntro_Phase;
-+                    m_uiSpeech_Timer = 6000;
-+                    break;
-+                case 8:
-+                    DoScriptText(SAY_SPEECH_JAINA8, m_creature);
-+                    ++m_uiIntro_Phase;
-+                    m_bIsIntro = false;
-+                    m_uiSpeech_Timer = 10000;
-+                    break;
-+
-+                default:
-+                    m_uiSpeech_Timer = 100000;
-+                }
-+            }else m_uiSpeech_Timer -= uiDiff;
-+        }
-+    }
-+};
-+
-+bool GossipHello_npc_slyvanas_jaina_fos(Player* pPlayer, Creature* pCreature)
-+{
-+    uint32 creatureEntry;
-+    creatureEntry = pCreature->GetEntry();
-+
-+    if (pCreature->isQuestGiver())
-+        pPlayer->PrepareQuestMenu(pCreature->GetGUID());
-+
-+    switch (creatureEntry)
-+    {
-+    case NPC_JAINA_START:
-+        pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_ITEM_JAINA, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+1);
-+        break;
-+    case NPC_SYLVANAS_START:
-+        pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_ITEM_SYLVANAS, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+1);
-+        break;
-+    }
-+    pPlayer->SEND_GOSSIP_MENU(DEFAULT_GOSSIP_MESSAGE, pCreature->GetGUID());
-+    return true;
-+}
-+
-+bool GossipSelect_npc_slyvanas_jaina_fos(Player* pPlayer, Creature* pCreature, uint32 uiSender, uint32 uiAction)
-+{
-+    switch(uiAction)
-+    {
-+    case GOSSIP_ACTION_INFO_DEF+1:
-+        ((npc_sylvanas_jaina_fos_startAI*)pCreature->AI())->StartIntro();
-+        pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
-+        pPlayer->CLOSE_GOSSIP_MENU();
-+    }
-+
-+    return true;
-+}
-+
-+CreatureAI* GetAI_npc_SpitefulApparitionAI(Creature* pCreature)
-+{
-+    return new npc_SpitefulApparitionAI (pCreature);
-+}
-+
-+CreatureAI* GetAI_npc_SpectralWardenAI(Creature* pCreature)
-+{
-+    return new npc_SpectralWardenAI (pCreature);
-+}
-+
-+CreatureAI* GetAI_npc_SoulguardWatchmanAI(Creature* pCreature)
-+{
-+    return new npc_SoulguardWatchmanAI (pCreature);
-+}
-+
-+CreatureAI* GetAI_npc_SoulguardReaperAI(Creature* pCreature)
-+{
-+    return new npc_SoulguardReaperAI (pCreature);
-+}
-+
-+CreatureAI* GetAI_npc_SoulguardBonecasterAI(Creature* pCreature)
-+{
-+    return new npc_SoulguardBonecasterAI (pCreature);
-+}
-+
-+CreatureAI* GetAI_npc_SoulguardAnimatorAI(Creature* pCreature)
-+{
-+    return new npc_SoulguardAnimatorAI (pCreature);
-+}
-+
-+CreatureAI* GetAI_npc_SoulguardAdeptAI(Creature* pCreature)
-+{
-+    return new npc_SoulguardAdeptAI (pCreature);
-+}
-+
-+CreatureAI* GetAI_npc_SoulHorrorAI(Creature* pCreature)
-+{
-+    return new npc_SoulHorrorAI (pCreature);
-+}
-+
-+CreatureAI* GetAI_npc_sylvanas_jaina_fos_start(Creature* pCreature)
-+{
-+    return new npc_sylvanas_jaina_fos_startAI (pCreature);
-+}
-+
-+void AddSC_Forge_Of_Souls()
-+{
-+    Script *newscript;
-+    newscript = new Script;
-+    newscript->Name="npc_SpitefulApparition";
-+    newscript->GetAI = &GetAI_npc_SpitefulApparitionAI;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->Name="npc_SpectralWarden";
-+    newscript->GetAI = &GetAI_npc_SpectralWardenAI;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->Name="npc_SoulguardWatchman";
-+    newscript->GetAI = &GetAI_npc_SoulguardWatchmanAI;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->Name="npc_SoulguardReaper";
-+    newscript->GetAI = &GetAI_npc_SoulguardReaperAI;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->Name="npc_SoulguardBonecaster";
-+    newscript->GetAI = &GetAI_npc_SoulguardBonecasterAI;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->Name="npc_SoulguardAnimator";
-+    newscript->GetAI = &GetAI_npc_SoulguardAnimatorAI;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->Name="npc_SoulguardAdept";
-+    newscript->GetAI = &GetAI_npc_SoulguardAdeptAI;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->Name="npc_SoulHorror";
-+    newscript->GetAI = &GetAI_npc_SoulHorrorAI;
-+    newscript->RegisterSelf();
-+
-+    newscript = new Script;
-+    newscript->GetAI = &GetAI_npc_sylvanas_jaina_fos_start;
-+    newscript->Name = "npc_slyvanas_jaina_fos_start";
-+    newscript->pGossipHello = &GossipHello_npc_slyvanas_jaina_fos;
-+    newscript->pGossipSelect = &GossipSelect_npc_slyvanas_jaina_fos;
-+    newscript->RegisterSelf();
-+}
-\ No newline at end of file
-diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h
-new file mode 100644
-index 0000000..37b7a7a
---- /dev/null
-+++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h
-@@ -0,0 +1,37 @@
-+/* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
-+ * This program is free software licensed under GPL version 2
-+ * Please see the included DOCS/LICENSE.TXT for more information */
-+
-+#ifndef DEF_ICECROWN_H
-+#define DEF_ICECROWN_H
-+
-+enum
-+{
-+    NPC_SLYVANAS_PART1             = 37596,
-+    NPC_SLYVANAS_PART2             = 38161,
-+    NPC_JAINA_PART1                = 37597,
-+    NPC_JAINA_PART2                = 38160,
-+    NPC_KALIRA                     = 37583,
-+    NPC_LORALEN                    = 37779,
-+    NPC_ELANDRA                    = 37774,
-+    NPC_KORELN                     = 37582,
-+    NPC_CHAMPION_1_HORDE           = 37584,
-+    NPC_CHAMPION_2_HORDE           = 37587,
-+    NPC_CHAMPION_3_HORDE           = 37588,
-+    NPC_CHAMPION_1_ALLIANCE        = 37496,
-+    NPC_CHAMPION_2_ALLIANCE        = 37497,
-+    NPC_CHAMPION_3_ALLIANCE        = 37498,
-+
-+    NPC_BRONJAHM                    = 36497,
-+    NPC_DEVOURER_OF_SOULS           = 36502,
-+
-+    NPC_JAINA_START                 = 37597,
-+    NPC_JAINA_END                   = 38160,
-+    NPC_SYLVANAS_START              = 37596,
-+    NPC_SYLVANAS_END                = 38161,
-+
-+    TYPE_BRONJAHN                 = 1,
-+    TYPE_DEVOURER_OF_SOULS        = 2,
-+};
-+
-+#endif
-diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp
-new file mode 100644
-index 0000000..dce7966
---- /dev/null
-+++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp
-@@ -0,0 +1,195 @@
-+/* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
-+ * This program is free software; you can redistribute it and/or modify
-+ * it under the terms of the GNU General Public License as published by
-+ * the Free Software Foundation; either version 2 of the License, or
-+ * (at your option) any later version.
-+ *
-+ * This program is distributed in the hope that it will be useful,
-+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
-+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-+ * GNU General Public License for more details.
-+ *
-+ * You should have received a copy of the GNU General Public License
-+ * along with this program; if not, write to the Free Software
-+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-+ */
-+
-+/* ScriptData
-+SDName: instance_forge_of_souls
-+SD%Complete: 100%
-+SDComment:
-+SDCategory: The Forge of Souls
-+EndScriptData */
-+
-+#include "precompiled.h"
-+#include "forge_of_souls.h"
-+
-+#define MAX_ENCOUNTER     2
-+
-+struct MANGOS_DLL_DECL instance_forge_of_souls : public ScriptedInstance
-+{
-+    instance_forge_of_souls(Map* pMap) : ScriptedInstance(pMap) {Initialize();};
-+
-+	std::string str_data;
-+    uint64 m_uiBronjahn;
-+	uint64 m_uiDevourer;
-+
-+    uint32 m_auiEncounter[MAX_ENCOUNTER];
-+
-+   void Initialize()
-+   {
-+        memset(&m_auiEncounter, 0, sizeof(m_auiEncounter));
-+
-+        m_uiBronjahn = 0;
-+		m_uiDevourer = 0;
-+    }
-+
-+    bool IsEncounterInProgress() const
-+    {
-+        for (uint8 i = 0; i < MAX_ENCOUNTER; ++i)
-+            if (m_auiEncounter[i] == IN_PROGRESS) return true;
-+
-+        return false;
-+    }
-+
-+    void OnCreatureCreate(Creature* pCreature, bool add)
-+    {
-+        Map::PlayerList const &players = instance->GetPlayers();
-+        uint32 TeamInInstance = 0;
-+
-+        if (!players.isEmpty())
-+        {
-+            if (Player* pPlayer = players.begin()->getSource())
-+                TeamInInstance = pPlayer->GetTeam();
-+        }
-+
-+        switch(pCreature->GetEntry())
-+        {
-+            case NPC_BRONJAHM:    
-+                m_uiBronjahn = pCreature->GetGUID();        
-+                break;
-+			case NPC_DEVOURER_OF_SOULS:    
-+                m_uiDevourer = pCreature->GetGUID();        
-+                break;
-+            case NPC_SLYVANAS_PART1:
-+                if (TeamInInstance == ALLIANCE)
-+                   pCreature->UpdateEntry(NPC_JAINA_PART1, ALLIANCE);
-+				break;
-+            case NPC_KALIRA:
-+                if (TeamInInstance == ALLIANCE)
-+                   pCreature->UpdateEntry(NPC_ELANDRA, ALLIANCE);
-+				break;
-+            case NPC_LORALEN:
-+                if (TeamInInstance == ALLIANCE)
-+                    pCreature->UpdateEntry(NPC_KORELN, ALLIANCE);
-+				break;
-+            case NPC_CHAMPION_1_HORDE:
-+                if (TeamInInstance == ALLIANCE)
-+                   pCreature->UpdateEntry(NPC_CHAMPION_1_ALLIANCE, ALLIANCE);
-+				break;
-+            case NPC_CHAMPION_2_HORDE:
-+                if (TeamInInstance == ALLIANCE)
-+                   pCreature->UpdateEntry(NPC_CHAMPION_2_ALLIANCE, ALLIANCE);
-+				break;
-+            case NPC_CHAMPION_3_HORDE: // No 3rd set for Alliance?
-+                if (TeamInInstance == ALLIANCE) 
-+                   pCreature->UpdateEntry(NPC_CHAMPION_3_ALLIANCE, ALLIANCE);
-+				break;
-+        }
-+    }
-+
-+    uint64 GetData64(uint32 identifier)
-+    {
-+        switch(identifier)
-+        {
-+            case TYPE_BRONJAHN:			    return m_uiBronjahn;
-+			case TYPE_DEVOURER_OF_SOULS:    return m_uiDevourer;
-+        }
-+
-+        return 0;
-+    }
-+
-+    void SetData(uint32 type, uint32 data)
-+    {
-+        switch(type)
-+        {
-+        case TYPE_BRONJAHN:
-+            m_auiEncounter[0] = data; break;
-+        case TYPE_DEVOURER_OF_SOULS:
-+            m_auiEncounter[1] = data; break;
-+        }
-+
-+        if (data == DONE)
-+        {
-+            SaveToDB();
-+        }
-+    }
-+
-+    uint32 GetData(uint32 type)
-+    {
-+        switch(type)
-+        {
-+            case TYPE_BRONJAHN:			    return m_auiEncounter[0];
-+			case TYPE_DEVOURER_OF_SOULS:    return m_auiEncounter[1];
-+        }
-+
-+        return 0;
-+    }
-+
-+    std::string GetSaveData()
-+    {
-+        OUT_SAVE_INST_DATA;
-+
-+        std::ostringstream saveStream;
-+        saveStream << "F S " << m_auiEncounter[0] << " " << m_auiEncounter[1];
-+
-+        str_data = saveStream.str();
-+
-+        OUT_SAVE_INST_DATA_COMPLETE;
-+        return str_data;
-+    }
-+
-+    void Load(const char* in)
-+    {
-+        if (!in)
-+        {
-+            OUT_LOAD_INST_DATA_FAIL;
-+            return;
-+        }
-+
-+        OUT_LOAD_INST_DATA(in);
-+
-+        char dataHead1, dataHead2;
-+        uint16 data0, data1, data2, data3;
-+
-+        std::istringstream loadStream(in);
-+        loadStream >> dataHead1 >> dataHead2 >> data0 >> data1 >> data2 >> data3;
-+
-+        if (dataHead1 == 'F' && dataHead2 == 'S')
-+        {
-+            m_auiEncounter[0] = data0;
-+            m_auiEncounter[1] = data1;
-+
-+            for (uint8 i = 0; i < MAX_ENCOUNTER; ++i)
-+                if (m_auiEncounter[i] == IN_PROGRESS)
-+                    m_auiEncounter[i] = NOT_STARTED;
-+
-+        } else OUT_LOAD_INST_DATA_FAIL;
-+
-+        OUT_LOAD_INST_DATA_COMPLETE;
-+    }
-+};
-+
-+InstanceData* GetInstanceData_instance_forge_of_souls(Map* pMap)
-+{
-+   return new instance_forge_of_souls(pMap);
-+}
-+
-+void AddSC_instance_forge_of_souls()
-+{
-+   Script *newscript;
-+   newscript = new Script;
-+   newscript->Name = "instance_forge_of_souls";
-+   newscript->GetInstanceData = &GetInstanceData_instance_forge_of_souls;
-+   newscript->RegisterSelf();
-+}
-diff --git a/sql/Custom_Updates/Mangos/Northrend/ForgeOfSouls_Mangos.sql b/sql/Custom_Updates/Mangos/Northrend/ForgeOfSouls_Mangos.sql
-new file mode 100644
-index 0000000..c503c5a
---- /dev/null
-+++ b/sql/Custom_Updates/Mangos/Northrend/ForgeOfSouls_Mangos.sql
-@@ -0,0 +1,19 @@
-+/* FORGE OF SOULS */
-+-- Trash
-+UPDATE `creature_template` SET `ScriptName`='npc_SpitefulApparition' WHERE `entry`=36551;
-+UPDATE `creature_template` SET `ScriptName`='npc_SpectralWarden' WHERE `entry`=36666;
-+UPDATE `creature_template` SET `ScriptName`='npc_SoulguardWatchman' WHERE `entry`=36478;
-+UPDATE `creature_template` SET `ScriptName`='npc_SoulguardReaper' WHERE `entry`=36499;
-+UPDATE `creature_template` SET `ScriptName`='npc_SoulguardBonecaster' WHERE `entry`=36564;
-+UPDATE `creature_template` SET `ScriptName`='npc_SoulguardAnimator' WHERE `entry`=36516;
-+UPDATE `creature_template` SET `ScriptName`='npc_SoulguardAdept' WHERE `entry`=36620;
-+UPDATE `creature_template` SET `ScriptName`='npc_SoulHorror' WHERE `entry`=36522;
-+-- Boss
-+UPDATE `creature_template` SET `ScriptName`='boss_Bronjahn' WHERE `entry`=36497;
-+UPDATE `creature_template` SET `ScriptName`='mob_corrupted_soul_fragment' WHERE `entry`=36535;
-+UPDATE `creature_template` SET `ScriptName`='boss_Devourer_of_Souls' WHERE `entry`=36502;
-+UPDATE `creature_template` SET `ScriptName`='mob_well_of_souls' WHERE `entry`=36536;
-+-- Npc
-+UPDATE `creature_template` SET `ScriptName`='npc_slyvanas_jaina_fos_start' WHERE `entry` in (37596, 37597);
-+UPDATE `creature_template` SET `ScriptName`='npc_slyvanas_jaina_fos_end' WHERE `entry` in (38160, 38161);
-+update creature set spawnMask = 0 where id in (37584, 37497, 37496, 37588, 38161, 38160);
-\ No newline at end of file
-diff --git a/sql/Custom_Updates/ScriptDev2/Northrend/ForgeOfSouls_Script.sql b/sql/Custom_Updates/ScriptDev2/Northrend/ForgeOfSouls_Script.sql
-new file mode 100644
-index 0000000..ad6edea
---- /dev/null
-+++ b/sql/Custom_Updates/ScriptDev2/Northrend/ForgeOfSouls_Script.sql
-@@ -0,0 +1,49 @@
-+delete from script_texts where entry between -1610300 and -1610000;
-+/* FORGE OF SOULS */
-+-- Intro:
-+-- Jaina
-+INSERT INTO `script_texts` VALUES ('-1610000', 'Thank the Light for seeing you here safely. We have much more to do if we are to defeat the Lich King and put an end to the scourge!', null, null, null, null, null, null, null, null, 16617, '1', '0', '0', 'jaina_intro1');
-+INSERT INTO `script_texts` VALUES ('-1610001', 'Our allies within the Argent Crusade and The Knights of the Ebon Blade have broken through the front gate of Icecrown and are attempting to establish a foothold within the citadel!', null, null, null, null, null, null, null, null, 16618, '1', '0', '0', 'jaina_intro2');
-+INSERT INTO `script_texts` VALUES ('-1610002', 'Their succes hingers on what we discover within these cursed halls. Althou our mission is broght with peril, we must perseveir!', null, null, null, null, null, null, null, null, 16619, '1', '0', '0', 'Jaina_intro3');
-+INSERT INTO `script_texts` VALUES ('-1610003', 'With the attention of the Lich King drawn toward the front gate, we will be working our way to the side, and search of information that will enable us to defeat the scourge once and for all!', '', '', null, null, null, null, null, null, 16620, '1', '0', '0', 'jaina_intro4');
-+INSERT INTO `script_texts` VALUES ('-1610004', 'King Varian\'s SI:7 agents have gathered information about a private sanctum of the Lich King\'s deep within a place called "The Halls of Reflection"', null, null, null, null, null, null, null, null, 16621, '1', '0', '0', 'jaina_intro5');
-+INSERT INTO `script_texts` VALUES ('-1610005', 'We will carve a path through this wrecthed place and find a way to enter the Halls of Reflection. I sense powerfull magic hidden away within those halls. Magic that could be the key to destroying the scourge.', '', null, null, null, null, null, null, null, 16622, '1', '0', '0','jaina_intro6');
-+INSERT INTO `script_texts` VALUES ('-1610006', 'Your first mission is to destroy the machines of death within this malevolent engine of souls, and clear a path for our soldiers.', '', null, null, null, null, null, null, null, 16623, '1', '0', '0','jaina_outro7');
-+INSERT INTO `script_texts` VALUES ('-1610007', 'Make haste champions! I will prepare the troops to fall in behind you.', '', null, null, null, null, null, null, null, 16624, '1', '0', '0','jaina_intro8');
-+INSERT INTO `script_texts` VALUES ('-1610008', 'Excelent work champions! We shall set up our base camp within these chambers. My magi will make the scourge transport device working shortly. Step inside it when you are ready for your next mission. I will meet you on the other side.', '', null, null, null, null, null, null, null, 16625, '1', '0', '0','jaina_outro');
-+-- Sylvanas
-+INSERT INTO `script_texts` VALUES ('-1610009', 'The Argent Crusade and The Knights of the Ebon Blade have assalted the gates of the Icecrown Citadel, and are preparing for a massive attack upon the scourge. Our mission is a bit more suddle, but equaly as important.', null, null, null, null, null, null, null, null, 17038, '1', '0', '0', 'sylvanas_intro1');
-+INSERT INTO `script_texts` VALUES ('-1610010', 'With the attention of the Lich King turn towards the front gate, we will be working our way to the side, in search of information that will enable us to defeat him. Once and for all!', null, null, null, null, null, null, null, null, 17039, '1', '0', '0', 'sylvanas_intro2');
-+INSERT INTO `script_texts` VALUES ('-1610011', 'Our scouts have reported that the Lick KIng has a private chamber outside the Frozen Throne, deep within a place called "The Halls of Reflection". That is our target champions!', null, null, null, null, null, null, null, null, 17040, '1', '0', '0', 'sylvanas_intro3');
-+INSERT INTO `script_texts` VALUES ('-1610012', 'We will cut a swat of destruction through this cursed place, and find a way to enter the Halls of Reflection. If there is anything of value to be find here, it will be found in the halls.', '', '', null, null, null, null, null, null, 17041, '1', '0', '0', 'sylvanas_intro4');
-+INSERT INTO `script_texts` VALUES ('-1610013', 'Your first mission is to destroy the machines of death within this wretched engine of souls, and clear a path for our soldiers!', null, null, null, null, null, null, null, null, 17042, '1', '0', '0', 'sylvanas_intro5');
-+INSERT INTO `script_texts` VALUES ('-1610014', 'The Dark Lady watches over you! Make haste!', '', null, null, null, null, null, null, null, 17043, '1', '0', '0','sylvanas_intro6');
-+INSERT INTO `script_texts` VALUES ('-1610015', 'Excelent work champions! We shall set up our base camp within these chambers. My magi will make the scourge transport device working shortly. Step inside it when you are ready for your next mission. I will meet you on the other side.', '', null, null, null, null, null, null, null, 17044, '1', '0', '0','sylvanas_outro');
-+-- Bronjahm
-+INSERT INTO `script_texts` VALUES ('-1610016', 'More souls to power the engine!', null, null, null, null, null, null, null, null, 16595, '1', '0', '0', 'Bronjahn - Aggro1');
-+INSERT INTO `script_texts` VALUES ('-1610017', 'Finally...a captive audience!', null, null, null, null, null, null, null, null, 16595, '1', '0', '0', 'Bronjahn - Aggro2');
-+INSERT INTO `script_texts` VALUES ('-1610018', 'The vortex of the harvested calls to you!', null, null, null, null, null, null, null, null, 16599, '1', '0', '0', 'Bronjahn - Soulstorm');
-+INSERT INTO `script_texts` VALUES ('-1610019', 'Another soul to strengthen the host!', '', '', null, null, null, null, null, null, 16596, '1', '0', '0', 'slay1');
-+INSERT INTO `script_texts` VALUES ('-1610020', 'Fodder for the engine!', null, null, null, null, null, null, null, null, 16597, '1', '0', '0', 'Bronjahn - Slay2');
-+INSERT INTO `script_texts` VALUES ('-1610021', 'I will sever the soul from your body!', '', null, null, null, null, null, null, null, 16600, '1', '0', '0','corrupt soul');
-+INSERT INTO `script_texts` VALUES ('-1610022', 'My soul for you, master.', '', null, null, null, null, null, null, null, 16598, '1', '0', '0','death');
-+-- Devourer of Souls
-+INSERT INTO `script_texts` VALUES ('-1610023', 'Devourer of Souls begins to cast Mirrored Soul!', null, null, null, null, null, null, null, null, '0', '3', '0', '0', 'Mirrored Soul');
-+INSERT INTO `script_texts` VALUES ('-1610024', 'Devourer of Souls begins to cast Wailing Souls!', null, null, null, null, null, null, null, null, '0', '3', '0', '0', 'Wailing Souls');
-+INSERT INTO `script_texts` VALUES ('-1610025', 'Devourer of Souls begins to Unleash Souls!', '', '', '', '', '', '', '', '', '0', '3', '0', '0', 'Unleash Souls');
-+INSERT INTO `script_texts` VALUES ('-1610026', 'You dare look upon the host of souls?! I SHALL DEVOUR YOU WHOLE!', null, null, null, null, null, null, null, null, 16890, '1', '0', '0', 'famale_aggro');
-+INSERT INTO `script_texts` VALUES ('-1610027', 'Stare into the abyss, and see your end!', null, null, null, null, null, null, null, null, 16895, '1', '0', '0', 'female_Wailing Souls');
-+INSERT INTO `script_texts` VALUES ('-1610028', 'SUFFERING! ANGUISH! CHAOS! RISE AND FEED!', '', '', '', '', '', '', '', '', 16894, '1', '0', '0', 'female_Unleash Souls');
-+INSERT INTO `script_texts` VALUES ('-1610029', 'Damnation!', null, null, null, null, null, null, null, null, 16891, '1', '0', '0', 'female_slay1');
-+INSERT INTO `script_texts` VALUES ('-1610030', 'Doomed for eternity!', null, null, null, null, null, null, null, null, 16892, '1', '0', '0', 'female_slay2');
-+INSERT INTO `script_texts` VALUES ('-1610031', 'The swell of souls will not be abated! You only delay the inevitable!', null, null, null, null, null, null, null, null, 16893, '1', '0', '0', 'female_death');
-+INSERT INTO `script_texts` VALUES ('-1610032', 'You dare look upon the host of souls?! I SHALL DEVOUR YOU WHOLE!', null, null, null, null, null, null, null, null, 16884, '1', '0', '0', 'male1_aggro');
-+INSERT INTO `script_texts` VALUES ('-1610033', 'Stare into the abyss, and see your end!', null, null, null, null, null, null, null, null, 16889, '1', '0', '0', 'male1_Wailing Souls');
-+INSERT INTO `script_texts` VALUES ('-1610034', 'SUFFERING! ANGUISH! CHAOS! RISE AND FEED!', '', '', '', '', '', '', '', '', 16888, '1', '0', '0', 'male1_Unleash Souls');
-+INSERT INTO `script_texts` VALUES ('-1610035', 'Damnation!', null, null, null, null, null, null, null, null, 16885, '1', '0', '0', 'male1_slay1');
-+INSERT INTO `script_texts` VALUES ('-1610036', 'Doomed for eternity!', null, null, null, null, null, null, null, null, 16886, '1', '0', '0', 'male1_slay2');
-+INSERT INTO `script_texts` VALUES ('-1610037', 'The swell of souls will not be abated! You only delay the inevitable!', null, null, null, null, null, null, null, null, 16887, '1', '0', '0', 'male1_death');
-+INSERT INTO `script_texts` VALUES ('-1610038', 'SUFFERING! ANGUISH! CHAOS! RISE AND FEED!', '', '', '', '', '', '', '', '', 16899, '1', '0', '0', 'male2_Unleash Souls');
-+INSERT INTO `script_texts` VALUES ('-1610039', 'Damnation!', null, null, null, null, null, null, null, null, 16896, '1', '0', '0', 'male2_slay1');
-+INSERT INTO `script_texts` VALUES ('-1610040', 'Doomed for eternity!', null, null, null, null, null, null, null, null, 16897, '1', '0', '0', 'male2_slay2');
-+INSERT INTO `script_texts` VALUES ('-1610041', 'The swell of souls will not be abated! You only delay the inevitable!', null, null, null, null, null, null, null, null, 16898, '1', '0', '0', 'male2_death');
-diff --git a/system/ScriptLoader.cpp b/system/ScriptLoader.cpp
-index 53e496d..72e694d 100644
---- a/system/ScriptLoader.cpp
-+++ b/system/ScriptLoader.cpp
-@@ -275,6 +275,10 @@ extern void AddSC_boss_galdarah();
- extern void AddSC_boss_moorabi();
- extern void AddSC_boss_sladran();
- extern void AddSC_instance_gundrak();
-+extern void AddSC_boss_Bronjahn();                          //icecrown citadel - frozen halls - forge of souls
-+extern void AddSC_boss_Devourer_Of_Souls();
-+extern void AddSC_Forge_Of_Souls();                         
-+extern void AddSC_instance_forge_of_souls();
- extern void AddSC_boss_anubrekhan();                        //naxxramas
- extern void AddSC_boss_four_horsemen();
- extern void AddSC_boss_faerlina();
--- 
-1.7.0.2
-
diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp
index 17a047b..0846d7e 100644
--- a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp
+++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_bronjahm.cpp
@@ -1,24 +1,266 @@
 /* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
 
 /* ScriptData
 SDName: boss_bronjahm
-SD%Complete: 0%
-SDComment:
+SD%Complete: 70%
+SDComment: Soulstorm, Corrupt soul
 SDCategory: The Forge of Souls
 EndScriptData */
 
 #include "precompiled.h"
+#include "forge_of_souls.h"
+
+enum Spells
+{
+    SPELL_CORRUPT_SOUL          = 68839,
+    SPELL_MAGICSBANE            = 68793,
+    SPELL_MAGICSBANE_H          = 69050,
+    SPELL_SHADOW_BOLT           = 70043,
+    SPELL_SHADOW_BOLT_H         = 70043,
+    SPELL_FEAR                  = 30584,//68950,
+    SPELL_SOULSTORM             = 68872,
+    SPELL_TELEPORT              = 68988,
+    SPELL_SOULSTORM_EFFECT      = 68925,
+    SPELL_SOULSTORM_DMG         = 68921,
+
+    NPC_CORRUPT_SOUL_FRAGMENT   = 36535,
+    EQUIP_ID                    = 35514,
+};
+
+enum Yells
+{
+    SAY_AGGRO                               = -1610017,
+    SAY_SOULSTORM                           = -1610018,
+    SAY_SLAY1                               = -1610019,
+    SAY_SLAY2                               = -1610020,
+    SAY_CORRUPT_SOUL                        = -1610021,
+    SAY_DEATH                               = -1610022,
+};
+
+#define HOME_X                      5297.33f
+#define HOME_Y                      2506.64f
+
+struct MANGOS_DLL_DECL boss_BronjahnAI : public ScriptedAI
+{
+    boss_BronjahnAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        SetEquipmentSlots(false, EQUIP_ID, -1, -1);
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiCorruptSoulTimer;
+    uint32 m_uiMagicsBaneTimer;
+    uint32 m_uiShadowBoltTimer;
+    uint32 m_uiFearTimer;
+    uint32 m_uiSoulStormTimer;
+
+    bool m_bIsSoulStorm;
+    bool m_bHasTeleported;
+
+    void Reset()
+    {        
+        m_uiCorruptSoulTimer    = urand(15000, 25000);
+        m_uiMagicsBaneTimer     = urand(8000, 15000);
+        m_uiShadowBoltTimer     = 2000;
+        m_uiFearTimer           = 1000;
+
+        m_bIsSoulStorm          = false;
+        m_bHasTeleported        = false;
+
+        if (m_pInstance)
+            m_pInstance->SetData(TYPE_BRONJAHN, NOT_STARTED);
+    }
+
+    void Aggro(Unit* pWho)
+    {
+        if (m_pInstance)
+            m_pInstance->SetData(TYPE_BRONJAHN, IN_PROGRESS);
+
+        DoScriptText(SAY_AGGRO, m_creature);
+    }
+
+    void KilledUnit(Unit *pVictim)
+    {
+        if(irand(0,1))
+            DoScriptText(SAY_SLAY1, m_creature);
+        else
+            DoScriptText(SAY_SLAY2, m_creature);
+    }
+
+    void JustDied(Unit* pKiller)  
+    {
+        DoScriptText(SAY_DEATH, m_creature);
+
+        if (m_pInstance)
+            m_pInstance->SetData(TYPE_BRONJAHN, DONE);
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (m_uiCorruptSoulTimer < uiDiff && !m_bIsSoulStorm)
+        {
+            DoScriptText(SAY_CORRUPT_SOUL, m_creature);
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                DoCast(pTarget, SPELL_CORRUPT_SOUL);
+                /*if(Creature *pTemp = m_creature->SummonCreature(NPC_CORRUPT_SOUL_FRAGMENT, pTarget->GetPositionX(), pTarget->GetPositionY(), pTarget->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 30000))
+                {
+                    pTemp->SetSplineFlags(SPLINEFLAG_WALKMODE);
+                    pTemp->GetMotionMaster()->MovePoint(0, m_creature->GetPositionX(), m_creature->GetPositionY(), m_creature->GetPositionZ());
+                }*/
+            }
+            m_uiCorruptSoulTimer = urand(15000, 25000);
+        }
+        else
+            m_uiCorruptSoulTimer -= uiDiff;
+
+        if (m_uiMagicsBaneTimer < uiDiff)
+        {
+            DoCast(m_creature->getVictim(), m_bIsRegularMode ? SPELL_MAGICSBANE : SPELL_MAGICSBANE_H);
+            m_uiMagicsBaneTimer = urand(8000, 15000);
+        }
+        else
+            m_uiMagicsBaneTimer -= uiDiff;
+
+        if (m_uiShadowBoltTimer < uiDiff)
+        {
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, m_bIsRegularMode ? SPELL_SHADOW_BOLT : SPELL_SHADOW_BOLT_H);
+            
+            if(m_bIsSoulStorm)
+                m_uiShadowBoltTimer = 3000;
+            else
+                m_uiShadowBoltTimer = 5000;
+        }
+        else
+            m_uiShadowBoltTimer -= uiDiff;
+
+        if (m_uiFearTimer < uiDiff && m_bIsSoulStorm)
+        {
+            m_creature->CastStop();
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(m_creature, SPELL_FEAR);
+            m_uiFearTimer = urand(8000, 12000);
+        }
+        else
+            m_uiFearTimer -= uiDiff;
+
+        if(m_creature->GetHealthPercent() <= 30.0f && !m_bHasTeleported)
+        {
+            m_creature->CastStop();
+            m_uiSoulStormTimer = 2000;
+            m_bHasTeleported = true;
+            m_creature->GetMotionMaster()->Clear();
+            m_creature->GetMotionMaster()->MovePoint(0, 5297.33f, 2506.64f, 686.068f);     
+        }
+
+        if (m_uiSoulStormTimer < uiDiff && !m_bIsSoulStorm)
+        {
+            m_creature->CastStop();
+            m_uiFearTimer = 7000;
+            //DoCast(m_creature, SPELL_SOULSTORM); // spell broken!!!
+            DoCast(m_creature, SPELL_SOULSTORM_EFFECT);
+            DoScriptText(SAY_SOULSTORM, m_creature);
+            m_creature->GetMotionMaster()->Clear();
+            m_creature->GetMotionMaster()->MoveIdle();
+            m_bIsSoulStorm = true;;
+        }
+        else
+            m_uiSoulStormTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+
+        if (m_creature->GetDistance2d(HOME_X, HOME_Y) > 30)
+            EnterEvadeMode();
+    }
+};
+
+CreatureAI* GetAI_boss_Bronjahn(Creature* pCreature)
+{
+    return new boss_BronjahnAI (pCreature);
+}
+
+struct MANGOS_DLL_DECL mob_corrupted_soul_fragmentAI : public ScriptedAI
+{
+    mob_corrupted_soul_fragmentAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+uint32 m_uiRangeCheck_Timer;
+
+    void Reset()
+    {
+        m_uiRangeCheck_Timer = 1000;
+    }
+
+    void AttackStart(Unit* pWho)
+    {
+        return;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (m_uiRangeCheck_Timer < uiDiff)
+        {
+            if (m_pInstance)
+            {
+                if (Creature* pBronjahm = ((Creature*)Unit::GetUnit((*m_creature), m_pInstance->GetData64(NPC_BRONJAHM))))
+                {
+                    float fDistance = m_creature->GetDistance2d(pBronjahm);
+                    if (fDistance <= 2)
+                    {
+                        //((boss_bronjahmAI*)pBronjahm->AI())->SoulFragmentHit();
+                        m_creature->DealDamage(m_creature, m_creature->GetHealth(), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+                    }
+                }
+            }
+            m_uiRangeCheck_Timer = 1000;
+        }
+        else m_uiRangeCheck_Timer -= uiDiff;
+    }
+};
+
+CreatureAI* GetAI_mob_corrupted_soul_fragment(Creature* pCreature)
+{
+    return new mob_corrupted_soul_fragmentAI (pCreature);
+}
+
+void AddSC_boss_Bronjahn()
+{
+    Script *newscript;
+    newscript = new Script;
+    newscript->Name="boss_Bronjahn";
+    newscript->GetAI = &GetAI_boss_Bronjahn;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="mob_corrupted_soul_fragment";
+    newscript->GetAI = &GetAI_mob_corrupted_soul_fragment;
+    newscript->RegisterSelf();
+}
diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp
index 1e43052..a4bf51e 100644
--- a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp
+++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/boss_devourer_of_souls.cpp
@@ -1,24 +1,518 @@
 /* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
 
 /* ScriptData
 SDName: boss_devourer_of_souls
-SD%Complete: 0%
-SDComment:
+SD%Complete: 60%
+SDComment:  Texts, outro, well of souls
 SDCategory: The Forge of Souls
 EndScriptData */
 
 #include "precompiled.h"
+#include "forge_of_souls.h"
+
+enum
+{
+    NPC_HORDE_CHAMPION1         = 37584,
+    NPC_HORDE_CHAMPION2         = 37588,
+    NPC_HORDE_CHAMPION3         = 37587,
+    NPC_HORDE_SLYVANAS          = 38161,
+    NPC_HORDE_LORALEN           = 37779,
+    NPC_HORDE_KELIRA            = 37583,
+
+    SPELL_PHANTOM_BLAST         = 68982,
+    SPELL_PHANTOM_BLAST_H       = 70322,
+    SPELL_MIRRORED_SOUL         = 69051,
+    SPELL_WELL_OF_SOULS         = 68820,
+    SPELL_UNLEASHED_SOULS       = 68939,
+    SPELL_WAILING_SOULS         = 68912,
+    SPELL_WELL_OF_SOULS_VIS     = 68854,
+
+    SPELL_WELL_OF_SOULS_AURA    = 68863,
+    SPELL_WELL_OF_SOULS_AURA_H  = 70323,
+
+    ACHIEVEMENT_THREE_FACED     = 4523,
+
+    MOB_WELL_OF_SOULS           = 36536,
+};
+//Spells
+
+enum Yells
+{
+    EMOTE_MIRRORED_SOUL                     = -1610023,
+    EMOTE_WAILING_SOULS                     = -1610024,
+    EMOTE_UNLEASHED_SOULS                   = -1610025,
+    SAY_AGGRO_FEMALE                        = -1610026,
+    SAY_WAILING_SOULS_FEMALE                = -1610027,
+    SAY_UNLEASH_SOULS_FEMALE                = -1610028,
+    SAY_SLAY1_FEMALE                        = -1610029,
+    SAY_SLAY2_FEMALE                        = -1610030,
+    SAY_DEATH_FEMALE                        = -1610031,
+    SAY_AGGRO_MALE                          = -1610032,
+    SAY_WAILING_SOULS_MALE                  = -1610033,
+    SAY_UNLEASH_SOULS_MALE                  = -1610034,
+    SAY_SLAY1_MALE                          = -1610035,
+    SAY_SLAY2_MALE                          = -1610036,
+    SAY_DEATH_MALE                          = -1610037,
+};
+
+//Positional defines 
+struct LocationsXY
+{
+    float x, y, z, o;
+    uint32 id;
+};
+static LocationsXY SummonLoc[]=
+{
+    {5590.47f, 2427.79f, 705.935f, 0.802851f}, //champ1
+    {5593.59f, 2428.34f, 705.935f, 0.977384f},
+    {5600.81f, 2429.31f, 705.935f, 0.890118f},
+    {5600.80f, 2421.12f, 705.935f, 0.890118f},
+    {5601.43f, 2426.53f, 705.935f, 0.890118f},
+    {5601.55f, 2418.36f, 705.935f, 1.151920f},
+    {5598.00f, 2429.14f, 705.935f, 1.047200f},
+    {5594.04f, 2424.87f, 705.935f, 1.151920f},
+    {5597.89f, 2421.54f, 705.935f, 0.610865f},
+    {5598.57f, 2434.62f, 705.935f, 1.134460f},
+    {5585.46f, 2417.99f, 705.935f, 1.064650f},// champ2
+    {5585.46f, 2417.99f, 705.935f, 1.064650f},
+    {5605.81f, 2428.42f, 705.935f, 0.820305f},
+    {5591.61f, 2412.66f, 705.935f, 0.925025f},
+    {5593.90f, 2410.64f, 705.935f, 0.872665f},
+    {5586.76f, 2416.73f, 705.935f, 0.942478f},
+    {5592.23f, 2419.14f, 705.935f, 0.855211f},// champ3
+    {5594.61f, 2416.87f, 705.935f, 0.907571f},
+    {5589.77f, 2421.03f, 705.935f, 0.855211f},
+    {5606.12f, 2436.60f, 705.935f, 0.890110f},// sylvanas / jaina
+    {5602.58f, 2435.95f, 705.935f, 0.959931f},// lolaren / elandra
+    {5606.13f, 2433.16f, 705.935f, 0.785398f},// kalira / koreln
+};
+
+static LocationsXY MoveLoc[]=
+{
+    {5650.92f, 2488.89f, 708.696f}, // jaina / sylvanas
+    {5637.01f, 2482.89f, 708.695f}, // champions
+};
+
+#define HOME_X                      5661.58f
+#define HOME_Y                      2507.2f
+
+/******** JAINA & SYLVANAS *******/
+
+enum
+{
+    SAY_SYLVANAS                           = -1610015,
+    SAY_JAINA                              = -1610008,
+};
+
+struct MANGOS_DLL_DECL npc_sylvanas_jaina_fos_endAI: public ScriptedAI
+{
+    npc_sylvanas_jaina_fos_endAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+
+    uint32 m_uiSpeech_Timer;
+    uint8 m_uiOutro_Phase;
+    bool m_bIsOutro;
+    uint32 creatureEntry;
+
+    void Reset()
+    {
+        m_uiOutro_Phase     = 0;
+        m_uiSpeech_Timer    = 1000;
+        m_bIsOutro          = true;
+        creatureEntry = m_creature->GetEntry();
+    }
+
+    void SummonHordeChampions()
+    {
+        for (uint8 i = 0; i < 10; i++)
+        {
+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_1_HORDE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+            if (pTemp)
+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
+        }
+
+        for (uint8 i = 10; i < 16; i++)
+        {
+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_2_HORDE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+            if (pTemp)
+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
+        }
+
+        for (uint8 i = 16; i < 19; i++)
+        {
+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_3_HORDE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+            if (pTemp)
+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
+        }
+
+        Creature *pLoralen = m_creature->SummonCreature(NPC_LORALEN, SummonLoc[20].x, SummonLoc[20].y, SummonLoc[20].z, SummonLoc[20].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+        if (pLoralen)
+            pLoralen->GetMotionMaster()->MovePoint(0, MoveLoc[0].x - 5, MoveLoc[0].y + 5, MoveLoc[0].z);
+
+        Creature *pKalira = m_creature->SummonCreature(NPC_KALIRA, SummonLoc[21].x, SummonLoc[21].y, SummonLoc[21].z, SummonLoc[21].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+        if (pKalira)
+            pKalira->GetMotionMaster()->MovePoint(0, MoveLoc[0].x + 5, MoveLoc[0].y - 5, MoveLoc[0].z);
+
+    }
+
+    void SummonAlyChampions()
+    {
+        for (uint8 i = 0; i < 10; i++)
+        {
+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_1_ALLIANCE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+            if (pTemp)
+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
+        }
+
+        for (uint8 i = 10; i < 16; i++)
+        {
+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_2_ALLIANCE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+            if (pTemp)
+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
+        }
+
+        for (uint8 i = 16; i < 19; i++)
+        {
+            Creature *pTemp = m_creature->SummonCreature(NPC_CHAMPION_3_ALLIANCE, SummonLoc[i].x, SummonLoc[i].y, SummonLoc[i].z, SummonLoc[i].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+            if (pTemp)
+                pTemp->GetMotionMaster()->MovePoint(0, MoveLoc[1].x + urand(0, 40), MoveLoc[1].y + urand(0, 50), MoveLoc[1].z);
+        }
+
+        Creature *pElandra = m_creature->SummonCreature(NPC_ELANDRA, SummonLoc[20].x, SummonLoc[20].y, SummonLoc[20].z, SummonLoc[20].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+        if (pElandra)
+            pElandra->GetMotionMaster()->MovePoint(0, MoveLoc[0].x - 5, MoveLoc[0].y + 5, MoveLoc[0].z);
+
+        Creature *pKoreln = m_creature->SummonCreature(NPC_KORELN, SummonLoc[21].x, SummonLoc[21].y, SummonLoc[21].z, SummonLoc[21].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+        if (pKoreln)
+            pKoreln->GetMotionMaster()->MovePoint(0, MoveLoc[0].x + 5, MoveLoc[0].y - 5, MoveLoc[0].z);
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (m_bIsOutro)
+        {
+            if(m_uiSpeech_Timer < uiDiff)
+            {
+                switch(m_uiOutro_Phase)
+                {
+                case 0:
+                    switch (creatureEntry)
+                    {
+                    case NPC_JAINA_END:
+                        SummonAlyChampions();
+                        break;
+                    case NPC_SYLVANAS_END:
+                        SummonHordeChampions();
+                        break;
+                    }
+                    ++m_uiOutro_Phase;
+                    m_uiSpeech_Timer = 30000;
+                    break;
+                case 1:
+                    switch (creatureEntry)
+                    {
+                    case NPC_JAINA_END:
+                        DoScriptText(SAY_JAINA, m_creature);
+                        break;
+                    case NPC_SYLVANAS_END:
+                        DoScriptText(SAY_SYLVANAS, m_creature);
+                        break;
+                    }
+                    ++m_uiOutro_Phase;
+                    m_uiSpeech_Timer = 5000;
+                    break;
+
+                default:
+                    m_uiSpeech_Timer = 100000;
+                }
+            }else m_uiSpeech_Timer -= uiDiff;
+        }
+    }
+};
+
+struct MANGOS_DLL_DECL boss_Devourer_of_SoulsAI : public ScriptedAI
+{
+    boss_Devourer_of_SoulsAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiPhantomBlastTimer;
+    uint32 m_uiMirroredSoulTimer;
+    uint32 m_uiWellOfSoulsTimer;
+    uint32 m_uiUnleashedSoulsTimer;
+    uint32 m_uiWailingSoulsTimer;
+
+    bool m_bIsThreeFaced;
+
+    bool isHorde;
+    bool isAly;
+
+    void Reset()
+    {        
+        m_bIsThreeFaced         = false;
+
+        isHorde                 = false;
+        isAly                   = false;
+
+        m_uiPhantomBlastTimer   = 45000;
+        m_uiMirroredSoulTimer   = 20000;
+        m_uiWellOfSoulsTimer    = 30000;
+        m_uiUnleashedSoulsTimer = 25000;
+        m_uiWailingSoulsTimer   = 28000;
+
+        if (m_pInstance)
+            m_pInstance->SetData(TYPE_DEVOURER_OF_SOULS, NOT_STARTED);
+    }
+
+    void MoveInLineOfSight(Unit* pWho)
+    {
+        if(pWho->getFaction() == 1 || pWho->getFaction() == 3 || pWho->getFaction() == 4 || pWho->getFaction() == 115 || pWho->getFaction() == 1629)
+            isAly = true;
+
+        if(pWho->getFaction() == 2 || pWho->getFaction() == 5 || pWho->getFaction() == 6 || pWho->getFaction() == 116 || pWho->getFaction() == 1610)
+            isHorde = true;
+    }
+
+    void Aggro(Unit* pWho)
+    {
+        if (m_pInstance)
+            m_pInstance->SetData(TYPE_DEVOURER_OF_SOULS, IN_PROGRESS);
+
+        if(irand(0,1))
+            DoScriptText(SAY_AGGRO_FEMALE, m_creature);
+        else
+            DoScriptText(SAY_AGGRO_MALE, m_creature);
+    }
+
+    void KilledUnit(Unit *pVictim)
+    {
+        switch (urand(0, 3))
+        {
+        case 0:
+            DoScriptText(SAY_SLAY1_FEMALE, m_creature);
+            break;
+        case 1:
+            DoScriptText(SAY_SLAY2_FEMALE, m_creature);
+            break;
+        case 2:
+            DoScriptText(SAY_SLAY1_MALE, m_creature);
+            break;
+        case 3:
+            DoScriptText(SAY_SLAY2_MALE, m_creature);
+            break;
+        }
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (m_uiPhantomBlastTimer < uiDiff)
+        {
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, m_bIsRegularMode ? SPELL_PHANTOM_BLAST : SPELL_PHANTOM_BLAST_H);
+            m_uiPhantomBlastTimer = 45000;
+        }
+        else
+            m_uiPhantomBlastTimer -= uiDiff;
+
+        if (m_uiMirroredSoulTimer < uiDiff)
+        {
+            DoScriptText(EMOTE_MIRRORED_SOUL, m_creature);
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, SPELL_MIRRORED_SOUL);
+            m_uiMirroredSoulTimer = 20000;
+        }
+        else
+            m_uiMirroredSoulTimer -= uiDiff;
+
+        if (m_uiWellOfSoulsTimer < uiDiff)
+        {
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, SPELL_WELL_OF_SOULS);
+            m_uiWellOfSoulsTimer = 20000;
+        }
+        else
+            m_uiWellOfSoulsTimer -= uiDiff;
+
+        if (m_uiUnleashedSoulsTimer < uiDiff)
+        {
+            switch (urand(0, 1))
+            {
+            case 0:
+                DoScriptText(SAY_UNLEASH_SOULS_FEMALE, m_creature);
+                break;
+            case 1:
+                DoScriptText(SAY_UNLEASH_SOULS_MALE, m_creature);
+                break;
+            }
+
+            DoScriptText(EMOTE_UNLEASHED_SOULS, m_creature);
+            m_creature->CastStop();
+            DoCast(m_creature, SPELL_UNLEASHED_SOULS);
+
+            m_uiUnleashedSoulsTimer = 30000;
+        }
+        else
+            m_uiUnleashedSoulsTimer -= uiDiff;
+
+        if (m_uiWailingSoulsTimer < uiDiff)
+        {
+            if(irand(0,1))
+                DoScriptText(SAY_WAILING_SOULS_FEMALE, m_creature);
+            else
+                DoScriptText(SAY_WAILING_SOULS_MALE, m_creature);
+            DoScriptText(EMOTE_WAILING_SOULS, m_creature);
+
+            DoCast(m_creature->getVictim(), SPELL_WAILING_SOULS);
+
+            m_uiWailingSoulsTimer = 15000;
+        }
+        else
+            m_uiWailingSoulsTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+
+        if (m_creature->GetDistance2d(HOME_X, HOME_Y) > 50)
+            EnterEvadeMode();
+    }
+
+    void JustDied(Unit* pKiller)
+    {
+        if (m_pInstance)
+            m_pInstance->SetData(TYPE_DEVOURER_OF_SOULS, DONE);
+
+        switch (urand(0, 1))
+        {
+        case 0:
+            DoScriptText(SAY_DEATH_FEMALE, m_creature);
+            break;
+        case 1:
+            DoScriptText(SAY_DEATH_MALE, m_creature);
+            break;
+        }
+
+        if(isAly)
+        {
+            Creature *pJaina = m_creature->SummonCreature(NPC_JAINA_END, SummonLoc[19].x, SummonLoc[19].y, SummonLoc[19].z, SummonLoc[19].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+            if (pJaina)
+                pJaina->GetMotionMaster()->MovePoint(0, MoveLoc[0].x, MoveLoc[0].y, MoveLoc[0].z);
+        }
+
+        if(isHorde)
+        {
+            Creature *pSylvanas = m_creature->SummonCreature(NPC_SYLVANAS_END, SummonLoc[19].x, SummonLoc[19].y, SummonLoc[19].z, SummonLoc[19].o, TEMPSUMMON_DEAD_DESPAWN, 0);
+            if (pSylvanas)
+                pSylvanas->GetMotionMaster()->MovePoint(0, MoveLoc[0].x, MoveLoc[0].y, MoveLoc[0].z);
+        }
+    }
+};
+
+CreatureAI* GetAI_boss_Devourer_of_Souls(Creature* pCreature)
+{
+    return new boss_Devourer_of_SoulsAI (pCreature);
+}
+
+struct MANGOS_DLL_DECL mob_well_of_soulsAI : public ScriptedAI
+{
+    mob_well_of_soulsAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+        pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+        SetCombatMovement(false);
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiSpellTimer;
+
+    void Reset()
+    { 
+        m_uiSpellTimer = 1000;
+        DoCast(m_creature, m_bIsRegularMode ? SPELL_WELL_OF_SOULS_AURA : SPELL_WELL_OF_SOULS_AURA_H);
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        /*if (m_uiSpellTimer < uiDiff)
+        {
+            Map *map = m_creature->GetMap();
+            if (map->IsDungeon())
+            {
+                Map::PlayerList const &PlayerList = map->GetPlayers();
+
+                if (PlayerList.isEmpty())
+                    return;
+
+                for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+                {
+                    if (i->getSource()->isAlive() && m_creature->GetDistance2d(i->getSource()->GetPositionX(), i->getSource()->GetPositionY()) < 4)
+                        m_creature->DealDamage(i->getSource(), m_bIsRegularMode ? urand(2925, 3075) : urand(3900, 4100), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+                }
+            } 
+            m_uiSpellTimer = 1000;
+        }
+        else
+            m_uiSpellTimer -= uiDiff;*/
+    }
+};
+
+CreatureAI* GetAI_mob_well_of_souls(Creature* pCreature)
+{
+    return new mob_well_of_soulsAI (pCreature);
+}
+
+CreatureAI* GetAI_npc_sylvanas_jaina_fos_end(Creature* pCreature)
+{
+    return new npc_sylvanas_jaina_fos_endAI (pCreature);
+}
+
+void AddSC_boss_Devourer_Of_Souls()
+{
+    Script *newscript;
+    newscript = new Script;
+    newscript->Name="boss_Devourer_of_Souls";
+    newscript->GetAI = &GetAI_boss_Devourer_of_Souls;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="mob_well_of_souls";
+    newscript->GetAI = &GetAI_mob_well_of_souls;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->GetAI = &GetAI_npc_sylvanas_jaina_fos_end;
+    newscript->Name = "npc_slyvanas_jaina_fos_end";
+    newscript->RegisterSelf();
+}
diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp
new file mode 100644
index 0000000..b209a0b
--- /dev/null
+++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.cpp
@@ -0,0 +1,777 @@
+/* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+/* ScriptData
+SDName: forge_of_souls
+SD%Complete: 70%
+SDComment:  Implement event (Jaina & Sylvanas)
+SDCategory: The Forge of Souls
+EndScriptData */
+
+#include "precompiled.h"
+#include "forge_of_souls.h"
+
+enum
+{
+    /**** SPELLS ****/
+
+    //Spiteful Apparition
+    SPELL_SPITE                 = 68895,
+    SPELL_SPITE_H               = 70212,
+
+    //Spectral Warden
+    SPELL_VEIL_OF_SHADOWS       = 69633,
+    SPELL_WAIL_OF_SOULS         = 69148,
+    SPELL_WAIL_OF_SOULS_H       = 70210,
+
+    //Soulguard Watchman
+    SPELL_SHROUD_OF_RUNES       = 69056,
+    SPELL_UNHOLY_RAGE           = 69053,
+
+    //Soulguard Reaper
+    SPELL_FROST_NOVA            = 69060,
+    SPELL_FROST_NOVA_H          = 70209,
+    SPELL_SHADOW_LANCE          = 69058,
+
+    //Soulguard Bonecaster
+    SPELL_BONE_VOLLEY           = 69080,
+    SPELL_BONE_VOLLEY_H         = 70206,
+    SPELL_RAISE_DEAD            = 69562,
+    SPELL_SHIELD_OF_BONES       = 69069,
+    SPELL_SHIELD_OF_BONES_H     = 70207,
+
+    //Soulguard Animator
+    // Raise dead 69562
+    SPELL_SHADOW_BOLT           = 69068,
+    SPELL_SHADOW_BOLT_H         = 70208, 
+    SPELL_SOUL_SICKNESS         = 69131,
+    SPELL_SOUL_SIPHON           = 69128,
+
+    //Soulguard Adept
+    //Raise dead 69562
+    //Shadow Bolt 69068/70208
+    SPELL_DRAIN_LIFE            = 69066,
+    SPELL_DRAIN_LIFE_H          = 70213,
+    SPELL_SHADOW_MEND           = 69564,
+    SPELL_SHADOW_MEND_H         = 70205,
+
+    //Soul Horror
+    SPELL_SOUL_STRIKE           = 69088,
+    SPELL_SOUL_STRIKE_H         = 70211,
+};
+
+struct MANGOS_DLL_DECL npc_SpitefulApparitionAI: public ScriptedAI
+{
+    npc_SpitefulApparitionAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiSpiteTimer;
+
+    void Reset()
+    {
+        m_uiSpiteTimer = 8000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (m_uiSpiteTimer < uiDiff)
+        {
+            DoCast(m_creature->getVictim(), m_bIsRegularMode ? SPELL_SPITE : SPELL_SPITE_H);
+            m_uiSpiteTimer = 8000;
+        }
+        else
+            m_uiSpiteTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+struct MANGOS_DLL_DECL npc_SpectralWardenAI: public ScriptedAI
+{
+    npc_SpectralWardenAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiVeilOfShadowsTimer;
+    uint32 m_uiWailOfSoulsTimer;
+
+    void Reset()
+    {
+        m_uiVeilOfShadowsTimer  = 5000;
+        m_uiWailOfSoulsTimer    = 10000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (m_uiVeilOfShadowsTimer < uiDiff)
+        {
+            DoCast(m_creature->getVictim(), SPELL_VEIL_OF_SHADOWS);
+            m_uiVeilOfShadowsTimer = 10000;
+        }
+        else
+            m_uiVeilOfShadowsTimer -= uiDiff;
+
+        if (m_uiWailOfSoulsTimer < uiDiff)
+        {
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, m_bIsRegularMode ? SPELL_WAIL_OF_SOULS : SPELL_WAIL_OF_SOULS_H);
+            m_uiWailOfSoulsTimer = 5000;
+        }
+        else
+            m_uiWailOfSoulsTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+struct MANGOS_DLL_DECL npc_SoulguardWatchmanAI: public ScriptedAI
+{
+    npc_SoulguardWatchmanAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiShroudOfRunesTimer;
+    uint32 m_uiUnholyRageTimer;
+
+    void Reset()
+    {
+        m_uiShroudOfRunesTimer  = 1000;
+        m_uiUnholyRageTimer     = 1000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (m_uiShroudOfRunesTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_SHROUD_OF_RUNES);
+            m_uiShroudOfRunesTimer = 5000;
+        }
+        else
+            m_uiShroudOfRunesTimer -= uiDiff;
+
+        if (m_uiUnholyRageTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_UNHOLY_RAGE);
+            m_uiUnholyRageTimer = 8000;
+        }
+        else
+            m_uiUnholyRageTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+struct MANGOS_DLL_DECL npc_SoulguardReaperAI: public ScriptedAI
+{
+    npc_SoulguardReaperAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiFrostNovaTimer;
+    uint32 m_uiShadowLanceTimer;
+
+    void Reset()
+    {
+        m_uiFrostNovaTimer      = 8000;
+        m_uiShadowLanceTimer    = 5000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (m_uiFrostNovaTimer < uiDiff)
+        {
+            DoCast(m_creature, m_bIsRegularMode ? SPELL_FROST_NOVA : SPELL_FROST_NOVA_H);
+            m_uiFrostNovaTimer = 9600;
+        }
+        else
+            m_uiFrostNovaTimer -= uiDiff;
+
+        if (m_uiShadowLanceTimer < uiDiff)
+        {
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, SPELL_SHADOW_LANCE);
+            m_uiShadowLanceTimer = 8000;
+        }
+        else
+            m_uiShadowLanceTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+struct MANGOS_DLL_DECL npc_SoulguardBonecasterAI: public ScriptedAI
+{
+    npc_SoulguardBonecasterAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiBoneVolleyTimer;
+    uint32 m_uiRaiseDeadTimer;
+    uint32 m_uiShieldOfBonesTimer;
+
+    void Reset()
+    {
+        m_uiBoneVolleyTimer     = 6000;
+        m_uiRaiseDeadTimer      = 25000;
+        m_uiShieldOfBonesTimer  = 6000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (m_uiBoneVolleyTimer < uiDiff)
+        {
+            DoCast(m_creature, m_bIsRegularMode ? SPELL_BONE_VOLLEY : SPELL_BONE_VOLLEY_H);
+            m_uiBoneVolleyTimer = 7000;
+        }
+        else
+            m_uiBoneVolleyTimer -= uiDiff;
+
+        if (m_uiRaiseDeadTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_RAISE_DEAD);
+            m_uiRaiseDeadTimer = 25000;
+        }
+        else
+            m_uiRaiseDeadTimer -= uiDiff;
+
+        if (m_uiShieldOfBonesTimer < uiDiff)
+        {
+            DoCast(m_creature, m_bIsRegularMode ? SPELL_SHIELD_OF_BONES : SPELL_SHIELD_OF_BONES_H);
+            m_uiShieldOfBonesTimer = 8000;
+        }
+        else
+            m_uiShieldOfBonesTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+struct MANGOS_DLL_DECL npc_SoulguardAnimatorAI: public ScriptedAI
+{
+    npc_SoulguardAnimatorAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiRaiseDeadTimer;
+    uint32 m_uiShadowBoltTimer;
+    uint32 m_uiSoulSicknessTimer;
+    uint32 m_uiSoulSiphonTimer;
+
+    void Reset()
+    {
+        m_uiRaiseDeadTimer      = 25000;
+        m_uiShadowBoltTimer     = 5000;
+        m_uiSoulSicknessTimer   = 8000;
+        m_uiSoulSiphonTimer     = 10000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (m_uiRaiseDeadTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_RAISE_DEAD);
+            m_uiRaiseDeadTimer = 25000;
+        }
+        else
+            m_uiRaiseDeadTimer -= uiDiff;
+
+        if (m_uiShadowBoltTimer < uiDiff)
+        {
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, m_bIsRegularMode ? SPELL_SHADOW_BOLT : SPELL_SHADOW_BOLT_H);
+            m_uiShadowBoltTimer = 5000;
+        }
+        else
+            m_uiShadowBoltTimer -= uiDiff;
+
+        if (m_uiSoulSicknessTimer < uiDiff)
+        {
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, SPELL_SOUL_SICKNESS);
+            m_uiSoulSicknessTimer = 10000;
+        }
+        else
+            m_uiSoulSicknessTimer -= uiDiff;
+
+        if (m_uiSoulSiphonTimer < uiDiff)
+        {
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, SPELL_SOUL_SIPHON);
+            m_uiSoulSiphonTimer = 8000;
+        }
+        else
+            m_uiSoulSiphonTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+struct MANGOS_DLL_DECL npc_SoulguardAdeptAI: public ScriptedAI
+{
+    npc_SoulguardAdeptAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiRaiseDeadTimer;
+    uint32 m_uiShadowBoltTimer;
+    uint32 m_uiDrainLifeTimer;
+    uint32 m_uiShadowMendTimer;
+
+    void Reset()
+    {
+        m_uiRaiseDeadTimer      = 25000;
+        m_uiShadowBoltTimer     = 8000;
+        m_uiDrainLifeTimer      = 7000;
+        m_uiShadowMendTimer     = 35000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (m_uiRaiseDeadTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_RAISE_DEAD);
+            m_uiRaiseDeadTimer = 25000;
+        }
+        else
+            m_uiRaiseDeadTimer -= uiDiff;
+
+        if (m_uiShadowBoltTimer < uiDiff)
+        {
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, m_bIsRegularMode ? SPELL_SHADOW_BOLT : SPELL_SHADOW_BOLT_H);
+            m_uiShadowBoltTimer = 4000;
+        }
+        else
+            m_uiShadowBoltTimer -= uiDiff;
+
+        if (m_uiDrainLifeTimer < uiDiff)
+        {
+            if (Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, m_bIsRegularMode ? SPELL_DRAIN_LIFE : SPELL_DRAIN_LIFE_H);
+            m_uiDrainLifeTimer = 9000;
+        }
+        else
+            m_uiDrainLifeTimer -= uiDiff;
+
+        if (m_uiShadowMendTimer < uiDiff)
+        {
+            DoCast(m_creature, m_bIsRegularMode ? SPELL_SHADOW_MEND : SPELL_SHADOW_MEND_H);
+            m_uiShadowMendTimer = 20000;
+        }
+        else
+            m_uiShadowMendTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+struct MANGOS_DLL_DECL npc_SoulHorrorAI: public ScriptedAI
+{
+    npc_SoulHorrorAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+    bool m_bIsRegularMode;
+
+    uint32 m_uiSoulStrikeTimer;
+
+    void Reset()
+    {
+        m_uiSoulStrikeTimer = 6000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (m_uiSoulStrikeTimer < uiDiff)
+        {
+            DoCast(m_creature->getVictim(), m_bIsRegularMode ? SPELL_SOUL_STRIKE : SPELL_SOUL_STRIKE_H);
+            m_uiSoulStrikeTimer = 8000;
+        }
+        else
+            m_uiSoulStrikeTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+/******** JAINA & SYLVANAS *******/
+
+#define GOSSIP_ITEM_SYLVANAS "What would you have of me, Banshee Queen?"
+#define GOSSIP_ITEM_JAINA "What should we do, Lady Jaina?"
+
+enum
+{
+    SAY_SPEECH_SYLVANAS1                              = -1610009,
+    SAY_SPEECH_SYLVANAS2                              = -1610010,
+    SAY_SPEECH_SYLVANAS3                              = -1610011,
+    SAY_SPEECH_SYLVANAS4                              = -1610012,
+    SAY_SPEECH_SYLVANAS5                              = -1610013,
+    SAY_SPEECH_SYLVANAS6                              = -1610014,
+
+    SAY_SPEECH_JAINA1                              = -1610000,
+    SAY_SPEECH_JAINA2                              = -1610001,
+    SAY_SPEECH_JAINA3                              = -1610002,
+    SAY_SPEECH_JAINA4                              = -1610003,
+    SAY_SPEECH_JAINA5                              = -1610004,
+    SAY_SPEECH_JAINA6                              = -1610005,
+    SAY_SPEECH_JAINA7                              = -1610006,
+    SAY_SPEECH_JAINA8                              = -1610007,
+};
+
+struct MANGOS_DLL_DECL npc_sylvanas_jaina_fos_startAI: public ScriptedAI
+{
+    npc_sylvanas_jaina_fos_startAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        pCreature->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+        Reset();
+    }
+
+    ScriptedInstance* m_pInstance;
+
+    uint32 m_uiSpeech_Timer;
+    uint8 m_uiIntro_Phase;
+    bool m_bIsIntro;
+    uint32 creatureEntry;
+
+    void Reset()
+    {
+        m_uiIntro_Phase     = 0;
+        m_uiSpeech_Timer    = 1000;
+        m_bIsIntro          = false;
+        creatureEntry = m_creature->GetEntry();
+    }
+
+    void StartIntro()
+    {
+        m_bIsIntro = true;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (m_bIsIntro)
+        {
+            if(m_uiSpeech_Timer < uiDiff)
+            {
+                switch(m_uiIntro_Phase)
+                {
+                case 0:
+                    switch (creatureEntry)
+                    {
+                    case NPC_JAINA_START:
+                        DoScriptText(SAY_SPEECH_JAINA1, m_creature);
+                        break;
+                    case NPC_SYLVANAS_START:
+                        DoScriptText(SAY_SPEECH_SYLVANAS1, m_creature);
+                        break;
+                    }
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 12000;
+                    break;
+                case 1:
+                    switch (creatureEntry)
+                    {
+                    case NPC_JAINA_START:
+                        DoScriptText(SAY_SPEECH_JAINA2, m_creature);
+                        break;
+                    case NPC_SYLVANAS_START:
+                        DoScriptText(SAY_SPEECH_SYLVANAS2, m_creature);
+                        break;
+                    }
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 2:
+                    switch (creatureEntry)
+                    {
+                    case NPC_JAINA_START:
+                        DoScriptText(SAY_SPEECH_JAINA3, m_creature);
+                        break;
+                    case NPC_SYLVANAS_START:
+                        DoScriptText(SAY_SPEECH_SYLVANAS3, m_creature);
+                        break;
+                    }
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 3:
+                    switch (creatureEntry)
+                    {
+                    case NPC_JAINA_START:
+                        DoScriptText(SAY_SPEECH_JAINA4, m_creature);
+                        break;
+                    case NPC_SYLVANAS_START:
+                        DoScriptText(SAY_SPEECH_SYLVANAS4, m_creature);
+                        break;
+                    }
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 4:
+                    switch (creatureEntry)
+                    {
+                    case NPC_JAINA_START:
+                        DoScriptText(SAY_SPEECH_JAINA5, m_creature);
+                        break;
+                    case NPC_SYLVANAS_START:
+                        DoScriptText(SAY_SPEECH_SYLVANAS5, m_creature);
+                        break;
+                    }
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 5:
+                    switch (creatureEntry)
+                    {
+                    case NPC_JAINA_START:
+                        DoScriptText(SAY_SPEECH_JAINA6, m_creature);
+                        break;
+                    case NPC_SYLVANAS_START:
+                        DoScriptText(SAY_SPEECH_SYLVANAS6, m_creature);
+                        m_bIsIntro = false;
+                        break;
+                    }
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 12000;
+                    break;
+                case 6:
+                    DoScriptText(SAY_SPEECH_JAINA7, m_creature);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 6000;
+                    break;
+                case 8:
+                    DoScriptText(SAY_SPEECH_JAINA8, m_creature);
+                    ++m_uiIntro_Phase;
+                    m_bIsIntro = false;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+
+                default:
+                    m_uiSpeech_Timer = 100000;
+                }
+            }else m_uiSpeech_Timer -= uiDiff;
+        }
+    }
+};
+
+bool GossipHello_npc_slyvanas_jaina_fos(Player* pPlayer, Creature* pCreature)
+{
+    uint32 creatureEntry;
+    creatureEntry = pCreature->GetEntry();
+
+    if (pCreature->isQuestGiver())
+        pPlayer->PrepareQuestMenu(pCreature->GetGUID());
+
+    switch (creatureEntry)
+    {
+    case NPC_JAINA_START:
+        pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_ITEM_JAINA, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+1);
+        break;
+    case NPC_SYLVANAS_START:
+        pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_ITEM_SYLVANAS, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+1);
+        break;
+    }
+    pPlayer->SEND_GOSSIP_MENU(DEFAULT_GOSSIP_MESSAGE, pCreature->GetGUID());
+    return true;
+}
+
+bool GossipSelect_npc_slyvanas_jaina_fos(Player* pPlayer, Creature* pCreature, uint32 uiSender, uint32 uiAction)
+{
+    switch(uiAction)
+    {
+    case GOSSIP_ACTION_INFO_DEF+1:
+        ((npc_sylvanas_jaina_fos_startAI*)pCreature->AI())->StartIntro();
+        pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+        pPlayer->CLOSE_GOSSIP_MENU();
+    }
+
+    return true;
+}
+
+CreatureAI* GetAI_npc_SpitefulApparitionAI(Creature* pCreature)
+{
+    return new npc_SpitefulApparitionAI (pCreature);
+}
+
+CreatureAI* GetAI_npc_SpectralWardenAI(Creature* pCreature)
+{
+    return new npc_SpectralWardenAI (pCreature);
+}
+
+CreatureAI* GetAI_npc_SoulguardWatchmanAI(Creature* pCreature)
+{
+    return new npc_SoulguardWatchmanAI (pCreature);
+}
+
+CreatureAI* GetAI_npc_SoulguardReaperAI(Creature* pCreature)
+{
+    return new npc_SoulguardReaperAI (pCreature);
+}
+
+CreatureAI* GetAI_npc_SoulguardBonecasterAI(Creature* pCreature)
+{
+    return new npc_SoulguardBonecasterAI (pCreature);
+}
+
+CreatureAI* GetAI_npc_SoulguardAnimatorAI(Creature* pCreature)
+{
+    return new npc_SoulguardAnimatorAI (pCreature);
+}
+
+CreatureAI* GetAI_npc_SoulguardAdeptAI(Creature* pCreature)
+{
+    return new npc_SoulguardAdeptAI (pCreature);
+}
+
+CreatureAI* GetAI_npc_SoulHorrorAI(Creature* pCreature)
+{
+    return new npc_SoulHorrorAI (pCreature);
+}
+
+CreatureAI* GetAI_npc_sylvanas_jaina_fos_start(Creature* pCreature)
+{
+    return new npc_sylvanas_jaina_fos_startAI (pCreature);
+}
+
+void AddSC_Forge_Of_Souls()
+{
+    Script *newscript;
+    newscript = new Script;
+    newscript->Name="npc_SpitefulApparition";
+    newscript->GetAI = &GetAI_npc_SpitefulApparitionAI;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="npc_SpectralWarden";
+    newscript->GetAI = &GetAI_npc_SpectralWardenAI;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="npc_SoulguardWatchman";
+    newscript->GetAI = &GetAI_npc_SoulguardWatchmanAI;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="npc_SoulguardReaper";
+    newscript->GetAI = &GetAI_npc_SoulguardReaperAI;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="npc_SoulguardBonecaster";
+    newscript->GetAI = &GetAI_npc_SoulguardBonecasterAI;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="npc_SoulguardAnimator";
+    newscript->GetAI = &GetAI_npc_SoulguardAnimatorAI;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="npc_SoulguardAdept";
+    newscript->GetAI = &GetAI_npc_SoulguardAdeptAI;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="npc_SoulHorror";
+    newscript->GetAI = &GetAI_npc_SoulHorrorAI;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->GetAI = &GetAI_npc_sylvanas_jaina_fos_start;
+    newscript->Name = "npc_slyvanas_jaina_fos_start";
+    newscript->pGossipHello = &GossipHello_npc_slyvanas_jaina_fos;
+    newscript->pGossipSelect = &GossipSelect_npc_slyvanas_jaina_fos;
+    newscript->RegisterSelf();
+}
\ No newline at end of file
diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h
new file mode 100644
index 0000000..37b7a7a
--- /dev/null
+++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/forge_of_souls.h
@@ -0,0 +1,37 @@
+/* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
+ * This program is free software licensed under GPL version 2
+ * Please see the included DOCS/LICENSE.TXT for more information */
+
+#ifndef DEF_ICECROWN_H
+#define DEF_ICECROWN_H
+
+enum
+{
+    NPC_SLYVANAS_PART1             = 37596,
+    NPC_SLYVANAS_PART2             = 38161,
+    NPC_JAINA_PART1                = 37597,
+    NPC_JAINA_PART2                = 38160,
+    NPC_KALIRA                     = 37583,
+    NPC_LORALEN                    = 37779,
+    NPC_ELANDRA                    = 37774,
+    NPC_KORELN                     = 37582,
+    NPC_CHAMPION_1_HORDE           = 37584,
+    NPC_CHAMPION_2_HORDE           = 37587,
+    NPC_CHAMPION_3_HORDE           = 37588,
+    NPC_CHAMPION_1_ALLIANCE        = 37496,
+    NPC_CHAMPION_2_ALLIANCE        = 37497,
+    NPC_CHAMPION_3_ALLIANCE        = 37498,
+
+    NPC_BRONJAHM                    = 36497,
+    NPC_DEVOURER_OF_SOULS           = 36502,
+
+    NPC_JAINA_START                 = 37597,
+    NPC_JAINA_END                   = 38160,
+    NPC_SYLVANAS_START              = 37596,
+    NPC_SYLVANAS_END                = 38161,
+
+    TYPE_BRONJAHN                 = 1,
+    TYPE_DEVOURER_OF_SOULS        = 2,
+};
+
+#endif
diff --git a/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp
new file mode 100644
index 0000000..dce7966
--- /dev/null
+++ b/scripts/northrend/icecrown_citadel/frozen_halls/forge_of_souls/instance_forge_of_souls.cpp
@@ -0,0 +1,195 @@
+/* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/* ScriptData
+SDName: instance_forge_of_souls
+SD%Complete: 100%
+SDComment:
+SDCategory: The Forge of Souls
+EndScriptData */
+
+#include "precompiled.h"
+#include "forge_of_souls.h"
+
+#define MAX_ENCOUNTER     2
+
+struct MANGOS_DLL_DECL instance_forge_of_souls : public ScriptedInstance
+{
+    instance_forge_of_souls(Map* pMap) : ScriptedInstance(pMap) {Initialize();};
+
+	std::string str_data;
+    uint64 m_uiBronjahn;
+	uint64 m_uiDevourer;
+
+    uint32 m_auiEncounter[MAX_ENCOUNTER];
+
+   void Initialize()
+   {
+        memset(&m_auiEncounter, 0, sizeof(m_auiEncounter));
+
+        m_uiBronjahn = 0;
+		m_uiDevourer = 0;
+    }
+
+    bool IsEncounterInProgress() const
+    {
+        for (uint8 i = 0; i < MAX_ENCOUNTER; ++i)
+            if (m_auiEncounter[i] == IN_PROGRESS) return true;
+
+        return false;
+    }
+
+    void OnCreatureCreate(Creature* pCreature, bool add)
+    {
+        Map::PlayerList const &players = instance->GetPlayers();
+        uint32 TeamInInstance = 0;
+
+        if (!players.isEmpty())
+        {
+            if (Player* pPlayer = players.begin()->getSource())
+                TeamInInstance = pPlayer->GetTeam();
+        }
+
+        switch(pCreature->GetEntry())
+        {
+            case NPC_BRONJAHM:    
+                m_uiBronjahn = pCreature->GetGUID();        
+                break;
+			case NPC_DEVOURER_OF_SOULS:    
+                m_uiDevourer = pCreature->GetGUID();        
+                break;
+            case NPC_SLYVANAS_PART1:
+                if (TeamInInstance == ALLIANCE)
+                   pCreature->UpdateEntry(NPC_JAINA_PART1, ALLIANCE);
+				break;
+            case NPC_KALIRA:
+                if (TeamInInstance == ALLIANCE)
+                   pCreature->UpdateEntry(NPC_ELANDRA, ALLIANCE);
+				break;
+            case NPC_LORALEN:
+                if (TeamInInstance == ALLIANCE)
+                    pCreature->UpdateEntry(NPC_KORELN, ALLIANCE);
+				break;
+            case NPC_CHAMPION_1_HORDE:
+                if (TeamInInstance == ALLIANCE)
+                   pCreature->UpdateEntry(NPC_CHAMPION_1_ALLIANCE, ALLIANCE);
+				break;
+            case NPC_CHAMPION_2_HORDE:
+                if (TeamInInstance == ALLIANCE)
+                   pCreature->UpdateEntry(NPC_CHAMPION_2_ALLIANCE, ALLIANCE);
+				break;
+            case NPC_CHAMPION_3_HORDE: // No 3rd set for Alliance?
+                if (TeamInInstance == ALLIANCE) 
+                   pCreature->UpdateEntry(NPC_CHAMPION_3_ALLIANCE, ALLIANCE);
+				break;
+        }
+    }
+
+    uint64 GetData64(uint32 identifier)
+    {
+        switch(identifier)
+        {
+            case TYPE_BRONJAHN:			    return m_uiBronjahn;
+			case TYPE_DEVOURER_OF_SOULS:    return m_uiDevourer;
+        }
+
+        return 0;
+    }
+
+    void SetData(uint32 type, uint32 data)
+    {
+        switch(type)
+        {
+        case TYPE_BRONJAHN:
+            m_auiEncounter[0] = data; break;
+        case TYPE_DEVOURER_OF_SOULS:
+            m_auiEncounter[1] = data; break;
+        }
+
+        if (data == DONE)
+        {
+            SaveToDB();
+        }
+    }
+
+    uint32 GetData(uint32 type)
+    {
+        switch(type)
+        {
+            case TYPE_BRONJAHN:			    return m_auiEncounter[0];
+			case TYPE_DEVOURER_OF_SOULS:    return m_auiEncounter[1];
+        }
+
+        return 0;
+    }
+
+    std::string GetSaveData()
+    {
+        OUT_SAVE_INST_DATA;
+
+        std::ostringstream saveStream;
+        saveStream << "F S " << m_auiEncounter[0] << " " << m_auiEncounter[1];
+
+        str_data = saveStream.str();
+
+        OUT_SAVE_INST_DATA_COMPLETE;
+        return str_data;
+    }
+
+    void Load(const char* in)
+    {
+        if (!in)
+        {
+            OUT_LOAD_INST_DATA_FAIL;
+            return;
+        }
+
+        OUT_LOAD_INST_DATA(in);
+
+        char dataHead1, dataHead2;
+        uint16 data0, data1, data2, data3;
+
+        std::istringstream loadStream(in);
+        loadStream >> dataHead1 >> dataHead2 >> data0 >> data1 >> data2 >> data3;
+
+        if (dataHead1 == 'F' && dataHead2 == 'S')
+        {
+            m_auiEncounter[0] = data0;
+            m_auiEncounter[1] = data1;
+
+            for (uint8 i = 0; i < MAX_ENCOUNTER; ++i)
+                if (m_auiEncounter[i] == IN_PROGRESS)
+                    m_auiEncounter[i] = NOT_STARTED;
+
+        } else OUT_LOAD_INST_DATA_FAIL;
+
+        OUT_LOAD_INST_DATA_COMPLETE;
+    }
+};
+
+InstanceData* GetInstanceData_instance_forge_of_souls(Map* pMap)
+{
+   return new instance_forge_of_souls(pMap);
+}
+
+void AddSC_instance_forge_of_souls()
+{
+   Script *newscript;
+   newscript = new Script;
+   newscript->Name = "instance_forge_of_souls";
+   newscript->GetInstanceData = &GetInstanceData_instance_forge_of_souls;
+   newscript->RegisterSelf();
+}
diff --git a/sql/Custom_Updates/Mangos/Northrend/ForgeOfSouls_Mangos.sql b/sql/Custom_Updates/Mangos/Northrend/ForgeOfSouls_Mangos.sql
new file mode 100644
index 0000000..c503c5a
--- /dev/null
+++ b/sql/Custom_Updates/Mangos/Northrend/ForgeOfSouls_Mangos.sql
@@ -0,0 +1,19 @@
+/* FORGE OF SOULS */
+-- Trash
+UPDATE `creature_template` SET `ScriptName`='npc_SpitefulApparition' WHERE `entry`=36551;
+UPDATE `creature_template` SET `ScriptName`='npc_SpectralWarden' WHERE `entry`=36666;
+UPDATE `creature_template` SET `ScriptName`='npc_SoulguardWatchman' WHERE `entry`=36478;
+UPDATE `creature_template` SET `ScriptName`='npc_SoulguardReaper' WHERE `entry`=36499;
+UPDATE `creature_template` SET `ScriptName`='npc_SoulguardBonecaster' WHERE `entry`=36564;
+UPDATE `creature_template` SET `ScriptName`='npc_SoulguardAnimator' WHERE `entry`=36516;
+UPDATE `creature_template` SET `ScriptName`='npc_SoulguardAdept' WHERE `entry`=36620;
+UPDATE `creature_template` SET `ScriptName`='npc_SoulHorror' WHERE `entry`=36522;
+-- Boss
+UPDATE `creature_template` SET `ScriptName`='boss_Bronjahn' WHERE `entry`=36497;
+UPDATE `creature_template` SET `ScriptName`='mob_corrupted_soul_fragment' WHERE `entry`=36535;
+UPDATE `creature_template` SET `ScriptName`='boss_Devourer_of_Souls' WHERE `entry`=36502;
+UPDATE `creature_template` SET `ScriptName`='mob_well_of_souls' WHERE `entry`=36536;
+-- Npc
+UPDATE `creature_template` SET `ScriptName`='npc_slyvanas_jaina_fos_start' WHERE `entry` in (37596, 37597);
+UPDATE `creature_template` SET `ScriptName`='npc_slyvanas_jaina_fos_end' WHERE `entry` in (38160, 38161);
+update creature set spawnMask = 0 where id in (37584, 37497, 37496, 37588, 38161, 38160);
\ No newline at end of file
diff --git a/sql/Custom_Updates/ScriptDev2/Northrend/ForgeOfSouls_Script.sql b/sql/Custom_Updates/ScriptDev2/Northrend/ForgeOfSouls_Script.sql
new file mode 100644
index 0000000..ad6edea
--- /dev/null
+++ b/sql/Custom_Updates/ScriptDev2/Northrend/ForgeOfSouls_Script.sql
@@ -0,0 +1,49 @@
+delete from script_texts where entry between -1610300 and -1610000;
+/* FORGE OF SOULS */
+-- Intro:
+-- Jaina
+INSERT INTO `script_texts` VALUES ('-1610000', 'Thank the Light for seeing you here safely. We have much more to do if we are to defeat the Lich King and put an end to the scourge!', null, null, null, null, null, null, null, null, 16617, '1', '0', '0', 'jaina_intro1');
+INSERT INTO `script_texts` VALUES ('-1610001', 'Our allies within the Argent Crusade and The Knights of the Ebon Blade have broken through the front gate of Icecrown and are attempting to establish a foothold within the citadel!', null, null, null, null, null, null, null, null, 16618, '1', '0', '0', 'jaina_intro2');
+INSERT INTO `script_texts` VALUES ('-1610002', 'Their succes hingers on what we discover within these cursed halls. Althou our mission is broght with peril, we must perseveir!', null, null, null, null, null, null, null, null, 16619, '1', '0', '0', 'Jaina_intro3');
+INSERT INTO `script_texts` VALUES ('-1610003', 'With the attention of the Lich King drawn toward the front gate, we will be working our way to the side, and search of information that will enable us to defeat the scourge once and for all!', '', '', null, null, null, null, null, null, 16620, '1', '0', '0', 'jaina_intro4');
+INSERT INTO `script_texts` VALUES ('-1610004', 'King Varian\'s SI:7 agents have gathered information about a private sanctum of the Lich King\'s deep within a place called "The Halls of Reflection"', null, null, null, null, null, null, null, null, 16621, '1', '0', '0', 'jaina_intro5');
+INSERT INTO `script_texts` VALUES ('-1610005', 'We will carve a path through this wrecthed place and find a way to enter the Halls of Reflection. I sense powerfull magic hidden away within those halls. Magic that could be the key to destroying the scourge.', '', null, null, null, null, null, null, null, 16622, '1', '0', '0','jaina_intro6');
+INSERT INTO `script_texts` VALUES ('-1610006', 'Your first mission is to destroy the machines of death within this malevolent engine of souls, and clear a path for our soldiers.', '', null, null, null, null, null, null, null, 16623, '1', '0', '0','jaina_outro7');
+INSERT INTO `script_texts` VALUES ('-1610007', 'Make haste champions! I will prepare the troops to fall in behind you.', '', null, null, null, null, null, null, null, 16624, '1', '0', '0','jaina_intro8');
+INSERT INTO `script_texts` VALUES ('-1610008', 'Excelent work champions! We shall set up our base camp within these chambers. My magi will make the scourge transport device working shortly. Step inside it when you are ready for your next mission. I will meet you on the other side.', '', null, null, null, null, null, null, null, 16625, '1', '0', '0','jaina_outro');
+-- Sylvanas
+INSERT INTO `script_texts` VALUES ('-1610009', 'The Argent Crusade and The Knights of the Ebon Blade have assalted the gates of the Icecrown Citadel, and are preparing for a massive attack upon the scourge. Our mission is a bit more suddle, but equaly as important.', null, null, null, null, null, null, null, null, 17038, '1', '0', '0', 'sylvanas_intro1');
+INSERT INTO `script_texts` VALUES ('-1610010', 'With the attention of the Lich King turn towards the front gate, we will be working our way to the side, in search of information that will enable us to defeat him. Once and for all!', null, null, null, null, null, null, null, null, 17039, '1', '0', '0', 'sylvanas_intro2');
+INSERT INTO `script_texts` VALUES ('-1610011', 'Our scouts have reported that the Lick KIng has a private chamber outside the Frozen Throne, deep within a place called "The Halls of Reflection". That is our target champions!', null, null, null, null, null, null, null, null, 17040, '1', '0', '0', 'sylvanas_intro3');
+INSERT INTO `script_texts` VALUES ('-1610012', 'We will cut a swat of destruction through this cursed place, and find a way to enter the Halls of Reflection. If there is anything of value to be find here, it will be found in the halls.', '', '', null, null, null, null, null, null, 17041, '1', '0', '0', 'sylvanas_intro4');
+INSERT INTO `script_texts` VALUES ('-1610013', 'Your first mission is to destroy the machines of death within this wretched engine of souls, and clear a path for our soldiers!', null, null, null, null, null, null, null, null, 17042, '1', '0', '0', 'sylvanas_intro5');
+INSERT INTO `script_texts` VALUES ('-1610014', 'The Dark Lady watches over you! Make haste!', '', null, null, null, null, null, null, null, 17043, '1', '0', '0','sylvanas_intro6');
+INSERT INTO `script_texts` VALUES ('-1610015', 'Excelent work champions! We shall set up our base camp within these chambers. My magi will make the scourge transport device working shortly. Step inside it when you are ready for your next mission. I will meet you on the other side.', '', null, null, null, null, null, null, null, 17044, '1', '0', '0','sylvanas_outro');
+-- Bronjahm
+INSERT INTO `script_texts` VALUES ('-1610016', 'More souls to power the engine!', null, null, null, null, null, null, null, null, 16595, '1', '0', '0', 'Bronjahn - Aggro1');
+INSERT INTO `script_texts` VALUES ('-1610017', 'Finally...a captive audience!', null, null, null, null, null, null, null, null, 16595, '1', '0', '0', 'Bronjahn - Aggro2');
+INSERT INTO `script_texts` VALUES ('-1610018', 'The vortex of the harvested calls to you!', null, null, null, null, null, null, null, null, 16599, '1', '0', '0', 'Bronjahn - Soulstorm');
+INSERT INTO `script_texts` VALUES ('-1610019', 'Another soul to strengthen the host!', '', '', null, null, null, null, null, null, 16596, '1', '0', '0', 'slay1');
+INSERT INTO `script_texts` VALUES ('-1610020', 'Fodder for the engine!', null, null, null, null, null, null, null, null, 16597, '1', '0', '0', 'Bronjahn - Slay2');
+INSERT INTO `script_texts` VALUES ('-1610021', 'I will sever the soul from your body!', '', null, null, null, null, null, null, null, 16600, '1', '0', '0','corrupt soul');
+INSERT INTO `script_texts` VALUES ('-1610022', 'My soul for you, master.', '', null, null, null, null, null, null, null, 16598, '1', '0', '0','death');
+-- Devourer of Souls
+INSERT INTO `script_texts` VALUES ('-1610023', 'Devourer of Souls begins to cast Mirrored Soul!', null, null, null, null, null, null, null, null, '0', '3', '0', '0', 'Mirrored Soul');
+INSERT INTO `script_texts` VALUES ('-1610024', 'Devourer of Souls begins to cast Wailing Souls!', null, null, null, null, null, null, null, null, '0', '3', '0', '0', 'Wailing Souls');
+INSERT INTO `script_texts` VALUES ('-1610025', 'Devourer of Souls begins to Unleash Souls!', '', '', '', '', '', '', '', '', '0', '3', '0', '0', 'Unleash Souls');
+INSERT INTO `script_texts` VALUES ('-1610026', 'You dare look upon the host of souls?! I SHALL DEVOUR YOU WHOLE!', null, null, null, null, null, null, null, null, 16890, '1', '0', '0', 'famale_aggro');
+INSERT INTO `script_texts` VALUES ('-1610027', 'Stare into the abyss, and see your end!', null, null, null, null, null, null, null, null, 16895, '1', '0', '0', 'female_Wailing Souls');
+INSERT INTO `script_texts` VALUES ('-1610028', 'SUFFERING! ANGUISH! CHAOS! RISE AND FEED!', '', '', '', '', '', '', '', '', 16894, '1', '0', '0', 'female_Unleash Souls');
+INSERT INTO `script_texts` VALUES ('-1610029', 'Damnation!', null, null, null, null, null, null, null, null, 16891, '1', '0', '0', 'female_slay1');
+INSERT INTO `script_texts` VALUES ('-1610030', 'Doomed for eternity!', null, null, null, null, null, null, null, null, 16892, '1', '0', '0', 'female_slay2');
+INSERT INTO `script_texts` VALUES ('-1610031', 'The swell of souls will not be abated! You only delay the inevitable!', null, null, null, null, null, null, null, null, 16893, '1', '0', '0', 'female_death');
+INSERT INTO `script_texts` VALUES ('-1610032', 'You dare look upon the host of souls?! I SHALL DEVOUR YOU WHOLE!', null, null, null, null, null, null, null, null, 16884, '1', '0', '0', 'male1_aggro');
+INSERT INTO `script_texts` VALUES ('-1610033', 'Stare into the abyss, and see your end!', null, null, null, null, null, null, null, null, 16889, '1', '0', '0', 'male1_Wailing Souls');
+INSERT INTO `script_texts` VALUES ('-1610034', 'SUFFERING! ANGUISH! CHAOS! RISE AND FEED!', '', '', '', '', '', '', '', '', 16888, '1', '0', '0', 'male1_Unleash Souls');
+INSERT INTO `script_texts` VALUES ('-1610035', 'Damnation!', null, null, null, null, null, null, null, null, 16885, '1', '0', '0', 'male1_slay1');
+INSERT INTO `script_texts` VALUES ('-1610036', 'Doomed for eternity!', null, null, null, null, null, null, null, null, 16886, '1', '0', '0', 'male1_slay2');
+INSERT INTO `script_texts` VALUES ('-1610037', 'The swell of souls will not be abated! You only delay the inevitable!', null, null, null, null, null, null, null, null, 16887, '1', '0', '0', 'male1_death');
+INSERT INTO `script_texts` VALUES ('-1610038', 'SUFFERING! ANGUISH! CHAOS! RISE AND FEED!', '', '', '', '', '', '', '', '', 16899, '1', '0', '0', 'male2_Unleash Souls');
+INSERT INTO `script_texts` VALUES ('-1610039', 'Damnation!', null, null, null, null, null, null, null, null, 16896, '1', '0', '0', 'male2_slay1');
+INSERT INTO `script_texts` VALUES ('-1610040', 'Doomed for eternity!', null, null, null, null, null, null, null, null, 16897, '1', '0', '0', 'male2_slay2');
+INSERT INTO `script_texts` VALUES ('-1610041', 'The swell of souls will not be abated! You only delay the inevitable!', null, null, null, null, null, null, null, null, 16898, '1', '0', '0', 'male2_death');
diff --git a/system/ScriptLoader.cpp b/system/ScriptLoader.cpp
index 53e496d..72e694d 100644
--- a/system/ScriptLoader.cpp
+++ b/system/ScriptLoader.cpp
@@ -275,6 +275,10 @@ extern void AddSC_boss_galdarah();
 extern void AddSC_boss_moorabi();
 extern void AddSC_boss_sladran();
 extern void AddSC_instance_gundrak();
+extern void AddSC_boss_Bronjahn();                          //icecrown citadel - frozen halls - forge of souls
+extern void AddSC_boss_Devourer_Of_Souls();
+extern void AddSC_Forge_Of_Souls();                         
+extern void AddSC_instance_forge_of_souls();
 extern void AddSC_boss_anubrekhan();                        //naxxramas
 extern void AddSC_boss_four_horsemen();
 extern void AddSC_boss_faerlina();
