diff --git a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_anubarak_trial.cpp b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_anubarak_trial.cpp
index 55fd5d8..d3cfe4d 100644
--- a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_anubarak_trial.cpp
+++ b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_anubarak_trial.cpp
@@ -24,33 +24,194 @@ EndScriptData */
 #include "precompiled.h"
 #include "trial_of_the_crusader.h"
 
+enum
+{
+    SAY_INTRO       = -1605076,
+    SAY_AGGRO       = -1605067,
+    SAY_SUBMERGE    = -1605068,
+    SAY_SWARM       = -1605069,
+    SAY_SLAY1       = -1605070,
+    SAY_SLAY2       = -1605071,
+    SAY_DEATH       = -1605072,
+    SAY_BERSERK     = -1605073,
+    SAY_OUTRO       = -1605074,
+
+    SPELL_FREEZING_SLASH        = 66012,
+    SPELL_PENETRATING_COLD_10   = 68509,
+    SPELL_PENETRATING_COLD_25   = 67700,
+
+    SPELL_PURSUING_SPIKES       = 65922,
+    SPELL_PURSUED_BY_ANUB       = 67574,
+    SPELL_IMPALE_10             = 67858,
+    SPELL_IMPALE_25             = 67859,
+
+    NPC_SPIKE                   = 34660,
+
+    SPELL_LEECHING_SWARM_10     = 67630,
+    SPELL_LEECHING_SWARM_25     = 66118,
+    SPELL_LEECHING_SWARM_10HC   = 68646,
+    SPELL_LEECHING_SWARM_25HC   = 68647,
+    SPELL_LEECHING_SWARM_DUMMY  = 66240,
+    SPELL_LEECHING_SWARM_HEAL   = 66125,
+
+    NPC_FROST_SPHERE            = 34606,
+    SPELL_PERMAFROST            = 66193,
+
+    NPC_NERUBIAN_BURROWER       = 34607,
+    SPELL_SPIDER_FRENZY         = 66129,
+    SPELL_SPIDER_FRENZY_TRIG    = 66128,
+    SPELL_EXPOSE_WEAKNESS       = 67847,
+    SPELL_SUBMERGE              = 67322,
+    SPELL_SHADOW_STRIKE         = 66134,
+
+    NPC_SWARM_SCARAB            = 34605,
+    SPELL_ACIC_MANDIBLES        = 67861,
+    SPELL_DETERMINATION         = 66092,
+
+    SPELL_BERSERK               = 26662,
+    SPELL_SUBMERGE_ANUB         = 53421,
+};
+
+struct LocationsXY
+{
+    float x, y;
+    uint32 id;
+};
+static LocationsXY AnubLoc[]=
+{
+    {693.561f, 188.314f}, 
+    {686.165f,  97.553f},  
+    {734.034f, 191.537f},
+    {731.950f, 75.8964f},
+};
+
+#define LOC_Z           142.12f
+
+#define HOME_X          786.746f
+#define HOME_Y          133.428f  
+
 struct MANGOS_DLL_DECL boss_anubarak_trialAI : public ScriptedAI
 {
     boss_anubarak_trialAI(Creature* pCreature) : ScriptedAI(pCreature)
     {
         m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        m_bHasTaunted = false;
         Reset();
     }
 
     ScriptedInstance* m_pInstance;
 
-    void Reset() {}
+    uint8 Difficulty;
+
+    bool m_bIsPhase3;
+    bool m_bStopSummoning;
+    uint8 m_uiPhase;
+
+    uint32 m_uiFreezingSlashTimer;
+    uint32 m_uiPenetratingColdTimer;
+    uint32 m_uiPursuingSpikesTimer;
+    uint32 m_uiPhaseTimer;
+    uint32 m_uiFrostSphereTimer;
+    uint32 m_uiBorrowerTimer;
+    uint32 m_uiScarabTimer;
+
+    uint32 SwarmDamage;
+    uint32 SwarmDamageTotal;
+    uint32 SwarmTickTimer;
+    uint32 SwarmDamagePercent;
+
+    bool m_bHasTaunted;
+
+    uint32 m_uiBerserkTimer;
+    uint32 m_uiWipeCheckTimer;
+
+    std::list<Creature*> lSpheres;
+
+    void Reset() 
+    {
+        m_bIsPhase3         = false;
+        m_bStopSummoning    = false;
+        m_uiPhase           = 0;
+
+        m_uiFreezingSlashTimer      = 20000 + rand()%5000;
+        m_uiPenetratingColdTimer    = 10000;
+        m_uiPursuingSpikesTimer     = 30000;
+        m_uiPhaseTimer              = 90000;
+        m_uiFrostSphereTimer        = 30000;
+        m_uiBorrowerTimer           = 10000;
+        m_uiScarabTimer             = 5000;
+        SwarmTickTimer              = 3000;
+
+        m_uiBerserkTimer    = 600000;  // 10 min
+
+        m_creature->SetVisibility(VISIBILITY_ON);
+
+        lSpheres.clear();
+    }
+
+    void KilledUnit(Unit* pVictim)
+    {
+        switch(urand(0, 1))
+        {
+        case 0: DoScriptText(SAY_SLAY1, m_creature); break;
+        case 1: DoScriptText(SAY_SLAY2, m_creature); break;
+        }
+    }
 
     void JustReachedHome()
     {
         if (m_pInstance)
+        {
             m_pInstance->SetData(TYPE_ANUBARAK, NOT_STARTED);
+            if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            {
+                m_pInstance->SetData(TYPE_COUNTER, m_pInstance->GetData(TYPE_COUNTER) - 1);
+                m_pInstance->DoUpdateWorldState(UPDATE_STATE_UI_COUNT, m_pInstance->GetData(TYPE_COUNTER));
+            }
+        }
     }
 
     void JustDied(Unit* pKiller)
     {
         if (m_pInstance)
             m_pInstance->SetData(TYPE_ANUBARAK, DONE);
+
+        DoScriptText(SAY_DEATH, m_creature);
+        if(Creature* pTirion = m_creature->SummonCreature(NPC_TIRION_END, 679.531f, 142.507f, 142.129f, 0, TEMPSUMMON_TIMED_DESPAWN, 600000))
+            DoScriptText(SAY_OUTRO, pTirion);
+
+        GetCreatureListWithEntryInGrid(lSpheres, m_creature, NPC_FROST_SPHERE, DEFAULT_VISIBILITY_INSTANCE);
+
+        if (!lSpheres.empty())
+        {
+            for(std::list<Creature*>::iterator iter = lSpheres.begin(); iter != lSpheres.end(); ++iter)
+            {
+                if ((*iter) && !(*iter)->isAlive())
+                    (*iter)->ForcedDespawn();
+            }
+        }
     }
 
     void Aggro(Unit* pWho)
     {
         m_creature->SetInCombatWithZone();
+        DoScriptText(SAY_AGGRO, m_creature);
+        if (m_pInstance)
+            m_pInstance->SetData(TYPE_ANUBARAK, IN_PROGRESS);
+
+        m_uiWipeCheckTimer = 30000;
+    }
+
+    void MoveInLineOfSight(Unit *who)
+    {
+        if (!m_bHasTaunted)
+        {
+            DoScriptText(SAY_INTRO, m_creature);
+            m_bHasTaunted = true;
+        }
+
+        ScriptedAI::MoveInLineOfSight(who);   
     }
 
     void UpdateAI(const uint32 uiDiff)
@@ -58,6 +219,197 @@ struct MANGOS_DLL_DECL boss_anubarak_trialAI : public ScriptedAI
         if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
             return;
 
+        if(m_uiPhase == 0)
+        {
+            // spells
+            if (m_uiFreezingSlashTimer < uiDiff && !m_bIsPhase3)
+            {
+                if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                    DoCast(pTarget, SPELL_FREEZING_SLASH);
+
+                m_uiFreezingSlashTimer = 20000 + rand()%5000;
+            }
+            else
+                m_uiFreezingSlashTimer -= uiDiff;
+
+            if (m_uiPenetratingColdTimer < uiDiff)
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL || Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature, SPELL_PENETRATING_COLD_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature, SPELL_PENETRATING_COLD_25);
+                m_uiPenetratingColdTimer = urand(20000, 25000);
+            }
+            else
+                m_uiPenetratingColdTimer -= uiDiff;
+
+            if (m_uiBorrowerTimer < uiDiff && !m_bStopSummoning)
+            {
+                uint8 i = urand(0, 2);
+                if(Creature *pTemp = m_creature->SummonCreature(NPC_NERUBIAN_BURROWER, AnubLoc[i].x, AnubLoc[i].y, LOC_Z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 30000))
+                    pTemp->SetInCombatWithZone();
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                {
+                    if(Creature *pTemp = m_creature->SummonCreature(NPC_NERUBIAN_BURROWER, AnubLoc[i+1].x, AnubLoc[i+1].y, LOC_Z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 30000))
+                        pTemp->SetInCombatWithZone();
+                }
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    for(uint8 j = 0; j < 2; j++)
+                    {
+                        if(Creature *pTemp = m_creature->SummonCreature(NPC_NERUBIAN_BURROWER, AnubLoc[j+2].x, AnubLoc[j+2].y, LOC_Z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 30000))
+                            pTemp->SetInCombatWithZone();
+                    }
+                }
+                m_uiBorrowerTimer = 50000 + urand(1000, 10000);
+            }
+            else
+                m_uiBorrowerTimer -= uiDiff;
+
+            if (m_uiFrostSphereTimer < uiDiff)
+            {
+                if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                    m_creature->SummonCreature(NPC_FROST_SPHERE, pTarget->GetPositionX(), pTarget->GetPositionY(), pTarget->GetPositionZ(), 0, TEMPSUMMON_DEAD_DESPAWN, 30000);
+                m_uiFrostSphereTimer = 20000;
+            }
+            else
+                m_uiFrostSphereTimer -= uiDiff;
+
+            if (m_uiPhaseTimer < uiDiff && !m_bIsPhase3)
+            {
+                m_uiPhase = 1;
+                DoCast(m_creature, SPELL_SUBMERGE_ANUB);
+                DoScriptText(SAY_SUBMERGE, m_creature);
+                m_uiScarabTimer = 10000;
+                m_creature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE|UNIT_FLAG_NOT_SELECTABLE);
+                m_uiPhaseTimer = 60000;
+            }
+            else
+                m_uiPhaseTimer -= uiDiff;
+
+            if(m_creature->GetHealthPercent() < 30.0f && !m_bIsPhase3)
+            {
+                DoScriptText(SAY_SWARM, m_creature);
+
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                {
+                    DoCast(m_creature, SPELL_LEECHING_SWARM_10);
+                    SwarmDamagePercent = 10;
+                }
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                {
+                    DoCast(m_creature, SPELL_LEECHING_SWARM_25);
+                    SwarmDamagePercent = 10;
+                }
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                {
+                    DoCast(m_creature, SPELL_LEECHING_SWARM_10HC);
+                    SwarmDamagePercent = 20;
+                }
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    DoCast(m_creature, SPELL_LEECHING_SWARM_25HC);
+                    SwarmDamagePercent = 30;
+                }
+
+                m_bIsPhase3 = true;
+                // stop summoning in not on Hc
+                if(Difficulty != RAID_DIFFICULTY_10MAN_HEROIC || Difficulty != RAID_DIFFICULTY_25MAN_HEROIC)
+                    m_bStopSummoning = true;
+
+                // workaround for leeching swarm
+                /*if(SwarmTickTimer < uiDiff)
+                {
+                    SwarmDamageTotal = 0;
+                    Unit *plr = NULL;
+                    ThreatList const& tList = m_creature->getThreatManager().getThreatList();
+                    for(ThreatList::const_iterator i = tList.begin(); i!=tList.end(); ++i)
+                    {
+                        plr = Unit::GetUnit((*m_creature),(*i)->getUnitGuid());
+                        if(plr && plr->isAlive())
+                        {
+                            SwarmDamage = plr->GetHealth() / SwarmDamagePercent;
+                            if(SwarmDamage < 250) 
+                                SwarmDamage = 250;
+                            SwarmDamageTotal += SwarmDamage;
+                            m_creature->DealDamage(plr, SwarmDamage, NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+                        }
+                    }
+                    m_creature->DealHeal(m_creature, SwarmDamageTotal, NULL);
+                    SwarmTickTimer = 1000;
+                }
+                else SwarmTickTimer -= uiDiff;*/
+            }
+
+            DoMeleeAttackIfReady();
+        }
+        // submerged
+        if(m_uiPhase == 1)
+        {
+            if (m_uiPhaseTimer < uiDiff)
+            {
+                m_uiPhase = 0;
+                m_creature->RemoveAurasDueToSpell(SPELL_SUBMERGE_ANUB);
+                //m_creature->SetVisibility(VISIBILITY_ON);
+                m_creature->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE|UNIT_FLAG_NOT_SELECTABLE);
+                m_uiBorrowerTimer           = 10000;
+                m_uiFreezingSlashTimer      = 20000 + rand()%5000;
+                m_uiPenetratingColdTimer    = 10000;
+                m_uiFrostSphereTimer        = 30000;
+                m_uiPhaseTimer              = 90000;
+            }
+            else
+                m_uiPhaseTimer -= uiDiff;
+
+            if (m_uiPursuingSpikesTimer < uiDiff)
+            {
+                if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                {
+                    DoCast(pTarget, SPELL_PURSUED_BY_ANUB);
+                    //DoCast(pTarget, SPELL_PURSUING_SPIKES);
+                    if((Difficulty == RAID_DIFFICULTY_10MAN_NORMAL || Difficulty == RAID_DIFFICULTY_10MAN_HEROIC) && !pTarget->HasAura(SPELL_PERMAFROST, EFFECT_INDEX_0))
+                        DoCast(pTarget, SPELL_IMPALE_10);
+                    if((Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC) && !pTarget->HasAura(SPELL_PERMAFROST, EFFECT_INDEX_0))
+                        DoCast(pTarget, SPELL_IMPALE_25);
+
+                    // Fix this!
+                    /*if(Creature* pSpike = m_creature->SummonCreature(NPC_SPIKE, m_creature->GetPositionX(), m_creature->GetPositionY(), m_creature->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN, 30000))
+                    {
+                        pSpike->AddThreat(pTarget, 1000.0f);
+                        pSpike->GetMotionMaster()->MoveChase(pTarget);
+                    }*/
+                }
+                m_uiPursuingSpikesTimer = 20000;
+            }
+            else
+                m_uiPursuingSpikesTimer -= uiDiff;
+
+            if (m_uiScarabTimer < uiDiff)
+            {
+                uint8 i = urand(0, 2);
+                if(Creature *pTemp = m_creature->SummonCreature(NPC_SWARM_SCARAB, AnubLoc[i].x, AnubLoc[i].y, LOC_Z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 30000))
+                    pTemp->SetInCombatWithZone();
+                if(Creature *pTemp = m_creature->SummonCreature(NPC_SWARM_SCARAB, AnubLoc[i+1].x, AnubLoc[i+1].y, LOC_Z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 30000))
+                    pTemp->SetInCombatWithZone();
+                m_uiScarabTimer = 40000;
+            }
+            else
+                m_uiScarabTimer -= uiDiff;
+        }
+
+        // berserk
+        if (m_uiBerserkTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_BERSERK);
+            DoScriptText(SAY_BERSERK, m_creature);
+            m_uiBerserkTimer = 60000;
+        }
+        else
+            m_uiBerserkTimer -= uiDiff;
+
+        if (m_creature->GetDistance2d(HOME_X, HOME_Y) > 80)
+            EnterEvadeMode();
+
         DoMeleeAttackIfReady();
     }
 };
@@ -67,6 +419,211 @@ CreatureAI* GetAI_boss_anubarak_trial(Creature* pCreature)
     return new boss_anubarak_trialAI(pCreature);
 }
 
+struct MANGOS_DLL_DECL mob_frost_sphereAI : public ScriptedAI
+{
+    mob_frost_sphereAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        SetCombatMovement(false);
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+
+    uint32 spellTimer;
+
+    void Reset()
+    {
+        spellTimer = 10000;
+    }
+
+    void DamageTaken(Unit *done_by, uint32 &uiDamage)
+    {
+        if(uiDamage > m_creature->GetHealth() && GetClosestCreatureWithEntry(m_creature, NPC_ANUBARAK, 150.0f))
+        {
+            uiDamage = 0;
+            DoCast(m_creature, SPELL_PERMAFROST);
+            spellTimer = 1000;
+            m_creature->SetHealth(0);
+            m_creature->SetStandState(UNIT_STAND_STATE_DEAD);
+        }
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (m_pInstance && m_pInstance->GetData(TYPE_ANUBARAK) != IN_PROGRESS) 
+            m_creature->ForcedDespawn();
+
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        /*
+        if (spellTimer < uiDiff)
+        {
+        m_creature->DealDamage(m_creature, m_creature->GetHealth(), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+        spellTimer = 10000;
+        }else spellTimer -= uiDiff;
+        */
+    }
+};
+
+CreatureAI* GetAI_mob_frost_sphere(Creature* pCreature)
+{
+    return new mob_frost_sphereAI (pCreature);
+}
+
+struct MANGOS_DLL_DECL mob_nerubian_burrowerAI : public ScriptedAI
+{
+    mob_nerubian_burrowerAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+
+    uint32 spellTimer;
+    uint32 checkTimer;
+    uint32 submergeTimer;
+    bool isSubmerged;
+
+    std::list<Creature*> lBorrower;
+    uint8 m_uiBorrowerCount;
+
+    void Reset()
+    {
+        spellTimer = 7000;
+        checkTimer = 1000;
+        isSubmerged = false;
+        lBorrower.clear();
+        m_uiBorrowerCount = 0;
+        DoCast(m_creature, SPELL_SPIDER_FRENZY);
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (m_pInstance && m_pInstance->GetData(TYPE_ANUBARAK) != IN_PROGRESS) 
+            m_creature->ForcedDespawn();
+
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if(m_creature->GetHealthPercent() < 30.0f && !isSubmerged)
+        {
+            if(!m_creature->HasAura(SPELL_PERMAFROST, EFFECT_INDEX_0))
+            {
+                DoCast(m_creature, SPELL_SUBMERGE_ANUB);
+                m_creature->DeleteThreatList();
+                m_creature->SetHealth(m_creature->GetMaxHealth()/2);
+                submergeTimer = 10000;
+                isSubmerged = true;
+                m_creature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE|UNIT_FLAG_NOT_SELECTABLE);
+            }
+        }
+
+        if (spellTimer < uiDiff)
+        {
+            if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                DoCast(pTarget, SPELL_EXPOSE_WEAKNESS);
+            spellTimer = 10000;
+        }else spellTimer -= uiDiff;
+
+        /*if (checkTimer < uiDiff)
+        {
+            GetCreatureListWithEntryInGrid(lBorrower, m_creature, NPC_NERUBIAN_BURROWER, DEFAULT_VISIBILITY_INSTANCE);
+            if(!lBorrower.empty())
+                m_uiBorrowerCount = lBorrower.size();
+            
+            if(m_uiBorrowerCount > 0)
+                m_creature->GetAura(SPELL_SPIDER_FRENZY, EFFECT_INDEX_0)->SetStackAmount(m_uiBorrowerCount);
+            checkTimer = 1000;
+        }else checkTimer -= uiDiff;*/
+
+        if (submergeTimer < uiDiff && isSubmerged)
+        {
+            if (m_creature->HasAura(SPELL_SUBMERGE_ANUB, EFFECT_INDEX_0))
+            {
+                m_creature->RemoveAurasDueToSpell(SPELL_SUBMERGE_ANUB);
+                m_creature->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE|UNIT_FLAG_NOT_SELECTABLE);
+            }
+            isSubmerged = false;
+            submergeTimer = 1000;
+        }else submergeTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+CreatureAI* GetAI_mob_nerubian_burrower(Creature* pCreature)
+{
+    return new mob_nerubian_burrowerAI (pCreature);
+}
+
+struct MANGOS_DLL_DECL mob_swarm_scarabAI : public ScriptedAI
+{
+    mob_swarm_scarabAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+
+    uint32 spellTimer;
+
+    void Reset()
+    {
+        spellTimer = 10000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (m_pInstance && m_pInstance->GetData(TYPE_ANUBARAK) != IN_PROGRESS) 
+            m_creature->ForcedDespawn();
+
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (spellTimer < uiDiff)
+        {
+            switch(urand(0, 1))
+            {
+            case 0:
+                DoCast(m_creature, SPELL_DETERMINATION);
+                break;
+            case 1:
+                if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                    DoCast(pTarget, SPELL_ACIC_MANDIBLES);
+                break;
+            }
+            spellTimer = 10000;
+        }else spellTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+CreatureAI* GetAI_mob_swarm_scarab(Creature* pCreature)
+{
+    return new mob_swarm_scarabAI (pCreature);
+}
+
+bool GossipHello_npc_tirion_end(Player* pPlayer, Creature* pCreature)
+{
+
+    pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, "Teleport me to the surface", GOSSIP_SENDER_MAIN,GOSSIP_ACTION_INFO_DEF+1);
+    pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());
+    return true;
+}
+
+bool GossipSelect_npc_tirion_end(Player* pPlayer, Creature* pCreature, uint32 uiSender, uint32 uiAction)
+{
+    pPlayer->CLOSE_GOSSIP_MENU();
+    if(uiAction == GOSSIP_ACTION_INFO_DEF+1)
+        pPlayer->TeleportTo(571, 8516.319f, 634.558f, 547.393f, 1.62f);
+    return true;
+}
+
 void AddSC_boss_anubarak_trial()
 {
     Script* newscript;
@@ -75,4 +632,25 @@ void AddSC_boss_anubarak_trial()
     newscript->Name = "boss_anubarak_trial";
     newscript->GetAI = &GetAI_boss_anubarak_trial;
     newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "mob_frost_sphere";
+    newscript->GetAI = &GetAI_mob_frost_sphere;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "mob_nerubian_burrower";
+    newscript->GetAI = &GetAI_mob_nerubian_burrower;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "mob_swarm_scarab";
+    newscript->GetAI = &GetAI_mob_swarm_scarab;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "npc_tirion_end";
+    newscript->pGossipHello = &GossipHello_npc_tirion_end;
+    newscript->pGossipSelect = &GossipSelect_npc_tirion_end;
+    newscript->RegisterSelf();
 }
\ No newline at end of file
diff --git a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_faction_champions.cpp b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_faction_champions.cpp
index bb9d39e..65b3612 100644
--- a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_faction_champions.cpp
+++ b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_faction_champions.cpp
@@ -23,3 +23,2692 @@ EndScriptData */
 
 #include "precompiled.h"
 #include "trial_of_the_crusader.h"
+
+enum
+{
+    // the slay are said by varian
+    SAY_SLAY1_HORDE         = -1605043,
+    SAY_SLAY2_HORDE         = -1605044,
+    SAY_SLAY3_HORDE         = -1605045, 
+    SAY_SLAY4_HORDE         = -1605046,
+    SAY_VICTORY_HORDE       = -1605042,
+
+    // the slay are said by gorrash
+    SAY_SLAY1_ALY           = -1605033,
+    SAY_SLAY2_ALY           = -1605034,
+    SAY_SLAY3_ALY           = -1605035,
+    SAY_SLAY4_ALY           = -1605036,
+    SAY_VICTORY_ALY         = -1605032,
+
+
+    // common spells
+    SPELL_PVP_TRINKET           = 65547,
+    SPELL_CHAMPIONS_AEGIS       = 68595,
+
+    // priest discipline + shadow
+    SPELL_DISPEL_MAGIC          = 68624,
+
+    // druid balande + resto
+    SPELL_BARKSKIN              = 65860,
+
+    // shaman enhancement + resto
+    SPELL_EARTH_SHOCK_10        = 65973,
+    SPELL_EARTH_SHOCK_10HC      = 68101,
+    SPELL_EARTH_SHOCK_25        = 68100,
+    SPELL_EARTH_SHOCK_25HC      = 68102,
+    SPELL_HEROISM               = 65983,
+
+    // paladin holy + retri
+    SPELL_DIVINE_SHIELD         = 66010,  
+};
+
+enum AI
+{
+    AI_MELEE    = 0,
+    AI_RANGED   = 1,
+    AI_HEALER   = 2,
+};
+
+struct MANGOS_DLL_DECL boss_faction_championAI : public ScriptedAI
+{
+    boss_faction_championAI(Creature *pCreature, uint32 aitype) : ScriptedAI(pCreature) 
+    {
+        m_pInstance = (ScriptedInstance *) pCreature->GetInstanceData();
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        mAIType = aitype;
+        Init();
+    }
+    
+    ScriptedInstance *m_pInstance;
+    uint8 Difficulty;
+    uint32 mAIType;
+    
+    uint32 ThreatTimer;
+    uint32 CCTimer;
+
+    uint32 TeamInInstance;
+
+    void Init()
+    {
+        CCTimer = rand()%10000;
+        ThreatTimer = 5000;
+
+        TeamInInstance = GetFaction();
+    }
+    
+    float CalculateThreat(float distance, float armor, uint32 health)
+    {
+        float dist_mod = (mAIType == AI_MELEE) ? 15.0f/(15.0f + distance) : 1.0f;
+        float armor_mod = (mAIType == AI_MELEE) ? armor / 16635.0f : 0.0f;
+        float eh = (health+1) * (1.0f + armor_mod);
+        return dist_mod * 30000.0f / eh;
+    }
+
+    void KilledUnit(Unit* pVictim)
+    {
+        if(TeamInInstance == HORDE)
+        {
+            if(Creature *Varian = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_VARIAN)))
+            {
+                switch(urand(0, 2))
+                {
+                case 0: DoScriptText(SAY_SLAY1_HORDE, Varian); break;
+                case 1: DoScriptText(SAY_SLAY2_HORDE, Varian); break;
+                case 2: DoScriptText(SAY_SLAY3_HORDE, Varian); break;
+                }
+            }
+        }
+        else if(TeamInInstance == ALLIANCE)
+        {
+            if(Creature *Garrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+            {
+                switch(urand(0, 2))
+                {
+                case 0: DoScriptText(SAY_SLAY1_ALY, Garrosh); break;
+                case 1: DoScriptText(SAY_SLAY2_ALY, Garrosh); break;
+                case 2: DoScriptText(SAY_SLAY3_ALY, Garrosh); break;
+                }
+            }
+        }
+    }
+
+    uint32 GetFaction()
+    {
+        uint32 faction = 0;
+        Map *map = m_creature->GetMap();
+        if (map->IsDungeon())
+        {
+            Map::PlayerList const &PlayerList = map->GetPlayers();
+
+            if (!PlayerList.isEmpty())
+            {
+                if (Player* pPlayer = PlayerList.begin()->getSource())
+                    faction = pPlayer->GetTeam();
+            }
+        }
+        return faction;
+    }
+    
+    void UpdateThreat()
+    {
+        ThreatList const& tList = m_creature->getThreatManager().getThreatList();
+        ThreatList::const_iterator itr;
+        bool empty = true;
+        for(itr = tList.begin(); itr!=tList.end(); ++itr)
+        {
+            Unit* pUnit = Unit::GetUnit((*m_creature), (*itr)->getUnitGuid());
+            if (pUnit && m_creature->getThreatManager().getThreat(pUnit))
+            {
+                if(pUnit->GetTypeId()==TYPEID_PLAYER)
+                {
+                    float threat = CalculateThreat(m_creature->GetDistance2d(pUnit), (float)pUnit->GetArmor(), pUnit->GetHealth());
+                    m_creature->getThreatManager().modifyThreatPercent(pUnit, -100);
+                    m_creature->AddThreat(pUnit, 1000000.0f * threat);
+                    empty = false;
+                }
+                else
+                    //EnterEvadeMode();
+                    m_creature->DeleteThreatList();
+            }
+        }
+    }
+
+    void UpdatePower()
+    {
+        if(m_creature->getPowerType() == POWER_MANA)
+            m_creature->ModifyPower(POWER_MANA, m_creature->GetMaxPower(POWER_MANA) / 3);
+        //else if(m_creature->getPowerType() == POWER_ENERGY)
+        //    m_creature->ModifyPower(POWER_ENERGY, 100);
+    }
+    
+    void RemoveCC()
+    {
+        m_creature->RemoveSpellsCausingAura(SPELL_AURA_MOD_STUN);
+        m_creature->RemoveSpellsCausingAura(SPELL_AURA_MOD_FEAR);
+        m_creature->RemoveSpellsCausingAura(SPELL_AURA_MOD_ROOT);
+        m_creature->RemoveSpellsCausingAura(SPELL_AURA_MOD_PACIFY);
+        m_creature->RemoveSpellsCausingAura(SPELL_AURA_MOD_CONFUSE);
+        //DoCast(m_creature, SP_PVP_TRINKET);
+    }
+    
+    void JustDied(Unit *killer)
+    {
+        if(m_pInstance) 
+            m_pInstance->SetData(TYPE_FACTION_CHAMPIONS, SPECIAL);
+    }
+    
+    void Aggro(Unit *who)
+    {
+        DoCast(m_creature, SPELL_CHAMPIONS_AEGIS, true);
+        if(m_pInstance) 
+            m_pInstance->SetData(TYPE_FACTION_CHAMPIONS, IN_PROGRESS);
+
+        // call for help
+        if(TeamInInstance == HORDE)
+        {
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_1)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_2)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_3)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_4)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_5)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_6)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            {
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_7)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_8)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_9)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_10)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_1)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_2)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+            } 
+        }
+        else if(TeamInInstance == ALLIANCE)
+        {
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_1)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_2)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_3)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_4)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_5)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+            if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_6)))
+            {
+                if(pTemp->isAlive())
+                    pTemp->AI()->AttackStart(m_creature->getVictim());
+            }
+
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            {
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_7)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_8)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_9)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_10)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_1)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+                if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_2)))
+                {
+                    if(pTemp->isAlive())
+                        pTemp->AI()->AttackStart(m_creature->getVictim());
+                }
+            }
+        }
+    }
+    
+    void Reset()
+    {
+        //if(m_pInstance) 
+            //m_pInstance->SetData(TYPE_FACTION_CHAMPIONS, NOT_STARTED);
+    }
+
+    void JustReachedHome()
+    {
+        if (m_pInstance)
+        {  
+            // do this only for the first who reaches home
+            if(m_pInstance->GetData(TYPE_FACTION_CHAMPIONS) != NOT_STARTED)
+            {
+                // rewpawn dead champs
+                if(TeamInInstance == HORDE)
+                {
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_1)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_2)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_3)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_4)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_5)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_6)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    {
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_7)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_8)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_9)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_10)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_1)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_2)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                    } 
+                }
+                else if(TeamInInstance == ALLIANCE)
+                {
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_1)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_2)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_3)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_4)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_5)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+                    if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_6)))
+                    {
+                        if(!pTemp->isAlive())
+                            pTemp->Respawn();
+                    }
+
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    {
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_7)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_8)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_9)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_10)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_1)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                        if(Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_2)))
+                        {
+                            if(!pTemp->isAlive())
+                                pTemp->Respawn();
+                        }
+                    }
+                }
+
+                // alter the counter
+                if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    m_pInstance->SetData(TYPE_COUNTER, m_pInstance->GetData(TYPE_COUNTER) - 1);
+                    m_pInstance->DoUpdateWorldState(UPDATE_STATE_UI_COUNT, m_pInstance->GetData(TYPE_COUNTER));
+                }
+                m_pInstance->SetData(TYPE_FACTION_CHAMPIONS, NOT_STARTED);
+            }
+        }  
+    }
+
+    Creature* SelectRandomFriendlyMissingBuff(uint32 spell)
+    {
+        std::list<Creature *> lst = DoFindFriendlyMissingBuff(40.0f, spell);
+        std::list<Creature *>::const_iterator itr = lst.begin();
+        if(lst.empty()) 
+            return NULL;
+        advance(itr, rand()%lst.size());
+        return (*itr);
+    }
+
+    Unit* SelectEnemyCaster(bool casting)
+    {
+        ThreatList const& tList = m_creature->getThreatManager().getThreatList();
+        ThreatList::const_iterator iter;
+        for(iter = tList.begin(); iter!=tList.end(); ++iter)
+        {
+            Unit *target;
+            if(target = Unit::GetUnit((*m_creature),(*iter)->getUnitGuid()))
+                if(target->getPowerType() == POWER_MANA)
+                    return target;
+        }
+        return NULL;
+    }
+
+    uint32 EnemiesInRange(float distance)
+    {
+        ThreatList const& tList = m_creature->getThreatManager().getThreatList();
+        ThreatList::const_iterator iter;
+        uint32 count = 0;
+        for(iter = tList.begin(); iter!=tList.end(); ++iter)
+        {
+            Unit *target;
+            if(target = Unit::GetUnit((*m_creature),(*iter)->getUnitGuid()))
+                if(m_creature->GetDistance2d(target) < distance)
+                    ++count;
+        }
+        return count;
+    }
+
+    void AttackStart(Unit* pWho)
+    {
+        if (!pWho) 
+            return;
+
+        if (m_creature->Attack(pWho, true))
+        {
+            m_creature->AddThreat(pWho);
+            m_creature->SetInCombatWith(pWho);
+            pWho->SetInCombatWith(m_creature);
+
+            if(mAIType==AI_MELEE)
+                DoStartMovement(pWho);
+            else
+                DoStartMovement(pWho, 20.0f);
+        }
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(ThreatTimer < diff)
+        {
+            UpdatePower();
+            UpdateThreat();
+            ThreatTimer = 4000;
+        }
+        else ThreatTimer -= diff;
+        
+        if(CCTimer < diff)
+        {
+            RemoveCC();
+            CCTimer = 8000+rand()%2000;
+        }
+        else CCTimer -= diff;
+
+        if(mAIType == AI_MELEE) 
+            DoMeleeAttackIfReady();
+    }
+};
+
+/********************************************************************
+                            HEALERS
+********************************************************************/
+enum druid_resto
+{
+    // druid resto
+    SPELL_LIFEBLOOM_10          = 66093,
+    SPELL_LIFEBLOOM_10HC        = 67958,
+    SPELL_LIFEBLOOM_25          = 67957,
+    SPELL_LIFEBLOOM_25HC        = 67959,
+    SPELL_NATURES_GRASP         = 66071,
+    SPELL_NOURISH_10            = 66066,
+    SPELL_NOURISH_10HC          = 67966,
+    SPELL_NOURISH_25            = 67965,
+    SPELL_NOURISH_25HC          = 67967,
+    SPELL_REGROWTH_10           = 66067,
+    SPELL_REGROWTH_10HC         = 67969,
+    SPELL_REGROWTH_25           = 67968,
+    SPELL_REGROWTH_25HC         = 67970,
+    SPELL_REJUVENATION_10       = 66065,
+    SPELL_REJUVENATION_10HC     = 67972,
+    SPELL_REJUVENATION_25       = 67971,
+    SPELL_REJUVENATION_25HC     = 67973,
+    SPELL_THORNS                = 66068,
+    SPELL_TRANQUILITY_10        = 66086,
+    SPELL_TRANQUILITY_10HC      = 67975,
+    SPELL_TRANQUILITY_25        = 67974,
+    SPELL_TRANQUILITY_25HC      = 67976,
+};
+struct MANGOS_DLL_DECL boss_fc_resto_druidAI : public boss_faction_championAI
+{
+    boss_fc_resto_druidAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_HEALER) {Init();}
+    
+    uint32 m_uiGCDTimer;
+    uint32 m_uiGraspTimer;
+    uint32 m_uiTranquilityTimer;
+    uint32 m_uiBarkSkinTimer;
+    
+    void Init()
+    {
+        m_uiGCDTimer = 2500;
+        m_uiBarkSkinTimer = 3000;
+        m_uiGraspTimer = 5000 + rand()%40000;
+        m_uiTranquilityTimer = 20000 + rand()%20000;
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+        
+        if(m_uiGraspTimer < diff)
+        {
+            DoCast(m_creature, SPELL_NATURES_GRASP);
+            m_uiGraspTimer = 60000 + rand()%10000;
+        }
+        else m_uiGraspTimer -= diff;
+        
+        if(m_uiTranquilityTimer < diff)
+        {
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature, SPELL_TRANQUILITY_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature, SPELL_TRANQUILITY_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature, SPELL_TRANQUILITY_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature, SPELL_TRANQUILITY_25HC);
+            m_uiTranquilityTimer = 600000;
+        }
+        else m_uiTranquilityTimer -= diff;
+
+        if(m_uiBarkSkinTimer < diff)
+		{
+            if(m_creature->GetHealth()*2 < m_creature->GetMaxHealth())
+            {
+			    DoCast (m_creature, SPELL_BARKSKIN);
+			    m_uiBarkSkinTimer = 60000;
+            }
+            else
+                m_uiBarkSkinTimer = 5000;
+		}
+		else m_uiBarkSkinTimer -= diff;
+        
+        if(m_uiGCDTimer < diff)
+        {
+            switch(urand(0,4))
+            {
+            case 0:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_LIFEBLOOM_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_LIFEBLOOM_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_LIFEBLOOM_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_LIFEBLOOM_25HC);
+                }
+                break;
+            case 1:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_NOURISH_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_NOURISH_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_NOURISH_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_NOURISH_25HC);
+                }
+                break;
+            case 2:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_REGROWTH_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_REGROWTH_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_REGROWTH_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_REGROWTH_25HC);
+                }
+                break;
+            case 3:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_REJUVENATION_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_REJUVENATION_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_REJUVENATION_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_REJUVENATION_25HC);
+                }
+                break;
+            case 4:
+                if(Creature *target = SelectRandomFriendlyMissingBuff(SPELL_THORNS))
+                    DoCast(target, SPELL_THORNS);
+                break;
+            }
+            m_uiGCDTimer = 2000;
+        }
+        else m_uiGCDTimer -= diff;
+        
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+
+enum shamy_resto
+{
+    // shaman restoration
+    SPELL_CLEANSE_SPIRIT            = 68627,
+    SPELL_EARTH_SHIELD              = 66063,
+    SPELL_HEX                       = 66054,
+    SPELL_LESSER_HEALING_WAVE_10    = 66055,
+    SPELL_LESSER_HEALING_WAVE_10HC  = 68116,
+    SPELL_LESSER_HEALING_WAVE_25    = 68115,
+    SPELL_LESSER_HEALING_WAVE_25HC  = 68117,
+    SPELL_RIPTIDE_10                = 66053,
+    SPELL_RIPTIDE_10HC              = 68119,
+    SPELL_RIPTIDE_25                = 68118,
+    SPELL_RIPTIDE_25HC              = 68120,
+};
+
+struct MANGOS_DLL_DECL boss_fc_resto_shammyAI : public boss_faction_championAI
+{
+    boss_fc_resto_shammyAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_HEALER) {Init();}
+    
+    uint32 m_uiHeroTimer;
+    uint32 m_uiHexTimer;
+    uint32 m_uiGCDTimer;
+    
+    void Init()
+    {
+        m_uiHeroTimer = 30000 + rand()%30000;
+        m_uiHexTimer = 10000 + rand()%30000;
+        m_uiGCDTimer = 2500;
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+        
+        if(m_uiHeroTimer < diff)
+        {
+            DoCast(m_creature, SPELL_HEROISM);
+            m_uiHeroTimer = 600000;
+        }
+        else m_uiHeroTimer -= diff;
+        
+        if(m_uiHexTimer < diff)
+        {
+            if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 1))
+                DoCast(target, SPELL_HEX);
+            m_uiHexTimer = 20000 + rand()%20000;
+        }
+        else m_uiHexTimer -= diff;
+        
+        if(m_uiGCDTimer < diff)
+        {
+            switch(urand(0,5))
+            {
+            case 0: case 1:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_LESSER_HEALING_WAVE_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_LESSER_HEALING_WAVE_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_LESSER_HEALING_WAVE_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_LESSER_HEALING_WAVE_25HC);
+                }
+                break;
+            case 2:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_RIPTIDE_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_RIPTIDE_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_RIPTIDE_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_RIPTIDE_25HC);
+                }
+                break;
+            case 3:
+                if(Unit *pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_EARTH_SHOCK_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_EARTH_SHOCK_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_EARTH_SHOCK_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_EARTH_SHOCK_25HC);
+                }
+                break;
+            case 4:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                    DoCast(pTarget, SPELL_CLEANSE_SPIRIT);
+                break;
+            case 5:
+                if(Unit *pTarget = SelectRandomFriendlyMissingBuff(SPELL_EARTH_SHIELD))
+                    DoCast(pTarget, SPELL_EARTH_SHIELD);
+                break;
+            }
+            m_uiGCDTimer = 2000;
+        }
+        else m_uiGCDTimer -= diff;
+        
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum paly_holy
+{
+    // paladin holy
+    SPELL_CLEANSE               = 68623,
+    SPELL_FLASH_OF_LIGHT_10     = 66113,
+    SPELL_FLASH_OF_LIGHT_10HC   = 68009,
+    SPELL_FLASH_OF_LIGHT_25     = 68008,
+    SPELL_FLASH_OF_LIGHT_25HC   = 68010,
+    SPELL_HAMMER_OF_JUSTICE     = 66613,
+    SPELL_HAND_OF_FREEDOM       = 66115,
+    SPELL_HAND_OF_PROTECTION    = 66009,
+    SPELL_HOLY_LIGHT_10         = 66112,
+    SPELL_HOLY_LIGHT_10HC       = 68012,
+    SPELL_HOLY_LIGHT_25         = 68011,
+    SPELL_HOLY_LIGHT_25HC       = 68013,
+    SPELL_HOLY_SHOCK_10         = 66114,
+    SPELL_HOLY_SHOCK_10HC       = 68015,
+    SPELL_HOLY_SHOCK_25         = 68014,
+    SPELL_HOLY_SHOCK_25HC       = 68016,
+};
+
+struct MANGOS_DLL_DECL boss_fc_holy_pallyAI : public boss_faction_championAI
+{
+    boss_fc_holy_pallyAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_HEALER) {Init();}
+    
+    bool m_bBubbleUsed;
+    bool m_bProtectionUsed;
+    uint32 m_uiFreedomTimer;
+    uint32 m_uiGCDTimer;
+    uint32 m_uiShockTimer;
+    uint32 m_uiHammerOfJusticeTimer;
+    
+    void Init()
+    {
+        m_uiGCDTimer = 3000;
+        m_uiShockTimer = 6000 + rand()%4000;
+        m_bBubbleUsed = false;
+        m_bProtectionUsed = false;
+        m_uiFreedomTimer = 10000 + rand()%15000;
+        m_uiHammerOfJusticeTimer = 15000 + rand()%10000;
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+       
+        //cast bubble at 20% hp
+        if(!m_bBubbleUsed && m_creature->GetHealth()*5 < m_creature->GetMaxHealth())
+        {
+            DoCast(m_creature, SPELL_DIVINE_SHIELD);
+            m_bBubbleUsed = true;
+        }
+        
+        if(!m_bProtectionUsed)
+        {
+            if(Unit *target = DoSelectLowestHpFriendly(40.0f))
+            {
+                if(target->GetHealth() * 100 / target->GetMaxHealth() < 15)
+                {
+                    DoCast(target, SPELL_HAND_OF_PROTECTION);
+                    m_bProtectionUsed = true;
+                }
+            }
+        }
+
+        if(m_uiShockTimer < diff)
+        {
+            if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_HOLY_SHOCK_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_HOLY_SHOCK_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_HOLY_SHOCK_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_HOLY_SHOCK_25HC);
+                m_uiShockTimer = 6000 + rand()%4000;
+            }
+            else
+                m_uiShockTimer = 1000;
+        }
+        else m_uiShockTimer -=diff;
+        
+        if(m_uiFreedomTimer < diff)
+        {   
+            if(Unit *target = SelectRandomFriendlyMissingBuff(SPELL_HAND_OF_FREEDOM))
+                DoCast(target, SPELL_HAND_OF_FREEDOM);
+            m_uiFreedomTimer = 25000 + rand()%10000;
+        }
+        else m_uiFreedomTimer -= diff;
+
+        if(m_uiHammerOfJusticeTimer < diff)
+        {
+            if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+            {
+                if(m_creature->GetDistance2d(target) < 15)
+                {
+                    DoCast(target, SPELL_HAMMER_OF_JUSTICE);
+                    m_uiHammerOfJusticeTimer=40000+rand()%5000;
+                }
+                else
+                    m_uiHammerOfJusticeTimer = 1000;
+            }
+        }
+        else m_uiHammerOfJusticeTimer -= diff;
+        
+        if(m_uiGCDTimer < diff)
+        {
+            switch(urand(0,4))
+            {
+            case 0: case 1:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_FLASH_OF_LIGHT_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_FLASH_OF_LIGHT_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_FLASH_OF_LIGHT_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_FLASH_OF_LIGHT_25HC);
+                }
+                break;
+            case 2: case 3:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_HOLY_LIGHT_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_HOLY_LIGHT_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_HOLY_LIGHT_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_HOLY_LIGHT_25HC);
+                }
+                break;
+            case 4:
+                if(Unit *target = DoSelectLowestHpFriendly(40.0f))
+                    DoCast(target, SPELL_CLEANSE);
+                break;
+            }
+            m_uiGCDTimer = 2500;
+        }
+        else m_uiGCDTimer -= diff;
+        
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum priest_discipline
+{
+    // priest discipline
+    SPELL_FLASH_HEAL_10         = 66104,
+    SPELL_FLASH_HEAL_10HC       = 68024,
+    SPELL_FLASH_HEAL_25         = 68023,
+    SPELL_FLASH_HEAL_25HC       = 68025,
+    SPELL_MANA_BURN_10          = 66100,
+    SPELL_MANA_BURN_10HC        = 68027,
+    SPELL_MANA_BURN_25          = 68026,
+    SPELL_MANA_BURN_25HC        = 68028,
+    SPELL_PENANCE_10            = 66098,
+    SPELL_PENANCE_10HC          = 68030,
+    SPELL_PENANCE_25            = 68029,
+    SPELL_PENANCE_25HC          = 68031,
+    SPELL_PSYCHIC_SCREAM        = 65543,
+    SPELL_RENEW_10              = 66177,
+    SPELL_RENEW_10HC            = 68036,
+    SPELL_RENEW_25              = 68035,
+    SPELL_RENEW_25HC            = 68037,
+    SPELL_POWER_WORD_SHIELD_10  = 66099,
+    SPELL_POWER_WORD_SHIELD_25  = 68032,
+    SPELL_POWER_WORD_SHIELD_10HC= 68033,
+    SPELL_POWER_WORD_SHIELD_25HC= 68034,
+};
+
+struct MANGOS_DLL_DECL boss_fc_holy_priestAI : public boss_faction_championAI
+{
+    boss_fc_holy_priestAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_HEALER) {Init();}
+    
+    uint32 m_uiGCDTimer;
+    uint32 m_uiScreamTimer;
+    
+    void Init()
+    {
+        m_uiGCDTimer = 2500;
+        m_uiScreamTimer = 5000;
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+
+        if(m_uiScreamTimer < diff)
+        {
+            if(EnemiesInRange(10.0f) > 2)
+            {
+                DoCast(m_creature, SPELL_PSYCHIC_SCREAM);
+                m_uiScreamTimer = 30000;
+            }
+            else
+                m_uiScreamTimer = 3000;
+        }
+        else m_uiScreamTimer -= diff;
+        
+        if(m_uiGCDTimer < diff)
+        {
+            switch(urand(0,6))
+            {
+            case 0:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_RENEW_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_RENEW_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_RENEW_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_RENEW_25HC);
+                }
+                break;
+            case 1:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_POWER_WORD_SHIELD_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_POWER_WORD_SHIELD_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_POWER_WORD_SHIELD_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_POWER_WORD_SHIELD_25HC);
+                }
+                break;
+            case 2: case 3:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_FLASH_HEAL_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_FLASH_HEAL_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_FLASH_HEAL_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_FLASH_HEAL_25HC);
+                }
+                break;
+            case 4:
+                if(Unit *target = urand(0,1) ? m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0) : DoSelectLowestHpFriendly(40.0f))
+                    DoCast(target, SPELL_DISPEL_MAGIC);
+                break;
+            case 5:
+                if(Unit *pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_MANA_BURN_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_MANA_BURN_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_MANA_BURN_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_MANA_BURN_25HC);
+                }
+                break;
+            case 6:
+                if(Unit *pTarget = DoSelectLowestHpFriendly(40.0f))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_PENANCE_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_PENANCE_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_PENANCE_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_PENANCE_25HC);
+                }
+                break;
+            }
+            m_uiGCDTimer = 2000;
+        }
+        else m_uiGCDTimer -= diff;
+        
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+/********************************************************************
+                            RANGED
+********************************************************************/
+enum priest_shadow
+{
+        // priest shadow
+    SPELL_DISPERSION            = 65544,
+    SPELL_MIND_BLAST_10         = 65492,
+    SPELL_MIND_BLAST_10HC       = 68039,
+    SPELL_MIND_BLAST_25         = 68038,
+    SPELL_MIND_BLAST_25HC       = 68040,
+    SPELL_MIND_FLAY_10          = 65488,
+    SPELL_MIND_FLAY_25          = 68042,
+    SPELL_MIND_FLAY_10HC        = 68043,
+    SPELL_MIND_FLAY_25HC        = 68044,
+    SPELL_PSYHIC_HORROR         = 65545,
+    SPELL_SILENCE               = 65542,
+    SPELL_SHADOW_WORD_PAIN_10   = 65541,
+    SPELL_SHADOW_WORD_PAIN_10HC = 68089,
+    SPELL_SHADOW_WORD_PAIN_25   = 68088,
+    SPELL_SHADOW_WORD_PAIN_25HC = 68090,
+    SPELL_VAMPIRIC_TOUCH_10     = 65490,
+    SPELL_VAMPIRIC_TOUCH_10HC   = 68092,
+    SPELL_VAMPIRIC_TOUCH_25     = 68091,
+    SPELL_VAMPIRIC_TOUCH_25HC   = 68093,
+    SPELL_SHADOWFORM            = 16592,
+};
+
+struct MANGOS_DLL_DECL boss_fc_shadow_priestAI : public boss_faction_championAI
+{
+    boss_fc_shadow_priestAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_RANGED) {Init();}
+    
+    uint32 m_uiSilenceTimer;
+    uint32 m_uiPsychicScreamTimer;
+    uint32 m_uiMindBlastTimer;
+    uint32 m_uiGCDTimer;
+    uint32 m_uiDispersionTimer;
+    
+    void Init()
+    {
+        m_uiSilenceTimer = 15000;
+        m_uiPsychicScreamTimer = 8000;
+        m_uiMindBlastTimer = 15000;
+        m_uiGCDTimer = 3000;
+        m_uiDispersionTimer = 1000;
+    }
+
+    void Aggro(Unit *who)
+    {
+        boss_faction_championAI::Aggro(who);
+        DoCast(m_creature, SPELL_SHADOWFORM, true);
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+        
+        if(m_uiPsychicScreamTimer < diff)
+        {
+            if(EnemiesInRange(10.0f) > 2)
+            {
+                DoCast(m_creature, SPELL_PSYHIC_HORROR);
+                m_uiPsychicScreamTimer = 24000;
+            }
+            else
+                m_uiPsychicScreamTimer = 3000;
+        }
+        else m_uiPsychicScreamTimer -= diff;
+
+        if(m_uiDispersionTimer < diff)
+        {
+            if(m_creature->GetHealth()*5 < m_creature->GetMaxHealth())
+            {
+                DoCast(m_creature, SPELL_DISPERSION);
+                m_uiDispersionTimer = 180000;
+            }
+            else m_uiDispersionTimer = 1000;
+        }
+        else m_uiDispersionTimer -= diff;
+        
+        if(m_uiSilenceTimer < diff)
+        {
+            if(Unit *target = SelectEnemyCaster(false))
+                DoCast(target, SPELL_SILENCE);
+            m_uiSilenceTimer = 45000;
+        }
+        else m_uiSilenceTimer -= diff;
+
+        if(m_uiMindBlastTimer < diff)
+        {
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_MIND_BLAST_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_MIND_BLAST_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_MIND_BLAST_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_MIND_BLAST_25HC);
+            m_uiMindBlastTimer = 8000;
+        }
+        else m_uiMindBlastTimer -= diff;
+        
+        if(m_uiGCDTimer < diff)
+        {
+            switch(urand(0,4))
+            {
+            case 0: case 1:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_MIND_FLAY_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_MIND_FLAY_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_MIND_FLAY_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_MIND_FLAY_25HC);
+                break;
+            case 2:
+                if(Unit *pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_VAMPIRIC_TOUCH_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_VAMPIRIC_TOUCH_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_VAMPIRIC_TOUCH_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_VAMPIRIC_TOUCH_25HC);
+                }
+                break;
+            case 3:
+                if(Unit *pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_SHADOW_WORD_PAIN_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_SHADOW_WORD_PAIN_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_SHADOW_WORD_PAIN_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_SHADOW_WORD_PAIN_25HC);
+                }
+                break;
+            case 4:
+                    if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                        DoCast(target, SPELL_DISPEL_MAGIC);
+                    break;
+            }
+            m_uiGCDTimer = 2000;
+        }
+        else m_uiGCDTimer -= diff;
+        
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum warlock
+{
+    // warlock affliction + zhaagrym
+    SPELL_CORRUPTION_10             = 65810,
+    SPELL_CORRUPTION_10HC           = 68134,
+    SPELL_CORRUPTION_25             = 68133,
+    SPELL_CORRUPTION_25HC           = 68135,
+    SPELL_CURSE_OF_AGONY_10         = 65814,
+    SPELL_CURSE_OF_AGONY_10HC       = 68137,
+    SPELL_CURSE_OF_AGONY_25         = 68136,
+    SPELL_CURSE_OF_AGONY_25HC       = 68138,
+    SPELL_CURSE_OF_EXHAUSTION       = 65815,
+    SPELL_DEATH_COIL                = 65820,
+    SPELL_DEATH_COIL_HC             = 68139,
+    SPELL_FEAR                      = 65809,
+    SPELL_HELLFIRE_10               = 65816,
+    SPELL_HELLFIRE_25               = 68145,
+    SPELL_HELLFIRE_10HC             = 68146,
+    SPELL_HELLFIRE_25HC             = 68147,
+    SPELL_SEARING_PAIN_10           = 65819,
+    SPELL_SEARING_PAIN_10HC         = 68149,
+    SPELL_SEARING_PAIN_25           = 68148,
+    SPELL_SEARING_PAIN_25HC         = 68150,
+    SPELL_SHADOW_BOLT_10            = 65821,
+    SPELL_SHADOW_BOLT_10HC          = 68152,
+    SPELL_SHADOW_BOLT_25            = 68151,
+    SPELL_SHADOW_BOLT_25HC          = 68153,
+    SPELL_SUMMON_FELHUNTER          = 67514,
+    SPELL_UNSTABLE_AFFLICTION_10    = 65812,
+    SPELL_UNSTABLE_AFFLICTION_10HC  = 68155,
+    SPELL_UNSTABLE_AFFLICTION_25    = 68154,
+    SPELL_UNSTABLE_AFFLICTION_25HC  = 68156,
+};
+
+struct MANGOS_DLL_DECL boss_fc_warlockAI : public boss_faction_championAI
+{
+    boss_fc_warlockAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_RANGED) {Init();}
+    
+	uint32 m_uiFearTimer;
+	uint32 m_uiUnstableAfflictionTimer;
+    uint32 m_uiHellfireTimer;
+	uint32 m_uiGCDTimer;
+
+    void Init()
+    {
+        m_uiFearTimer = 4000+rand()%1000;
+	    m_uiUnstableAfflictionTimer = 2000+rand()%1000;
+        m_uiHellfireTimer = 15000;
+	    m_uiGCDTimer = 2500;
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+
+        if(m_uiFearTimer < diff)
+		{
+            if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                DoCast(target, SPELL_FEAR);
+            m_uiFearTimer = 8000;
+        }
+		else m_uiFearTimer -= diff;
+
+        if(m_uiHellfireTimer < diff)
+        {
+            if(EnemiesInRange(10.0f) > 2)
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature, SPELL_HELLFIRE_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature, SPELL_HELLFIRE_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature, SPELL_HELLFIRE_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature, SPELL_HELLFIRE_25HC);
+                m_uiHellfireTimer = 40000;
+            }
+            else
+                m_uiHellfireTimer = 5000;
+        }
+        else m_uiHellfireTimer -= diff;
+
+        if(m_uiUnstableAfflictionTimer  < diff)
+        {
+            if(Unit *pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_UNSTABLE_AFFLICTION_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_UNSTABLE_AFFLICTION_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_UNSTABLE_AFFLICTION_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_UNSTABLE_AFFLICTION_25HC);
+            }
+            m_uiUnstableAfflictionTimer = 15000;
+        }
+        else m_uiUnstableAfflictionTimer  -= diff;
+		
+		if(m_uiGCDTimer < diff)
+        {
+            switch(urand(0,5))
+            {
+            case 0:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_SEARING_PAIN_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_SEARING_PAIN_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_SEARING_PAIN_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_SEARING_PAIN_25HC);
+                break;
+            case 1: case 2:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_SHADOW_BOLT_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_SHADOW_BOLT_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_SHADOW_BOLT_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_SHADOW_BOLT_25HC);
+                break;
+            case 3:
+                if(Unit *pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_CORRUPTION_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_CORRUPTION_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_CORRUPTION_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_CORRUPTION_25HC);
+                }
+                break;
+            case 4:
+                if(Unit *pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_CURSE_OF_AGONY_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_CURSE_OF_AGONY_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_CURSE_OF_AGONY_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_CURSE_OF_AGONY_25HC);
+                }
+                break;
+            case 5:
+                if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                    DoCast(target, SPELL_CURSE_OF_EXHAUSTION);
+                break;
+			 }
+			 m_uiGCDTimer = 2500;
+		}
+		else m_uiGCDTimer -= diff;
+
+		boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum mage
+{
+    // mage arcane
+    SPELL_ARCANE_BARRAGE_10     = 65799,
+    SPELL_ARCANE_BARRAGE_10HC   = 67995,
+    SPELL_ARCANE_BARRAGE_25     = 67994,
+    SPELL_ARCANE_BARRAGE_25HC   = 67996,
+    SPELL_ARCANE_BLAST_10       = 65791,
+    SPELL_ARCANE_BLAST_10HC     = 67998,
+    SPELL_ARCANE_BLAST_25       = 67997,
+    SPELL_ARCANE_BLAST_25HC     = 67999,
+    SPELL_ARCANE_EXPLOSION      = 65800,
+    SPELL_BLINK                 = 65793,
+    SPELL_COUNTERSPELL          = 65790,
+    SPELL_FROST_NOVA            = 65792,
+    SPELL_FROSTBOLT_10          = 65807,
+    SPELL_FROSTBOLT_10HC        = 68004,
+    SPELL_FROSTBOLT_25          = 68003,
+    SPELL_FROSTBOLT_25HC        = 68005,
+    SPELL_ICEBLOCK              = 65802,
+    SPELL_POLYMORPH             = 65801,
+};
+
+struct MANGOS_DLL_DECL boss_fc_mageAI : public boss_faction_championAI
+{
+    boss_fc_mageAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_RANGED) {Init();}
+    
+	uint32 m_uiArcaneBarrageTimer;
+    uint32 m_uiBlinkTimer;
+	uint32 m_uiCounterspellTimer;
+	uint32 m_uiFrostNovaTimer;
+	bool m_bIceBlockUsed;
+	uint32 m_uiPolymorphTimer;
+	uint32 m_uiGCDTimer;
+
+    void Init()
+    {
+        m_uiArcaneBarrageTimer = 2000+rand()%1000;
+        m_uiBlinkTimer =  8000+rand()%1000;
+        m_uiCounterspellTimer = 5000+rand()%1000;
+        m_uiFrostNovaTimer =  7000+rand()%2000;
+        m_bIceBlockUsed = false;
+        m_uiPolymorphTimer = 3000+rand()%3000;
+        m_uiGCDTimer = 2000;
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+
+		if(m_uiCounterspellTimer < diff)
+		{
+            if(Unit *target = SelectEnemyCaster(false))
+			    DoCast (target, SPELL_COUNTERSPELL);
+			m_uiCounterspellTimer = 24000;
+		}
+		else m_uiCounterspellTimer -= diff;
+
+		if(m_uiBlinkTimer < diff) // escape
+		{
+            if(m_creature->GetHealth()*2 < m_creature->GetMaxHealth() && EnemiesInRange(10.0f)>3)
+            {
+				DoCast(m_creature, SPELL_FROST_NOVA, true);
+			    DoCast (m_creature, SPELL_BLINK);
+                m_uiBlinkTimer = 25000;
+            }
+            else
+                m_uiBlinkTimer = 5000;
+		}
+		else m_uiBlinkTimer -= diff;
+
+		if(!m_bIceBlockUsed && m_creature->GetHealth()*5 < m_creature->GetMaxHealth())
+		{
+			DoCast(m_creature, SPELL_ICEBLOCK);
+			m_bIceBlockUsed = true;
+		}
+
+        if(m_uiPolymorphTimer < diff)
+        {
+            if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 1))
+                DoCast(target, SPELL_POLYMORPH);
+            m_uiPolymorphTimer = 15000;
+        }
+        else m_uiPolymorphTimer -= diff;
+    
+        if(m_uiGCDTimer < diff)
+        {
+            switch(urand(0,2))
+            {
+            case 0:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_ARCANE_BARRAGE_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_ARCANE_BARRAGE_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_ARCANE_BARRAGE_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_ARCANE_BARRAGE_25HC);
+                break;
+            case 1:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_ARCANE_BLAST_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_ARCANE_BLAST_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_ARCANE_BLAST_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_ARCANE_BLAST_25HC);
+                break;
+            case 2:
+                if(Unit *pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_FROSTBOLT_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_FROSTBOLT_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_FROSTBOLT_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_FROSTBOLT_25HC);
+                }
+                break;
+            }
+            m_uiGCDTimer = 2500;
+        }
+        else m_uiGCDTimer -= diff;
+
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum hunter
+{
+    // hunter survival + cat
+    SPELL_AIMED_SHOT_10         = 65883,
+    SPELL_AIMED_SHOT_25         = 67977,
+    SPELL_AIMED_SHOT_10HC       = 67978,
+    SPELL_AIMED_SHOT_25HC       = 67979,
+    SPELL_CALL_PET              = 67777,
+    SPELL_DETERRENCE            = 65871,
+    SPELL_DISENGAGE             = 65869,
+    SPELL_FROST_TRAP            = 65880,
+    SPELL_SHOOT_10              = 65868,
+    SPELL_SHOOT_25              = 67988,
+    SPELL_SHOOT_10HC            = 67989,
+    SPELL_SHOOT_25HC            = 67990,
+    SPELL_EXPLOSIVE_SHOOT_10    = 65866,
+    SPELL_EXPLOSIVE_SHOOT_10HC  = 67984,
+    SPELL_EXPLOSIVE_SHOOT_25    = 67983,
+    SPELL_EXPLOSIVE_SHOOT_25HC  = 67985,
+    SPELL_WING_CLIP             = 66207,
+    SPELL_STEADY_SHOT           = 65867,
+    SPELL_WYVERN_STING          = 65877,
+};
+
+struct MANGOS_DLL_DECL boss_fc_hunterAI : public boss_faction_championAI
+{
+    boss_fc_hunterAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_RANGED) {Init();}
+    
+	uint32 m_uiAimedShotTimer;
+    uint32 m_uiCallPetTimer;
+	uint32 m_uiDeterrenceTimer;
+	uint32 m_uiDisengageTimer;
+	uint32 m_uiExplosiveShotTimer;
+	uint32 m_uiFrostTrapTimer;
+	uint32 m_uiAutoShootTimer;
+	uint32 m_uiSteadyShotTimer;
+	uint32 m_uiWingClipTimer;
+	uint32 m_uiWyvernStingTimer;
+    uint32 m_uiGCDTimer;
+
+    void Init()
+    {
+		m_uiAimedShotTimer = 1000+rand()%2000;
+		m_uiDeterrenceTimer = 20000;
+		m_uiDisengageTimer = 10000+rand()%3000;
+		m_uiExplosiveShotTimer = 2000+rand()%3000;
+		m_uiFrostTrapTimer = 11000+rand()%5000;
+		m_uiSteadyShotTimer = 3200+rand()%2000;
+		m_uiWingClipTimer =  6000+rand()%2000;
+		m_uiWyvernStingTimer = 7000+rand()%3000;
+		m_uiGCDTimer = 1000;
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+
+		if(m_uiDisengageTimer < diff)
+		{
+            if(EnemiesInRange(10.0f) > 3)
+            {
+			    DoCast(m_creature , SPELL_DISENGAGE);
+			    m_uiDisengageTimer = 30000;
+            }
+            else
+                m_uiDisengageTimer = 3000;
+		}
+		else m_uiDisengageTimer -= diff;
+
+		if(m_uiDeterrenceTimer < diff)
+		{
+            if(m_creature->GetHealth()*5 < m_creature->GetMaxHealth())
+            {
+			    DoCast(m_creature, SPELL_DETERRENCE);
+			    m_uiDeterrenceTimer = 90000;
+            }
+            else m_uiDeterrenceTimer = 3000;
+		}
+		else m_uiDeterrenceTimer -= diff;
+
+        if(m_uiWyvernStingTimer < diff)
+		{
+            if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 1))
+			    DoCast(target, SPELL_WYVERN_STING);
+            m_uiWyvernStingTimer = 60000;
+		}
+		else m_uiWyvernStingTimer -= diff;
+
+        if(m_uiFrostTrapTimer < diff)
+		{
+			DoCast(m_creature, SPELL_FROST_TRAP);
+            m_uiFrostTrapTimer = 30000 + rand()%1000;
+		}
+		else m_uiFrostTrapTimer -= diff;
+
+        if(m_uiWingClipTimer < diff)
+        {
+            if(m_creature->GetDistance2d(m_creature->getVictim()) < 5.0f)
+                DoCast(m_creature->getVictim(), SPELL_WING_CLIP);
+            m_uiWingClipTimer = 5000;
+        }
+        else m_uiWingClipTimer-= diff;
+
+        if(m_uiGCDTimer < diff)
+        {
+            switch(urand(0,3))
+            {
+            case 0: case 1:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_SHOOT_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_SHOOT_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_SHOOT_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_SHOOT_25HC);
+                break;
+            case 2:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_EXPLOSIVE_SHOOT_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_EXPLOSIVE_SHOOT_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_EXPLOSIVE_SHOOT_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_EXPLOSIVE_SHOOT_25HC);
+                break;
+            case 3:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_AIMED_SHOT_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_AIMED_SHOT_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_AIMED_SHOT_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_AIMED_SHOT_25HC);
+                break;
+            }
+		    m_uiGCDTimer = 2500;
+		}
+		else m_uiGCDTimer -= diff; 
+
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum druid_balance
+{
+    // druid balance
+    SPELL_CYCLONE               = 65859,
+    SPELL_ENTANGLING_ROOTS      = 65857,
+    SPELL_FAERIE_FIRE           = 65863,
+    SPELL_FORCE_OF_NATURE       = 65861,
+    NPC_TREANT                  = 36070,
+    SPELL_INSECT_SWARM_10       = 65855,
+    SPELL_INSECT_SWARM_10HC     = 67941,
+    SPELL_INSECT_SWARM_25       = 67942,
+    SPELL_INSECT_SWARM_25HC     = 67943,
+    SPELL_MOONFIRE_10           = 65856,
+    SPELL_MOONFIRE_10HC         = 67945,
+    SPELL_MOONFIRE_25           = 67944,
+    SPELL_MOONFIRE_25HC         = 67946,
+    SPELL_STARFIRE_10           = 65854,
+    SPELL_STARFIRE_10HC         = 67948,
+    SPELL_STARFIRE_25           = 67947,
+    SPELL_STARFIRE_25HC         = 67949,
+    SPELL_WRATH_10              = 65862,
+    SPELL_WRATH_10HC            = 67952,
+    SPELL_WRATH_25              = 67951,
+    SPELL_WRATH_25HC            = 67953,
+};
+
+struct MANGOS_DLL_DECL boss_fc_boomkinAI : public boss_faction_championAI
+{
+    boss_fc_boomkinAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_RANGED) {Init();}
+    
+	uint32 m_uiBarkskinTimer;
+	uint32 m_uiCycloneTimer;
+	uint32 m_uiEntanglingRootsTimer;
+	uint32 m_uiMoonfireTimer;
+    uint32 m_uiFaerieFireTimer;
+    uint32 m_uiForceOfNatureTimer;
+	uint32 m_uiGCDTimer;
+    
+	void Init()
+    {
+		m_uiBarkskinTimer = 6000;
+		m_uiCycloneTimer = 5000;
+		m_uiEntanglingRootsTimer = 2000+rand()%1000;
+		m_uiMoonfireTimer = 1000+rand()%1000;
+        m_uiFaerieFireTimer = 10000;
+        m_uiForceOfNatureTimer = 12000+rand()%2000;
+		m_uiGCDTimer = 1500;
+    }
+
+    void Aggro(Unit *who)
+    {
+        boss_faction_championAI::Aggro(who);
+        DoCast(m_creature, SPELL_FORCE_OF_NATURE, true);
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+
+        if(m_uiBarkskinTimer < diff)
+		{
+            if(m_creature->GetHealth()*2 < m_creature->GetMaxHealth())
+            {
+			    DoCast (m_creature, SPELL_BARKSKIN);
+			    m_uiBarkskinTimer = 60000;
+            }
+            else
+                m_uiBarkskinTimer = 3000;
+		}
+		else m_uiBarkskinTimer -= diff;
+
+        if(m_uiForceOfNatureTimer < diff)
+        {
+            DoCast(m_creature, SPELL_FORCE_OF_NATURE, true);
+            m_uiForceOfNatureTimer = 12000+rand()%3000;
+        }
+        else m_uiForceOfNatureTimer -= diff;
+
+        if(m_uiCycloneTimer < diff)
+		{
+            if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 1))
+			    DoCast (target, SPELL_CYCLONE);
+			m_uiCycloneTimer = 6000+rand()%2000;
+		}
+		else m_uiCycloneTimer -= diff;
+
+        if(m_uiEntanglingRootsTimer < diff)
+		{
+            if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+			    DoCast(target, SPELL_ENTANGLING_ROOTS);
+			m_uiEntanglingRootsTimer = 10000 + rand()%2000;
+		}
+		else m_uiEntanglingRootsTimer -= diff;
+
+        if(m_uiFaerieFireTimer < diff)
+        {
+            if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                DoCast(target, SPELL_FAERIE_FIRE);
+            m_uiFaerieFireTimer = 10000 + rand()%8000;
+        }
+        else m_uiFaerieFireTimer -= diff;
+
+        if(m_uiGCDTimer < diff)
+        {
+            switch(urand(0,6))
+            {
+            case 0: case 1:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_MOONFIRE_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_MOONFIRE_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_MOONFIRE_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_MOONFIRE_25HC);
+                break;
+            case 2:
+                if(Unit *pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_INSECT_SWARM_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_INSECT_SWARM_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_INSECT_SWARM_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_INSECT_SWARM_25HC);
+                }
+                break;
+            case 3:
+                if(Unit *pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_STARFIRE_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_STARFIRE_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_STARFIRE_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_STARFIRE_25HC);
+                }
+                break;
+            case 4: case 5: case 6:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_WRATH_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_WRATH_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_WRATH_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_WRATH_25HC);
+                break;
+            }
+            m_uiGCDTimer = 2000;
+		}
+		else m_uiGCDTimer -= diff; 
+          
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+/********************************************************************
+                            MELEE
+********************************************************************/
+enum warrior
+{
+    // warrior arms
+    SPELL_BLADESTORM            = 65947,
+    SPELL_BLADESTORM_TRIG       = 65946,
+    SPELL_CHARGE                = 68764,
+    SPELL_DISARM                = 65935,
+    SPELL_INTIMIDATING_SHOUT    = 65930,
+    SPELL_OVERPOWER             = 65924,
+    SPELL_MORTAL_STRIKE_10      = 65926,
+    SPELL_MORTAL_STRIKE_10HC    = 68783,
+    SPELL_MORTAL_STRIKE_25      = 68782,
+    SPELL_MORTAL_STRIKE_25HC    = 68784,
+    SPELL_RETALIATION           = 65932,
+    SPELL_SHATTERING_THROW      = 65940,
+    SPELL_SUNDER_ARMOR          = 65936,
+};
+
+struct MANGOS_DLL_DECL boss_fc_warriorAI : public boss_faction_championAI
+{
+    boss_fc_warriorAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_MELEE) {Init();}
+    
+    uint32 m_uiBladestormTimer;
+    uint32 m_uiFearTimer;
+    uint32 m_uiMortalStrikeTimer;
+    uint32 m_uiChargeTimer;
+    uint32 m_uiSunderArmorTimer;
+    uint32 m_uiRetaliationTimer;
+    uint32 m_uiShatteringThrowTimer;
+    uint32 m_uiDisarmTimer;
+    uint32 m_uiOverpowerTimer;
+    
+    void Init()
+    {
+        m_uiBladestormTimer = 20000 + rand()%10000;
+        m_uiFearTimer = 10000 + rand()%10000;
+        m_uiMortalStrikeTimer = 6000 + rand()%4000;
+        m_uiChargeTimer = 1000;
+        m_uiSunderArmorTimer = 5000;
+        m_uiRetaliationTimer = 30000 + rand()%8000;
+        m_uiShatteringThrowTimer =  10000 + rand()%30000;
+        m_uiDisarmTimer = 5000 + rand()%20000;
+        m_uiOverpowerTimer = 5000;
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+        
+        if(m_uiBladestormTimer < diff)
+        {
+            DoCast(m_creature, SPELL_BLADESTORM);
+            m_uiBladestormTimer = 90000 + rand()%5000;
+        }
+        else m_uiBladestormTimer -= diff;
+
+        if(m_uiOverpowerTimer < diff)
+        {
+            DoCast(m_creature->getVictim(), SPELL_OVERPOWER);
+            m_uiOverpowerTimer = 5000;
+        }
+        else m_uiOverpowerTimer -= diff;
+        
+        if(m_uiFearTimer < diff)
+        {
+            DoCast(m_creature->getVictim(), SPELL_INTIMIDATING_SHOUT);
+            m_uiFearTimer = 40000 + rand()%40000;
+        }
+        else m_uiFearTimer -= diff;
+        
+        if(m_uiMortalStrikeTimer < diff)
+        {
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_MORTAL_STRIKE_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_MORTAL_STRIKE_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_MORTAL_STRIKE_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_MORTAL_STRIKE_25HC);
+            m_uiMortalStrikeTimer = 6000 + rand()%2000;
+        }
+        else m_uiMortalStrikeTimer -= diff;
+
+        if(m_uiSunderArmorTimer < diff)
+		{
+			DoCast(m_creature->getVictim(), SPELL_SUNDER_ARMOR);
+			m_uiSunderArmorTimer = 2000+rand()%5000;
+		}
+		else m_uiSunderArmorTimer -= diff;
+
+        if(m_uiChargeTimer < diff)
+        {
+            if(m_creature->IsInRange(m_creature->getVictim(), 8.0f, 25.0f, false))
+            {
+                DoCast(m_creature->getVictim(), SPELL_CHARGE);
+                m_uiChargeTimer = 12000;
+            }
+            else
+                m_uiChargeTimer = 2000;
+        }
+        else m_uiChargeTimer -= diff;
+
+        if(m_uiRetaliationTimer < diff)
+		{
+			DoCast(m_creature, SPELL_RETALIATION);
+			m_uiRetaliationTimer = 300000 + rand()%10000;
+		}
+		else m_uiRetaliationTimer -= diff;
+
+		if(m_uiShatteringThrowTimer < diff)
+		{
+			DoCast(m_creature->getVictim(), SPELL_SHATTERING_THROW);
+			m_uiShatteringThrowTimer = 300000 + rand()%30000;
+		}
+		else m_uiShatteringThrowTimer -= diff;
+        
+        if(m_uiDisarmTimer < diff)
+		{
+			DoCast(m_creature->getVictim(), SPELL_DISARM);
+            m_uiDisarmTimer = 60000 + rand()%6000;
+		}
+		else m_uiDisarmTimer -= diff;
+        
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum deathknight
+{
+        // dk frost dps
+    SPELL_CHAINS_OF_ICE         = 66020,
+    SPELL_DEATH_GRIP            = 68755,
+    SPELL_DEATH_COIL_10         = 66019,
+    SPELL_DEATH_COIL_10HC       = 67930,
+    SPELL_DEATH_COIL_25         = 67929,
+    SPELL_DEATH_COIL_25HC       = 67931,
+    SPELL_FROST_STRIKE_10       = 66047,
+    SPELL_FROST_STRIKE_10HC     = 67936,
+    SPELL_FROST_STRIKE_25       = 67935,
+    SPELL_FROST_STRIKE_25HC     = 67937,
+    SPELL_ICEBOUND_FORTITUDE    = 66023,
+    SPELL_ICY_TOUCH_10          = 66021,
+    SPELL_ICY_TOUCH_10HC        = 67939,
+    SPELL_ICY_TOUCH_25          = 67938,
+    SPELL_ICY_TOUCH_25HC        = 67940,
+    SPELL_STRANGULATE           = 66018,
+};             
+
+struct MANGOS_DLL_DECL boss_fc_deathknightAI : public boss_faction_championAI
+{
+    boss_fc_deathknightAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_MELEE) {Init();}
+	
+	uint32 m_uiChainsOfIceTimer;
+	uint32 m_uiDeathCoilTimer;
+	uint32 m_uiDeathGripTimer;
+	uint32 m_uiFrostStrikeTimer;
+	uint32 m_uiIceboundFortitudeTimer;
+	uint32 m_uiIcyTouchTimer;
+	uint32 m_uiStrangulateTimer;
+
+    void Init()
+    {
+        m_uiChainsOfIceTimer = 2000+rand()%3000;
+	    m_uiDeathCoilTimer = 3000+rand()%4000;
+	    m_uiDeathGripTimer = 1000+rand()%2000;
+	    m_uiFrostStrikeTimer = 4000+rand()%2000;
+	    m_uiIceboundFortitudeTimer = 20000;
+	    m_uiIcyTouchTimer = 6000+rand()%2000;
+	    m_uiStrangulateTimer = 6000+rand()%10000;
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+        
+        if(m_uiIceboundFortitudeTimer < diff)
+        {
+            if(m_creature->GetHealth()*2 < m_creature->GetMaxHealth())
+            {
+                DoCast(m_creature, SPELL_ICEBOUND_FORTITUDE);
+                m_uiIceboundFortitudeTimer = 60000 + rand()%10000;
+            }
+            else
+                m_uiIceboundFortitudeTimer = 5000;
+        }
+        else m_uiIceboundFortitudeTimer -= diff;
+
+		if(m_uiChainsOfIceTimer < diff)
+		{
+			DoCast(m_creature->getVictim(), SPELL_CHAINS_OF_ICE);
+            m_uiChainsOfIceTimer = 8000 + rand()%6000;
+		}
+		else m_uiChainsOfIceTimer -= diff;
+
+		if(m_uiDeathCoilTimer < diff)
+		{
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_DEATH_COIL_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_DEATH_COIL_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_DEATH_COIL_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_DEATH_COIL_25HC);
+            m_uiDeathCoilTimer = 6000 + rand()%4000;
+		}
+		else m_uiDeathCoilTimer -= diff;
+
+		if(m_uiStrangulateTimer < diff)
+		{
+			if(Unit *target = SelectEnemyCaster(false))
+				DoCast(target , SPELL_STRANGULATE);
+			m_uiStrangulateTimer = 60000 + rand()%6000;
+		}
+		else m_uiStrangulateTimer -= diff;
+
+		if(m_uiFrostStrikeTimer < diff)
+		{
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_FROST_STRIKE_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_FROST_STRIKE_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_FROST_STRIKE_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_FROST_STRIKE_25HC);
+            m_uiFrostStrikeTimer = 5000 + rand()%5000;
+		}
+		else m_uiFrostStrikeTimer -= diff;
+
+		if(m_uiIcyTouchTimer < diff)
+		{
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_ICY_TOUCH_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_ICY_TOUCH_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_ICY_TOUCH_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_ICY_TOUCH_25HC);
+            m_uiIcyTouchTimer = 8000 + rand()%4000;
+		}
+		else m_uiIcyTouchTimer -= diff;
+
+		if(m_uiDeathGripTimer < diff)
+		{
+            if(m_creature->IsInRange(m_creature->getVictim(), 10.0f, 30.0f, false))
+			{
+			    DoCast(m_creature->getVictim(), SPELL_DEATH_GRIP); 
+			    m_uiDeathGripTimer = 35000 + rand()%1000;
+			}
+			else m_uiDeathGripTimer = 3000;
+		}
+		else m_uiDeathGripTimer -= diff;
+
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum rogue
+{
+    // rogue sublety
+    SPELL_BLADE_FLURRY          = 65956,
+    SPELL_BLIND                 = 65960,
+    SPELL_CLOAK_OF_SHADOWS      = 65961,
+    SPELL_EVISCERATE_10         = 65957,
+    SPELL_EVISCERATE_10HC       = 68095,
+    SPELL_EVISCERATE_25         = 68094,
+    SPELL_EVISCERATE_25HC       = 68096,
+    SPELL_HEMORRHAGE            = 65954,
+    SPELL_SHADOWSTEP            = 66178,
+    SPELL_FAN_OF_KNIVES_10      = 65955,
+    SPELL_FAN_OF_KNIVES_25      = 68097,
+    SPELL_FAN_OF_KNIVES_10HC    = 68098,
+    SPELL_FAN_0F_KNIVES_25HC    = 68099,
+};              
+
+struct MANGOS_DLL_DECL boss_fc_rogueAI : public boss_faction_championAI
+{
+    boss_fc_rogueAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_MELEE) {Init();}
+	
+	uint32 m_uiFanOfKnivesTimer;
+	uint32 m_uiBlindTimer;
+	uint32 m_uiCloakTimer;
+	uint32 m_uiBladeFlurryTimer;
+	uint32 m_uiShadowstepTimer;
+	uint32 m_uiHemorrhageTimer;
+	uint32 m_uiEviscerateTimer;
+
+    void Init()
+    {
+        m_uiFanOfKnivesTimer = 7000 + rand()%1000;
+	    m_uiBlindTimer = 6000 + rand()%3000;
+	    m_uiCloakTimer = 20000 + rand()%20000;
+	    m_uiBladeFlurryTimer = 10000 + rand()%1000;
+	    m_uiShadowstepTimer = 9000 + rand()%2000;
+	    m_uiHemorrhageTimer = 5000 + rand()%1000;
+	    m_uiEviscerateTimer = 14000 + rand()%2000;
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+
+        if(m_uiFanOfKnivesTimer < diff)
+        {
+            if(EnemiesInRange(15.0f) > 2)
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_FAN_OF_KNIVES_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature->getVictim(), SPELL_FAN_OF_KNIVES_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_FAN_OF_KNIVES_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature->getVictim(), SPELL_FAN_0F_KNIVES_25HC);
+            }
+            m_uiFanOfKnivesTimer = 3000;
+        }
+        else m_uiFanOfKnivesTimer -= diff;
+
+		if(m_uiHemorrhageTimer < diff)
+		{
+            DoCast(m_creature->getVictim(), SPELL_HEMORRHAGE);
+            m_uiHemorrhageTimer = 5000 + rand()%2000;
+		}
+		else m_uiHemorrhageTimer -= diff;
+
+		if(m_uiEviscerateTimer < diff)
+        {
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_EVISCERATE_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_EVISCERATE_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_EVISCERATE_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_EVISCERATE_25HC);
+            m_uiEviscerateTimer = 7000 + rand()%3000;
+        }
+        else m_uiEviscerateTimer -= diff;
+
+        if(m_uiShadowstepTimer < diff)
+		{
+			if(m_creature->IsInRange(m_creature->getVictim(), 10.0f, 40.0f))
+			{
+		 	    DoCast(m_creature->getVictim(), SPELL_SHADOWSTEP);
+                m_uiShadowstepTimer = 30000 + rand()%6000;
+			}
+			else m_uiShadowstepTimer = 2000;
+		}
+		else m_uiShadowstepTimer -= diff;
+
+		if(m_uiBlindTimer < diff)
+		{
+			if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 1))
+			{
+                if(m_creature->IsInRange(target, 0.0f, 15.0f, false))
+                {
+				    DoCast(target, SPELL_BLIND);
+				    m_uiBlindTimer = 120000 + rand()%6000;
+                }
+			    else m_uiBlindTimer = 2000;
+            }
+            else m_uiBlindTimer = 2000;
+		}
+		else m_uiBlindTimer -= diff;
+
+		if(m_uiCloakTimer < diff) //If rogue really damaged...
+        {
+            if(m_creature->GetHealth()*2 < m_creature->GetMaxHealth())
+            {
+                DoCast(m_creature, SPELL_CLOAK_OF_SHADOWS);  //...She will cloak.
+                m_uiCloakTimer = 90000;
+            }
+            else m_uiCloakTimer = 5000;
+        }
+        else m_uiCloakTimer -= diff;
+
+		if(m_uiBladeFlurryTimer < diff)
+        {
+            DoCast(m_creature, SPELL_BLADE_FLURRY);
+            m_uiBladeFlurryTimer = 120000 + rand()%5000;
+        }
+        else m_uiBladeFlurryTimer -= diff;
+
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum shamy_enhancement
+{
+    // shaman enhancement
+    SPELL_LAVA_LASH             = 65974,
+    SPELL_STORMSTRIKE           = 65970,
+};
+
+struct MANGOS_DLL_DECL boss_fc_enh_shammyAI : public boss_faction_championAI
+{
+    boss_fc_enh_shammyAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_MELEE) {Init();}
+    
+	uint32 m_uiHeroismTimer;
+	uint32 m_uiShockTimer;
+	uint32 m_uiLavaLashTimer;
+	uint32 m_uiStormstrikeTimer;
+
+    void Init()
+    {
+        m_uiShockTimer=3000+rand()%2000;       
+	    m_uiLavaLashTimer=4000+rand()%2000;
+	    m_uiStormstrikeTimer=5000+rand()%2000;
+	    m_uiHeroismTimer=5000+rand()%20000;
+    }
+
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+
+        if(m_uiHeroismTimer < diff)
+        {
+            DoCast(m_creature, SPELL_HEROISM);
+            m_uiHeroismTimer = 600000;
+        }
+        else m_uiHeroismTimer -= diff;
+
+		if(m_uiShockTimer < diff)
+		{
+            if(Unit *pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_EARTH_SHOCK_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_EARTH_SHOCK_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_EARTH_SHOCK_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_EARTH_SHOCK_25HC);
+            }
+		    m_uiShockTimer = 6000 + rand()%1000;
+		}
+		else m_uiShockTimer -= diff;
+
+		if(m_uiStormstrikeTimer < diff)
+		{
+			DoCast(m_creature->getVictim(), SPELL_STORMSTRIKE);
+            m_uiStormstrikeTimer = 8000 + rand()%4000;
+		}
+		else m_uiStormstrikeTimer -= diff;
+
+		if(m_uiLavaLashTimer < diff)
+		{
+			DoCast (m_creature->getVictim(), SPELL_LAVA_LASH);
+            m_uiLavaLashTimer = 8000 + rand()%5000;
+		}
+		else m_uiLavaLashTimer -= diff;
+
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum paladin_retribution
+{
+    // paladin retribution
+    SPELL_AVENGING_WRATH            = 66011,
+    SPELL_CRUSADER_STRIKE           = 66003,
+    SPELL_DIVINE_STORM              = 66006,
+    SPELL_REPENTANCE                = 66008,
+    SPELL_JUDGEMENT_OF_COMMAND_10   = 66005,
+    SPELL_JUDGEMENT_OF_COMMAND_10HC = 68018,
+    SPELL_JUDGEMENT_OF_COMMAND_25   = 68017,
+    SPELL_JUDGEMENT_OF_COMMAND_25HC = 68019,
+    SPELL_SEAL_OF_COMMAND_10        = 66004,
+    SPELL_SEAL_OF_COMMAND_25        = 68020,
+    SPELL_SEAL_OF_COMMAND_10HC      = 68021,
+    SPELL_SEAL_OF_COMMAND_25HC      = 68022,
+};
+
+struct MANGOS_DLL_DECL boss_fc_ret_pallyAI : public boss_faction_championAI
+{
+    boss_fc_ret_pallyAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_MELEE) {Init();}
+    
+	bool m_bShieldUsed;
+    uint32 m_uiAvengingWrathTimer;
+	uint32 m_uiCrusaderStrikeTimer;
+	uint32 m_uiDivineShieldTimer;
+	uint32 m_uiDivineStormTimer;
+	uint32 m_uiHammerOfJusticeTimer;
+	uint32 m_uiHandOfProtectionTimer;
+	uint32 m_uiJudgementOfCommandTimer;
+	uint32 m_uiRepentanceTimer;
+
+    void Init()
+    {
+        m_uiAvengingWrathTimer = 7000 + rand()%3000;
+        m_uiCrusaderStrikeTimer = 4000 + rand()%1000;
+	    m_uiDivineShieldTimer = 30000 + rand()%1000;
+        m_uiDivineStormTimer = 5000 + rand()%2000;
+        m_uiHammerOfJusticeTimer = 1000 + rand()%5000;
+        m_uiHandOfProtectionTimer = 40000 + rand()%2000;
+        m_uiJudgementOfCommandTimer = 6000;
+	    m_uiRepentanceTimer = 2000 + rand()%5000;
+        m_bShieldUsed = false;
+    }
+
+    void Aggro(Unit *who)
+    {
+        boss_faction_championAI::Aggro(who);
+
+        if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+            DoCast(m_creature, SPELL_SEAL_OF_COMMAND_10);
+        if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+            DoCast(m_creature, SPELL_SEAL_OF_COMMAND_25);
+        if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+            DoCast(m_creature, SPELL_SEAL_OF_COMMAND_10HC);
+        if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            DoCast(m_creature, SPELL_SEAL_OF_COMMAND_25HC);
+    }
+    
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+
+		if(m_uiRepentanceTimer < diff)
+        {
+            if(Unit *target = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 1))
+			    DoCast(target, SPELL_REPENTANCE);
+            m_uiRepentanceTimer = 60000 + rand()%4000;
+        }
+        else m_uiRepentanceTimer -= diff;
+
+		if(m_uiCrusaderStrikeTimer < diff)
+        {
+			DoCast(m_creature->getVictim(), SPELL_CRUSADER_STRIKE);
+            m_uiCrusaderStrikeTimer = 6000 + rand()%1000;
+        }
+        else m_uiCrusaderStrikeTimer -= diff;
+
+		if(m_uiAvengingWrathTimer < diff)  //Wrath+shield problem.
+        {
+            DoCast(m_creature, SPELL_AVENGING_WRATH);
+            m_uiAvengingWrathTimer = 300000 + rand()%5000;
+        }
+        else m_uiAvengingWrathTimer -= diff;
+
+		if(!m_bShieldUsed && m_creature->GetHealth()*5 < m_creature->GetMaxHealth())
+        {
+            DoCast(m_creature, SPELL_DIVINE_SHIELD);
+            m_bShieldUsed = true;
+        }
+		 
+		if(m_uiDivineStormTimer < diff)
+        {
+			DoCast(m_creature->getVictim(), SPELL_DIVINE_STORM);
+            m_uiDivineStormTimer = 10000 + rand()%1000;
+        }
+        else m_uiDivineStormTimer -= diff;
+		
+        if(m_uiJudgementOfCommandTimer < diff)
+        {
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_JUDGEMENT_OF_COMMAND_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_JUDGEMENT_OF_COMMAND_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_JUDGEMENT_OF_COMMAND_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_JUDGEMENT_OF_COMMAND_25HC);
+            m_uiJudgementOfCommandTimer = 8000 + rand()%1000;
+        }
+        else m_uiJudgementOfCommandTimer -= diff;
+
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+/**********************************************************
+                            PETS
+**********************************************************/
+enum cat
+{
+     // cat
+    SPELL_CLAW_10               = 67793,
+    SPELL_CLAW_10HC             = 67981,
+    SPELL_CLAW_25               = 67980,
+    SPELL_CLAW_25HC             = 67982,
+};
+
+struct MANGOS_DLL_DECL boss_fc_pet_catAI : public boss_faction_championAI
+{
+    boss_fc_pet_catAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_MELEE) {Init();}
+    
+	uint32 m_uiClawTimer;
+
+    void Init()
+    {
+        m_uiClawTimer=3000;       
+    }
+
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+
+        if(m_uiClawTimer < diff)
+        {
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_CLAW_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_CLAW_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_CLAW_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_CLAW_25HC);
+            m_uiClawTimer = 3000 + rand()%2000;
+        }
+        else m_uiClawTimer -= diff;
+
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+enum felhunter
+{
+    // zhaagrym
+    SPELL_DEVOUR_MAGIC          = 67518,
+    SPELL_LOCK                  = 67519, 
+};
+
+struct MANGOS_DLL_DECL boss_fc_pet_zhaagrymAI : public boss_faction_championAI
+{
+    boss_fc_pet_zhaagrymAI(Creature *pCreature) : boss_faction_championAI(pCreature, AI_MELEE) {Init();}
+    
+	uint32 m_uiDevourMagicTimer;
+    uint32 m_uiSpellLockTimer;
+
+    void Init()
+    {
+        m_uiDevourMagicTimer = 5000;
+        m_uiSpellLockTimer = 6000 + rand()%4000;       
+    }
+
+    void UpdateAI(const uint32 diff)
+    {
+        if(!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
+            return;
+
+        if(m_uiSpellLockTimer < diff)
+		{
+			if(Unit *target = SelectEnemyCaster(false))
+				DoCast(target , SPELL_LOCK);
+			m_uiSpellLockTimer = 15000 + rand()%6000;
+		}
+		else m_uiSpellLockTimer -= diff;
+
+        if(m_uiDevourMagicTimer < diff)
+        {
+            switch (urand(0,1))
+            {
+            case 0:
+                if(Unit *target = SelectEnemyCaster(false))
+                    DoCast(target , SPELL_DEVOUR_MAGIC);
+                break;
+            case 1:
+                if(Unit *target = DoSelectLowestHpFriendly(40.0f))
+                    DoCast(target , SPELL_DEVOUR_MAGIC);
+                break;
+            }
+
+            m_uiDevourMagicTimer = 3000 + rand()%3000;
+        }
+		else m_uiDevourMagicTimer -= diff;
+
+        boss_faction_championAI::UpdateAI(diff);
+    }
+};
+
+
+/*========================================================*/
+CreatureAI* GetAI_boss_fc_resto_druid(Creature *pCreature) {
+    return new boss_fc_resto_druidAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_resto_shammy(Creature *pCreature) {
+    return new boss_fc_resto_shammyAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_holy_pally(Creature *pCreature) {
+    return new boss_fc_holy_pallyAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_holy_priest(Creature *pCreature) {
+    return new boss_fc_holy_priestAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_shadow_priest(Creature *pCreature) {
+    return new boss_fc_shadow_priestAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_warlock(Creature *pCreature) {
+    return new boss_fc_warlockAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_mage(Creature *pCreature) {
+    return new boss_fc_mageAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_hunter(Creature *pCreature) {
+    return new boss_fc_hunterAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_boomkin(Creature *pCreature) {
+    return new boss_fc_boomkinAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_warrior(Creature *pCreature) {
+    return new boss_fc_warriorAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_deathknight(Creature *pCreature) {
+    return new boss_fc_deathknightAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_rogue(Creature *pCreature) {
+    return new boss_fc_rogueAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_enh_shammy(Creature *pCreature) {
+    return new boss_fc_enh_shammyAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_ret_pally(Creature *pCreature) {
+    return new boss_fc_ret_pallyAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_pet_cat(Creature *pCreature) {
+    return new boss_fc_pet_catAI (pCreature);
+}
+CreatureAI* GetAI_boss_fc_pet_zhaagrym(Creature *pCreature) {
+    return new boss_fc_pet_zhaagrymAI (pCreature);
+}
+
+void AddSC_faction_champions()
+{
+    Script *newscript;
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_resto_druid";
+    newscript->GetAI = &GetAI_boss_fc_resto_druid;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_resto_shammy";
+    newscript->GetAI = &GetAI_boss_fc_resto_shammy;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_holy_pally";
+    newscript->GetAI = &GetAI_boss_fc_holy_pally;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_holy_priest";
+    newscript->GetAI = &GetAI_boss_fc_holy_priest;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_shadow_priest";
+    newscript->GetAI = &GetAI_boss_fc_shadow_priest;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_mage";
+    newscript->GetAI = &GetAI_boss_fc_mage;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_warlock";
+    newscript->GetAI = &GetAI_boss_fc_warlock;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_hunter";
+    newscript->GetAI = &GetAI_boss_fc_hunter;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_boomkin";
+    newscript->GetAI = &GetAI_boss_fc_boomkin;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_warrior";
+    newscript->GetAI = &GetAI_boss_fc_warrior;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_deathknight";
+    newscript->GetAI = &GetAI_boss_fc_deathknight;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_rogue";
+    newscript->GetAI = &GetAI_boss_fc_rogue;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_enh_shammy";
+    newscript->GetAI = &GetAI_boss_fc_enh_shammy;
+    newscript->RegisterSelf();
+    
+    newscript = new Script;
+    newscript->Name = "boss_fc_ret_pally";
+    newscript->GetAI = &GetAI_boss_fc_ret_pally;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "boss_fc_pet_cat";
+    newscript->GetAI = &GetAI_boss_fc_pet_cat;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "boss_fc_pet_zhaagrym";
+    newscript->GetAI = &GetAI_boss_fc_pet_zhaagrym;
+    newscript->RegisterSelf();
+}
diff --git a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_jaraxxus.cpp b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_jaraxxus.cpp
index e6eb792..14cf813 100644
--- a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_jaraxxus.cpp
+++ b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_jaraxxus.cpp
@@ -24,6 +24,154 @@ EndScriptData */
 #include "precompiled.h"
 #include "trial_of_the_crusader.h"
 
+enum
+{
+    // yells
+    SAY_AGGRO       = -1605014,
+    SAY_INCINERATE  = -1605015,
+    SAY_SISTER      = -1605016,
+    SAY_INFERNO     = -1605017,
+    SAY_SLAY1       = -1605018,
+    SAY_SLAY2       = -1605019,
+    SAY_DEATH       = -1605020,
+    SAY_BERSERK     = -1605025,
+
+    SAY_TIRION_JARU_OUTRO1      = -1605021,
+    SAY_GARROSH_JARU_OUTRO2     = -1605022,
+    SAY_VARIAN_JARU_OUTRO3      = -1605023,
+    SAY_TIRION_JARU_OUTRO4      = -1605024,
+
+    SPELL_FEL_FIREBALL_10       = 66532,
+    SPELL_FEL_FIREBALL_10HC     = 66964,
+    SPELL_FEL_FIREBALL_25       = 66963,
+    SPELL_FEL_FIREBALL_25HC     = 66965,
+    SPELL_FEL_LIGHTNING_10      = 66528,
+    SPELL_FEL_LIGHTNING_25      = 67029,
+    SPELL_FEL_LIGHTNING_10HC    = 67030,
+    SPELL_FEL_LIGHTNING_25HC    = 67031,
+    SPELL_INCINERATE_FLESH_10   = 66237,
+    SPELL_INCINERATE_FLESH_10HC = 67050,
+    SPELL_INCINERATE_FLESH_25   = 67049,
+    SPELL_INCINERATE_FLESH_25HC = 67051,
+    SPELL_BURNING_INFERNO_10    = 66242,
+    SPELL_BURNING_INFERNO_25    = 67060,  
+    SPELL_LEGION_FLAME          = 68124,
+    NPC_LEGIONS_FLAME           = 34784,
+
+    SPELL_INFERNAL_ERUPTION     = 66258,
+    NPC_INFERNAL_VOLCANO        = 34813,
+    NPC_FELFLAME_INFERNAL       = 34815,
+    SPELL_INFERNAL_ERUPTION_VOL = 66255,
+    SPELL_FEL_INFERNO           = 67047,
+    SPELL_FEL_STEAK_10          = 66494,
+    SPELL_FEL_STEAK_25          = 67042,
+
+    SPELL_NETHER_PORTAL_10      = 66264,
+    SPELL_NETHER_PORTAL_25      = 68405,
+    NPC_NETHER_PORTAL           = 34825,
+    NPC_MISTRESS_OF_PAIN        = 34826,
+    SPELL_SHIVAN_SLASH_10       = 66378,
+    SPELL_SHIVAN_SLASH_25       = 67097,
+    SPELL_MISTRESS_KISS         = 67077,
+    SPELL_SPINNING_PAIN_SPIKE   = 66283,
+
+    SPELL_NETHER_POWER          = 67108, // 5 10man, 10 25man
+
+    SPELL_BERSERK               = 26662,
+};
+
+enum Equipment
+{
+    EQUIP_MAIN           = 47266,
+    EQUIP_OFFHAND        = 46996,
+    EQUIP_RANGED         = 47267,
+    EQUIP_DONE           = EQUIP_NO_CHANGE,
+};
+
+// npc_jaina -> needed for outro
+struct MANGOS_DLL_DECL npc_jainaAI : public ScriptedAI
+{
+    npc_jainaAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+
+    uint32 OutroTimer;
+    uint32 OutroStep;
+
+    bool isJaruOutro;
+
+    void Reset()
+    {
+        OutroTimer          = 1000;
+        OutroStep           = 0;
+        isJaruOutro         = false;
+    }
+
+    void SetJaruOutro()
+    {
+        isJaruOutro = true;
+        OutroTimer = 5000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if(isJaruOutro)
+        {
+            switch(OutroStep)
+            {
+            case 1:
+                if(Creature* Garrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+                    DoScriptText(SAY_GARROSH_JARU_OUTRO2, Garrosh);
+                ++OutroStep;
+                OutroTimer = 10000;
+                break;
+            case 3:
+                if(Creature* Varian = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_VARIAN)))
+                    DoScriptText(SAY_VARIAN_JARU_OUTRO3, Varian);
+                ++OutroStep;
+                OutroTimer = 8000;
+                break;
+            case 5:
+                if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                    DoScriptText(SAY_TIRION_JARU_OUTRO4, Tirion);
+                ++OutroStep;
+                OutroTimer = 15000;
+                break;
+            case 7:
+                if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                    DoScriptText(SAY_TIRION_JARU_OUTRO1, Tirion);
+                ++OutroStep;
+                OutroTimer = 15000;
+                break;
+            case 9:
+                if(Creature *pBarret = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_BARRET)))
+                {
+                    pBarret->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+                    pBarret->SetVisibility(VISIBILITY_ON);
+                }
+                isJaruOutro = false;
+                ++OutroStep;
+                OutroTimer = 10000;
+                break;
+            }
+
+            if (OutroTimer <= uiDiff)
+            {
+                ++OutroStep;
+                OutroTimer = 330000;
+            } OutroTimer -= uiDiff;
+        }
+    }
+};
+
+CreatureAI* GetAI_npc_jaina(Creature* pCreature)
+{
+    return new npc_jainaAI (pCreature);
+}
+
 /*######
 ## boss_jaraxxus
 ######*/
@@ -33,35 +181,270 @@ struct MANGOS_DLL_DECL boss_jaraxxusAI : public ScriptedAI
     boss_jaraxxusAI(Creature* pCreature) : ScriptedAI(pCreature)
     {
         m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        //SetEquipmentSlots(false, EQUIP_MAIN, EQUIP_OFFHAND, EQUIP_RANGED);
         Reset();
     }
 
     ScriptedInstance* m_pInstance;
 
-    void Reset() {}
+    uint8 Difficulty;
+
+    uint32 m_uiFelFireballTimer;
+    uint32 m_uiFelLightningTimer;
+    uint32 m_uiIncinerateFleshTimer;
+    uint32 m_uiBurningInfernoTimer;
+    uint32 m_uiLegionFlameTimer;
+    uint32 m_uiInfernalEruptionTimer;
+    uint32 m_uiNetherPortalTimer;
+    uint32 m_uiNetherPowerTimer;
+
+    uint32 m_uiBerserkTimer;
+    uint32 m_uiWipeCheckTimer;
+
+    float VolcanoX[3];
+    float VolcanoY[3];
+
+    std::list<Creature*> lFlames;
+
+    void Reset() 
+    {
+        m_uiFelFireballTimer        = urand(15000, 25000);
+        m_uiFelLightningTimer       = urand(10000, 15000);
+        m_uiIncinerateFleshTimer    = urand(40000, 50000);
+        m_uiLegionFlameTimer        = 30000;
+        m_uiInfernalEruptionTimer   = 28000;
+        m_uiNetherPortalTimer       = 40000;
+        m_uiNetherPowerTimer        = urand(1000,2000);
+
+        m_uiBerserkTimer    = 600000;  // 10 min
+        m_uiWipeCheckTimer  = 30000;
+        lFlames.clear();
+    }
 
     void JustReachedHome()
     {
         if (m_pInstance)
+        {
             m_pInstance->SetData(TYPE_JARAXXUS, NOT_STARTED);
+            if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            {
+                m_pInstance->SetData(TYPE_COUNTER, m_pInstance->GetData(TYPE_COUNTER) - 1);
+                m_pInstance->DoUpdateWorldState(UPDATE_STATE_UI_COUNT, m_pInstance->GetData(TYPE_COUNTER));
+            }
+        }
+    }
+
+    void KilledUnit(Unit* pVictim)
+    {
+        if(!GetClosestCreatureWithEntry(m_creature, NPC_WILFRED, 150.0f))
+        {
+            switch(urand(0, 1))
+            {
+            case 0: DoScriptText(SAY_SLAY1, m_creature); break;
+            case 1: DoScriptText(SAY_SLAY2, m_creature); break;
+            }
+        }
+    }
+
+    void AttackStart(Unit* pWho)
+    {
+        if (!m_pInstance)  
+            return;
+
+        if (m_pInstance->GetData(TYPE_JARAXXUS) != IN_PROGRESS) 
+            return;
+
+        if (m_creature->Attack(pWho, true)) 
+        {
+            m_creature->AddThreat(pWho);
+            m_creature->SetInCombatWith(pWho);
+            pWho->SetInCombatWith(m_creature);
+            DoStartMovement(pWho);
+        }
     }
 
     void JustDied(Unit* pKiller)
     {
-        if (m_pInstance)
+        DoScriptText(SAY_DEATH, m_creature);
+
+        if(m_pInstance)
+        {
+            m_pInstance->SetData(TYPE_STAGE,0);
             m_pInstance->SetData(TYPE_JARAXXUS, DONE);
+        }
+
+        if(Creature *pJaina = GetClosestCreatureWithEntry(m_creature, NPC_JAINA, 180.0f))
+            ((npc_jainaAI*)pJaina->AI())->SetJaruOutro();
+
+        GetCreatureListWithEntryInGrid(lFlames, m_creature, NPC_LEGIONS_FLAME, DEFAULT_VISIBILITY_INSTANCE);
+
+        if (!lFlames.empty())
+        {
+            for(std::list<Creature*>::iterator iter = lFlames.begin(); iter != lFlames.end(); ++iter)
+            {
+                if ((*iter) && !(*iter)->isAlive())
+                    (*iter)->ForcedDespawn();
+            }
+        }
     }
 
     void Aggro(Unit* pWho)
     {
         m_creature->SetInCombatWithZone();
+
+        if(pWho != GetClosestCreatureWithEntry(m_creature, NPC_WILFRED, 150.0f))
+            DoScriptText(SAY_AGGRO, m_creature);
+
+        if(m_pInstance)
+            m_pInstance->SetData(TYPE_JARAXXUS, IN_PROGRESS);
+    }
+
+    void SummonInfernals()
+    {
+        //34813 - infernal volcano
+
+        VolcanoX[0] = 564.04f + rand_norm()*30.0f - 15.0f;
+        VolcanoY[0] = 139.98f + rand_norm()*30.0f - 15.0f;
+        m_creature->SummonCreature(34813, VolcanoX[0], VolcanoY[0], 394.0f, 0.0f, TEMPSUMMON_TIMED_DESPAWN, 10000);
+        VolcanoX[1] = 564.04f + rand_norm()*30.0f - 15.0f;
+        VolcanoY[1] = 139.98f + rand_norm()*30.0f - 15.0f;
+        m_creature->SummonCreature(34813, VolcanoX[1], VolcanoY[1], 394.0f, 0.0f, TEMPSUMMON_TIMED_DESPAWN, 10000);
+        VolcanoX[2] = 564.04f + rand_norm()*30.0f - 15.0f;
+        VolcanoY[2] = 139.98f + rand_norm()*30.0f - 15.0f;
+        m_creature->SummonCreature(34813, VolcanoX[2], VolcanoY[2], 394.0f, 0.0f, TEMPSUMMON_TIMED_DESPAWN, 10000);
+    }
+
+    void SummonMistress()
+    {
+        //summon portal 34825
+        float px = 564.04f + rand_norm()*30.0f - 15.0f;
+        float py = 139.98f + rand_norm()*30.0f - 15.0f;
+        if(Creature *portal = m_creature->SummonCreature(34825, px, py, 394.0f, 0.0f, TEMPSUMMON_TIMED_DESPAWN, 20000))
+        {
+            portal->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            portal->CastSpell(portal, SPELL_NETHER_PORTAL_10, true);
+        }
+    }
+
+    void JustSummoned(Creature* pSummoned)
+    {
+        if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            pSummoned->AddThreat(pTarget, 100.0f);
     }
 
     void UpdateAI(const uint32 uiDiff)
     {
+        //Return since we have no target
         if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
             return;
 
+        // spells
+        if (m_uiIncinerateFleshTimer < uiDiff)
+        {
+            if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_INCINERATE_FLESH_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_INCINERATE_FLESH_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_INCINERATE_FLESH_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_INCINERATE_FLESH_25HC);
+            }
+            m_uiIncinerateFleshTimer = urand(60000, 85000);
+        }
+        else
+            m_uiIncinerateFleshTimer -= uiDiff;
+
+        if (m_uiFelFireballTimer < uiDiff)
+        {
+            if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_FEL_FIREBALL_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_FEL_FIREBALL_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_FEL_FIREBALL_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_FEL_FIREBALL_25HC);
+            }
+            m_uiFelFireballTimer = urand(12000, 20000);
+        }
+        else
+            m_uiFelFireballTimer -= uiDiff;
+
+        if (m_uiFelLightningTimer < uiDiff)
+        {
+            if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_FEL_LIGHTNING_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_FEL_LIGHTNING_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_FEL_LIGHTNING_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_FEL_LIGHTNING_25HC);
+            }
+            m_uiFelLightningTimer = urand(6000, 12000);
+        }
+        else
+            m_uiFelLightningTimer -= uiDiff;
+
+        if (m_uiInfernalEruptionTimer < uiDiff)
+        {
+            m_creature->CastStop();
+            DoCast(m_creature, SPELL_INFERNAL_ERUPTION);
+            m_uiInfernalEruptionTimer = 30000;
+        }
+        else
+            m_uiInfernalEruptionTimer -= uiDiff;
+
+        if (m_uiNetherPortalTimer < uiDiff)
+        {
+            m_creature->CastStop();
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL || Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature, SPELL_NETHER_PORTAL_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature, SPELL_NETHER_PORTAL_25);
+            m_uiNetherPortalTimer = 90000;
+        }
+        else
+            m_uiNetherPortalTimer -= uiDiff;
+
+        if (m_uiLegionFlameTimer < uiDiff)
+        {
+            if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                DoCast(pTarget, SPELL_LEGION_FLAME);
+            m_uiLegionFlameTimer = 28000;
+        }
+        else
+            m_uiLegionFlameTimer -= uiDiff;
+
+        if (m_uiNetherPowerTimer < uiDiff)
+        {
+            SpellEntry *spell = (SpellEntry *)GetSpellStore()->LookupEntry(SPELL_NETHER_POWER);
+            //if(m_creature->AddAura(new NetherPowerAura(spell, 0, NULL, m_creature, m_creature)))
+                //m_creature->GetAura(SPELL_NETHER_POWER, 0)->SetStackAmount(Heroic ? 10 : 5);
+            //DoCast(m_creature, SPELL_NETHER_POWER);
+            m_uiNetherPowerTimer = 40000;
+        }
+        else
+            m_uiNetherPowerTimer -= uiDiff;
+
+        // berserk
+        if (m_uiBerserkTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_BERSERK);
+            DoScriptText(SAY_BERSERK, m_creature);
+            m_uiBerserkTimer = 60000;
+        }
+        else
+            m_uiBerserkTimer -= uiDiff;
+
         DoMeleeAttackIfReady();
     }
 };
@@ -71,6 +454,272 @@ CreatureAI* GetAI_boss_jaraxxus(Creature* pCreature)
     return new boss_jaraxxusAI(pCreature);
 }
 
+struct MANGOS_DLL_DECL mob_legion_flameAI : public ScriptedAI
+{
+    mob_legion_flameAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+        SetCombatMovement(false);
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+
+    uint32 spellTimer;
+
+    void Reset()
+    {
+        spellTimer = 1000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (spellTimer < uiDiff)
+        {
+            Map *map = m_creature->GetMap();
+            if (map->IsDungeon())
+            {
+                Map::PlayerList const &PlayerList = map->GetPlayers();
+
+                if (PlayerList.isEmpty())
+                    return;
+
+                for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+                {
+                    if (i->getSource()->isAlive() && m_creature->GetDistance2d(i->getSource()->GetPositionX(), i->getSource()->GetPositionY()) < 2)
+                        i->getSource()->DealDamage(i->getSource(), urand(2925, 3075), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_FIRE, NULL, false);
+                }
+            }
+            spellTimer = 10000;
+        }else spellTimer -= uiDiff;
+    }
+};
+
+CreatureAI* GetAI_mob_legion_flame(Creature* pCreature)
+{
+    return new mob_legion_flameAI (pCreature);
+}
+
+struct MANGOS_DLL_DECL mob_infernal_volcanoAI : public ScriptedAI
+{
+    mob_infernal_volcanoAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+        SetCombatMovement(false);
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+    uint8 Difficulty;
+    uint32 spellTimer;
+    uint32 dieTimer;
+
+    void Reset()
+    {
+        spellTimer = 5000;
+        dieTimer = 16000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (spellTimer < uiDiff)
+        {
+            //DoCast(m_creature, SPELL_INFERNAL_ERUPTION_VOL);
+            if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                if(Creature* pInfernal = m_creature->SummonCreature(NPC_FELFLAME_INFERNAL, pTarget->GetPositionX(), pTarget->GetPositionY(), pTarget->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 30000))
+                    pInfernal->AddThreat(pTarget, 1000.0f);
+            }
+            spellTimer = 5000;
+        }else spellTimer -= uiDiff;
+
+        if (dieTimer < uiDiff)
+        {
+            m_creature->ForcedDespawn();
+            dieTimer = 5000;
+        }else dieTimer -= uiDiff;
+    }
+};
+
+CreatureAI* GetAI_mob_infernal_volcano(Creature* pCreature)
+{
+    return new mob_infernal_volcanoAI (pCreature);
+}
+
+struct MANGOS_DLL_DECL mob_felflame_infernalAI : public ScriptedAI
+{
+    mob_felflame_infernalAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            pCreature->ApplySpellImmune(0, IMMUNITY_MECHANIC, IMMUNE_TO_SILENCE_AND_STUN_AND_FEAR_MASK, true);
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+
+    uint32 spellTimer;
+    uint8 Difficulty;
+
+    void Reset()
+    {
+        spellTimer = 10000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (spellTimer < uiDiff)
+        {
+            switch(urand(0, 1))
+            {
+            case 0:
+                if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL || Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_FEL_STEAK_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_FEL_STEAK_25);
+                }
+                break;
+            case 1:
+                DoCast(m_creature, SPELL_FEL_INFERNO);
+                break;
+            }
+            spellTimer = 10000;
+        }else spellTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+CreatureAI* GetAI_mob_felflame_infernal(Creature* pCreature)
+{
+    return new mob_felflame_infernalAI (pCreature);
+}
+
+struct MANGOS_DLL_DECL mob_nether_portalAI : public ScriptedAI
+{
+    mob_nether_portalAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+
+    uint8 Difficulty;
+    uint32 spellTimer;
+    uint32 m_uiDeathTimer;
+
+    void Reset()
+    {
+        spellTimer = 3000;
+        m_uiDeathTimer = 10000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (spellTimer < uiDiff)
+        {
+            Map *map = m_creature->GetMap();
+            if (map->IsDungeon())
+            {
+                Map::PlayerList const &PlayerList = map->GetPlayers();
+
+                if (PlayerList.isEmpty())
+                    return;
+
+                for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+                {
+                    if (i->getSource()->isAlive() && m_creature->GetDistance2d(i->getSource()->GetPositionX(), i->getSource()->GetPositionY()) < 10)
+                    {
+                        if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL || Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                            i->getSource()->DealDamage(i->getSource(), urand(6825, 7175), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+                        if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                            i->getSource()->DealDamage(i->getSource(), urand(9263, 9737), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+                    }
+                }
+            }
+
+            spellTimer = 100000;
+        }else spellTimer -= uiDiff;
+
+        if(m_uiDeathTimer < uiDiff)
+        {
+            m_creature->DealDamage(m_creature, m_creature->GetHealth(), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+            m_uiDeathTimer = 10000;
+        }
+        else
+            m_uiDeathTimer -= uiDiff;
+        DoMeleeAttackIfReady();
+    }
+};
+
+CreatureAI* GetAI_mob_nether_portal(Creature* pCreature)
+{
+    return new mob_nether_portalAI (pCreature);
+}
+
+struct MANGOS_DLL_DECL mob_mistress_of_painAI : public ScriptedAI
+{
+    mob_mistress_of_painAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+    uint8 Difficulty;
+
+    uint32 spellTimer;
+
+    void Reset()
+    {
+        spellTimer = 10000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (m_pInstance && m_pInstance->GetData(TYPE_JARAXXUS) != IN_PROGRESS) 
+            m_creature->ForcedDespawn();
+
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (spellTimer < uiDiff)
+        {
+            switch(urand(0, 1))
+            {
+            case 0:
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL || Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature, SPELL_SHIVAN_SLASH_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature, SPELL_SHIVAN_SLASH_25);
+                break;
+            case 1:
+                if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                    DoCast(pTarget, SPELL_SPINNING_PAIN_SPIKE);
+                break;
+            }
+            spellTimer = 10000;
+        }else spellTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+CreatureAI* GetAI_mob_mistress_of_pain(Creature* pCreature)
+{
+    return new mob_mistress_of_painAI (pCreature);
+}
+
 void AddSC_boss_jaraxxus()
 {
     Script* newscript;
@@ -79,4 +728,34 @@ void AddSC_boss_jaraxxus()
     newscript->Name = "boss_jaraxxus";
     newscript->GetAI = &GetAI_boss_jaraxxus;
     newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "mob_legion_flame";
+    newscript->GetAI = &GetAI_mob_legion_flame;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "mob_infernal_volcano";
+    newscript->GetAI = &GetAI_mob_infernal_volcano;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "mob_felflame_infernal";
+    newscript->GetAI = &GetAI_mob_felflame_infernal;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "mob_nether_portal";
+    newscript->GetAI = &GetAI_mob_nether_portal;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "mob_mistress_of_pain";
+    newscript->GetAI = &GetAI_mob_mistress_of_pain;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "npc_jaina";
+    newscript->GetAI = &GetAI_npc_jaina;
+    newscript->RegisterSelf();
 }
diff --git a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_northrend_beasts.cpp b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_northrend_beasts.cpp
index e9b81d8..a544168 100644
--- a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_northrend_beasts.cpp
+++ b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_northrend_beasts.cpp
@@ -24,22 +24,196 @@ EndScriptData */
 #include "precompiled.h"
 #include "trial_of_the_crusader.h"
 
+enum gormok
+{
+    SAY_WIPE                    = -1605004,
+    SAY_GARROSH_BEASTS          = -1605109,
+    SAY_VARIAN_BEASTS           = -1605103,
+    SAY_SUMMON_JORMUNGARS       = -1605002,
+
+    SPELL_IMPALE_10             = 66331,
+    SPELL_IMPALE_10HC           = 67478,
+    SPELL_IMPALE_25             = 67477,
+    SPELL_IMPALE_25HC           = 67479,
+    SPELL_STOMP_10              = 66330,
+    SPELL_STOMP_10HC            = 67647,
+    SPELL_STOMP_25              = 67648,
+    SPELL_STOMP_25HC            = 67649,
+    SPELL_RISING_ANGER          = 66636,
+
+    NPC_SNOBOLD_VASSAL          = 34800,
+    SPELL_SNOBOLLED             = 66406,
+    SPELL_BATTER                = 66408,
+    SPELL_FIREBOMB              = 66313,
+    SPELL_FIREBOMB_DOT          = 66318,
+    NPC_FIREBOMB                = 34854,
+    SPELL_HEADCRACK             = 66407,
+
+    SPELL_BERSERK               = 26662,
+};
+
+enum jormungars
+{
+    SAY_SUMMON_ICEHOWL          = -1605003,
+
+    // acidmaw
+    // mobile
+    SPELL_ACID_SPEW_10          = 66819,
+    SPELL_ACID_SPEW_10HC        = 67609,
+    SPELL_ACID_SPEW_25          = 67610,
+    SPELL_ACID_SPEW_25HC        = 67611,
+    SPELL_PARALYTIC_BITE_10     = 66824,
+    SPELL_PARALYTIC_BITE_10HC   = 67613,
+    SPELL_PARALYTIC_BITE_25     = 67612,
+    SPELL_PARALYTIC_BITE_25HC   = 67614,
+    SPELL_SLIME_POOL_10         = 66883,
+    SPELL_SLIME_POOL_10HC       = 67641,
+    SPELL_SLIME_POOL_25         = 67642,
+    SPELL_SLIME_POOL_25HC       = 67643,
+    NPC_SLIME_POOL              = 35176,
+    // stationary
+    SPELL_ACID_SPIT_10          = 66880,
+    SPELL_ACID_SPIT_10HC        = 67607,
+    SPELL_ACID_SPIT_25          = 67606,
+    SPELL_ACID_SPIT_25HC        = 67608,
+    SPELL_PARALYTIC_SPRAY_10    = 66901,
+    SPELL_PARALYTIC_SPRAY_10HC  = 67616,
+    SPELL_PARALYTIC_SPRAY_25    = 67615,
+    SPELL_PARALYTIC_SPRAY_25HC  = 67617,
+    SPELL_SWEEP_10              = 66794,
+    SPELL_SWEEP_10HC            = 67644,
+    SPELL_SWEEP_25              = 67645,
+    SPELL_SWEEP_25HC            = 67646,
+
+
+    SPELL_PARALYTIC_TOXIN       = 66823,
+    SPELL_ENRAGE                = 68335,
+
+    // dreadscale
+    // mobile
+    SPELL_BURNING_BITE_10       = 66879,
+    SPELL_BURNING_BITE_10HC     = 67625,
+    SPELL_BURNING_BITE_25       = 67624,
+    SPELL_BURNING_BITE_25HC     = 67626,
+    SPELL_MOLTEN_SPEW_10        = 66820,
+    SPELL_MOLTEN_SPEW_25        = 67635,
+    SPELL_MOLTEN_SPEW_10HC      = 67636,
+    SPELL_MOLTEN_SPEW_25HC      = 67637,  
+    SPELL_MOLTEN_SPEW_TRIG      = 66821,
+
+    // stationary
+    SPELL_FIRE_SPIT_10          = 66796,
+    SPELL_FIRE_SPIT_10HC        = 67633,
+    SPELL_FIRE_SPIT_25          = 67632,
+    SPELL_FIRE_SPIT_25HC        = 67634,
+    SPELL_BURNING_SPRAY_10      = 66902,
+    SPELL_BURNING_SPRAY_10HC    = 67628,
+    SPELL_BURNING_SPRAY_25      = 67627,
+    SPELL_BURNING_SPRAY_25HC    = 67629,
+
+    SPELL_BURNING_BILE          = 66869,
+};
+
+enum icehowl
+{
+    SAY_VICTORY                 = -1605000,
+    EMOTE_TRAMPLE               = -1605131,
+    EMOTE_STUN                  = -1605132,
+
+    SPELL_FEROCIOUS_BUTT_10     = 66770,
+    SPELL_FEROCIOUS_BUTT_10HC   = 67655,
+    SPELL_FEROCIOUS_BUTT_25     = 67654,
+    SPELL_FEROCIOUS_BUTT_25HC   = 67656,
+    SPELL_ARCTIC_BREATH_10      = 66689,
+    SPELL_ARCTIC_BREATH_10HC    = 67651,
+    SPELL_ARCTIC_BREATH_25      = 67650,
+    SPELL_ARCTIC_BREATH_25HC    = 67652,
+    SPELL_WHIRL_10              = 67345,
+    SPELL_WHIRL_10HC            = 67663,
+    SPELL_WHIRL_25              = 67664,
+    SPELL_WHIRL_25HC            = 67665,
+    SPELL_MASSIVE_CRASH_10      = 66683,
+    SPELL_MASSIVE_CRASH_10HC    = 67660,
+    SPELL_MASSIVE_CRASH_25      = 67661,
+    SPELL_MASSIVE_CRASH_25HC    = 67662,
+    SPELL_SURGE_OF_ADRENALINE   = 68667,    // used only in non heroic
+    SPELL_TRAMPLE               = 66734,
+    SPELL_STAGGERED_DAZE        = 66758,
+    SPELL_FROTHING_RAGE         = 66759,
+};
+
 struct MANGOS_DLL_DECL boss_gormokAI : public ScriptedAI
 {
     boss_gormokAI(Creature* pCreature) : ScriptedAI(pCreature)
     {
         m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC || Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+            pCreature->ApplySpellImmune(0, IMMUNITY_EFFECT, IMMUNE_TO_MOVEMENT_IMPAIRMENT_AND_LOSS_CONTROL_MASK, true); // check this!!!
         Reset();
     }
 
     ScriptedInstance* m_pInstance;
 
-    void Reset() {}
+    uint8 Difficulty;
+
+    uint8 maxSnobold;
+    uint8 snoboldNo;
+
+    uint32 m_uiSnoboldTimer;
+    uint32 m_uiStompTimer;
+    uint32 m_uiImpaleTimer;
+
+    uint32 m_uiDoorTimer;
+    bool doorClosed;
+
+    uint32 TeamInInstance;
+
+    uint32 m_uiBerserkTimer;
+
+    void Reset() 
+    {
+        m_uiSnoboldTimer    = urand(15000, 20000);
+        m_uiStompTimer      = urand(20000, 25000);
+        m_uiImpaleTimer     = 10000;
+        snoboldNo           = 0;
+
+        m_uiDoorTimer       = 8000;
+        doorClosed          = false;
+
+        TeamInInstance = GetFaction();
+
+        m_uiBerserkTimer    = 300000;  // 5 min
+
+        if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+            maxSnobold = 4;
+        if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC || Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+            maxSnobold = 5;
+    }
 
     void JustReachedHome()
     {
         if (m_pInstance)
+        {
             m_pInstance->SetData(TYPE_NORTHREND_BEASTS, NOT_STARTED);
+            m_pInstance->SetData(TYPE_STAGE,0);
+            if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            {
+                m_pInstance->SetData(TYPE_COUNTER, m_pInstance->GetData(TYPE_COUNTER) - 1);
+                m_pInstance->DoUpdateWorldState(UPDATE_STATE_UI_COUNT, m_pInstance->GetData(TYPE_COUNTER));
+            }
+        }
+
+        if(Creature *pTirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+            DoScriptText(SAY_WIPE, pTirion);
+
+        if(Creature *pBarret = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_BARRET)))
+        {
+            pBarret->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pBarret->SetVisibility(VISIBILITY_ON);
+        }
+
+        m_creature->ForcedDespawn();
     }
 
     void Aggro(Unit* pWho)
@@ -47,11 +221,139 @@ struct MANGOS_DLL_DECL boss_gormokAI : public ScriptedAI
         m_creature->SetInCombatWithZone();
     }
 
+    uint32 GetFaction()
+    {
+        uint32 faction = 0;
+        Map *map = m_creature->GetMap();
+        if (map->IsDungeon())
+        {
+            Map::PlayerList const &PlayerList = map->GetPlayers();
+
+            if (!PlayerList.isEmpty())
+            {
+                if (Player* pPlayer = PlayerList.begin()->getSource())
+                    faction = pPlayer->GetTeam();
+            }
+        }
+        return faction;
+    }
+
+    void SummonJormungars()
+    {
+
+        if(Creature *Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+            DoScriptText(SAY_SUMMON_JORMUNGARS, Tirion);
+
+        if (Creature* pDreadscale = m_creature->SummonCreature(NPC_DREADSCALE, SpawnLoc[28].x + 10, SpawnLoc[28].y, SpawnLoc[28].z, 5, TEMPSUMMON_TIMED_OR_CORPSE_DESPAWN, DESPAWN_TIME))
+        {
+            pDreadscale->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x + 10, SpawnLoc[1].y, SpawnLoc[1].z);
+            pDreadscale->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+            pDreadscale->SetInCombatWithZone();
+        }
+        if (Creature* pAcidmaw = m_creature->SummonCreature(NPC_ACIDMAW, SpawnLoc[28].x - 10, SpawnLoc[28].y, SpawnLoc[28].z, 5, TEMPSUMMON_TIMED_OR_CORPSE_DESPAWN, DESPAWN_TIME))
+        {
+            pAcidmaw->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x - 10, SpawnLoc[1].y, SpawnLoc[1].z);
+            pAcidmaw->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+            pAcidmaw->SetInCombatWithZone();
+        }
+        
+        // open gate
+        if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+            m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+    }
+
+    void JustDied(Unit* pKiller)
+    {
+        SummonJormungars();
+    }
+
     void UpdateAI(const uint32 uiDiff)
     {
+        //Return since we have no target
         if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
             return;
 
+        if (m_uiDoorTimer < uiDiff && !doorClosed)
+        {
+            if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            if(TeamInInstance == ALLIANCE)
+            {
+                if(Creature *Varian = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_VARIAN)))
+                    DoScriptText(SAY_VARIAN_BEASTS, Varian);
+            }
+            else if(TeamInInstance == HORDE)
+            {
+                if(Creature *Garrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+                    DoScriptText(SAY_GARROSH_BEASTS, Garrosh);
+            }
+            doorClosed = true;
+            m_uiDoorTimer = 30000;
+        }
+        else
+            m_uiDoorTimer -= uiDiff;
+
+        // spells
+        if (m_uiSnoboldTimer < uiDiff)
+        {
+            if(snoboldNo < maxSnobold)
+            {
+                if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                {
+                    DoCast(pTarget, SPELL_SNOBOLLED, true);
+                    DoCast(m_creature, SPELL_RISING_ANGER);
+                    if(Creature *pSnobold = m_creature->SummonCreature(NPC_SNOBOLD_VASSAL, pTarget->GetPositionX(), pTarget->GetPositionY(), pTarget->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 30000))
+                        pSnobold->AddThreat(pTarget,0.0f);
+                }
+                snoboldNo++;
+            }
+            m_uiSnoboldTimer = 30000 + rand()%15000;
+        }
+        else
+            m_uiSnoboldTimer -= uiDiff;
+
+        if (m_uiStompTimer < uiDiff)
+        {
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature, SPELL_STOMP_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature, SPELL_STOMP_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature, SPELL_STOMP_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature, SPELL_STOMP_25HC);
+            m_uiStompTimer = urand(20000, 25000);
+        }
+        else
+            m_uiStompTimer -= uiDiff;
+
+        if (m_uiImpaleTimer < uiDiff)
+        {
+            if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_IMPALE_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_IMPALE_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_IMPALE_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_IMPALE_25HC);
+            }
+            m_uiImpaleTimer = 10000;
+        }
+        else
+            m_uiImpaleTimer -= uiDiff;
+
+        // berserk
+        if (m_uiBerserkTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_BERSERK);
+            m_uiBerserkTimer = 60000;
+        }
+        else
+            m_uiBerserkTimer -= uiDiff;
+
         DoMeleeAttackIfReady();
     }
 };
@@ -66,17 +368,84 @@ struct MANGOS_DLL_DECL boss_acidmawAI : public ScriptedAI
     boss_acidmawAI(Creature* pCreature) : ScriptedAI(pCreature)
     {
         m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
         Reset();
     }
 
     ScriptedInstance* m_pInstance;
 
-    void Reset() {}
+    uint8 Difficulty;
+
+    // mobile
+    uint32 m_uiAcidSpewTimer;
+    uint32 m_uiParaliticBiteTimer;
+    uint32 m_uiSlimePoolTimer;
+
+    // stationary
+    uint32 m_uiAcidSpitTimer;
+    uint32 m_uiParaliticSprayTimer;
+    uint32 m_uiSweepTimer;
+
+    uint8 phase;
+    bool startPhase;
+    uint32 phaseStartTimer;
+    uint32 phaseChangeTimer;
+
+    bool hasEnraged;
+
+    uint32 m_uiDoorTimer;
+    bool doorClosed;
+
+    uint32 m_uiBerserkTimer;
+
+    void Reset() 
+    {
+        // mobile
+        m_uiAcidSpewTimer       = 5000;
+        m_uiParaliticBiteTimer  = urand(5000,10000);
+        m_uiSlimePoolTimer      = urand(20000,30000);
+
+        // stationary
+        m_uiAcidSpitTimer       = 5000;
+        m_uiParaliticSprayTimer = urand(16000,21000);
+        m_uiSweepTimer          = urand(20000,30000);
+
+        phase               = 0;    // not started yet
+        startPhase          = false;
+        phaseStartTimer     = 8000;
+        phaseChangeTimer    = 50000;
+
+        hasEnraged          = false;
+
+        m_uiDoorTimer       = 5000;
+        doorClosed          = false;
+
+        m_uiBerserkTimer    = 300000;  // 5 min
+    }
 
     void JustReachedHome()
     {
         if (m_pInstance)
+        {
             m_pInstance->SetData(TYPE_NORTHREND_BEASTS, NOT_STARTED);
+            m_pInstance->SetData(TYPE_STAGE,0);
+            if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            {
+                m_pInstance->SetData(TYPE_COUNTER, m_pInstance->GetData(TYPE_COUNTER) - 1);
+                m_pInstance->DoUpdateWorldState(UPDATE_STATE_UI_COUNT, m_pInstance->GetData(TYPE_COUNTER));
+            }
+        }
+
+        if(Creature *pTirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+            DoScriptText(SAY_WIPE, pTirion);
+
+        if(Creature *pBarret = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_BARRET)))
+        {
+            pBarret->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pBarret->SetVisibility(VISIBILITY_ON);
+        }
+
+        m_creature->ForcedDespawn();
     }
 
     void Aggro(Unit* pWho)
@@ -84,11 +453,244 @@ struct MANGOS_DLL_DECL boss_acidmawAI : public ScriptedAI
         m_creature->SetInCombatWithZone();
     }
 
+    bool IsThereAnyTwin()
+    {
+        if(GetClosestCreatureWithEntry(m_creature, NPC_DREADSCALE, 180.0f))
+            return true;
+ 
+        return false;
+    }
+
+    void SummonIcehowl()
+    {
+        if (Creature* pIcehowl = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_ICEHOWL)))
+        {
+            if (pIcehowl->isAlive()) 
+            {
+                pIcehowl->setFaction(14);
+                pIcehowl->SetVisibility(VISIBILITY_ON);
+                pIcehowl->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pIcehowl->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                pIcehowl->SetInCombatWithZone();
+
+                if(Creature *Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                    DoScriptText(SAY_SUMMON_ICEHOWL, Tirion);
+
+                if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                    m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            }
+            else
+            {
+                pIcehowl->Respawn();
+                pIcehowl->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pIcehowl->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                pIcehowl->SetInCombatWithZone();
+
+                if(Creature *Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                    DoScriptText(SAY_SUMMON_ICEHOWL, Tirion);
+
+                if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                    m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            }
+        }
+        else 
+        {
+            if(Creature *Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                    DoScriptText(SAY_SUMMON_ICEHOWL, Tirion);
+
+            if(Creature* pIcehowl = m_creature->SummonCreature(NPC_ICEHOWL, SpawnLoc[28].x, SpawnLoc[28].y, SpawnLoc[28].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME))
+            {
+                pIcehowl->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pIcehowl->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                pIcehowl->SetInCombatWithZone();
+            }
+            if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+        }
+    }
+
+    void JustDied(Unit* pKiller)
+    {
+        if(!IsThereAnyTwin())
+            SummonIcehowl();
+    }
+
     void UpdateAI(const uint32 uiDiff)
     {
+        //Return since we have no target
         if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
             return;
 
+        if(!IsThereAnyTwin() && !hasEnraged)
+        {
+                hasEnraged = true;
+                phase = 2;
+                m_creature->GetMotionMaster()->MoveChase(m_creature->getVictim());
+                DoCast(m_creature, SPELL_ENRAGE);
+        }
+
+        if (m_uiDoorTimer < uiDiff && !doorClosed)
+        {
+            if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            doorClosed = true;
+            m_uiDoorTimer = 30000;
+        }
+        else
+            m_uiDoorTimer -= uiDiff;
+
+        if (phaseStartTimer < uiDiff && !startPhase)
+        {
+            phase = 1;
+            m_creature->StopMoving();
+            m_creature->GetMotionMaster()->Clear();
+            m_creature->GetMotionMaster()->MoveIdle();
+            SetCombatMovement(false);
+            startPhase = true;
+            phaseStartTimer = 30000;
+        }
+        else
+            phaseStartTimer -= uiDiff;
+
+        // stationary
+        if(phase == 1)
+        {
+            if (phaseChangeTimer < uiDiff)
+            {
+                phase = 2;
+                m_creature->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                m_creature->GetMotionMaster()->MoveChase(m_creature->getVictim());
+                SetCombatMovement(true);
+                phaseChangeTimer = 50000;
+            }
+            else
+                phaseChangeTimer -= uiDiff;
+
+            if (m_uiAcidSpitTimer < uiDiff)
+            {
+                if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_ACID_SPIT_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_ACID_SPIT_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_ACID_SPIT_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_ACID_SPIT_25HC);
+                }
+                m_uiAcidSpitTimer = 3000;
+            }
+            else
+                m_uiAcidSpitTimer -= uiDiff;
+
+            if (m_uiParaliticSprayTimer < uiDiff)
+            {
+                if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_PARALYTIC_SPRAY_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_PARALYTIC_SPRAY_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_PARALYTIC_SPRAY_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_PARALYTIC_SPRAY_25HC);
+                }
+                m_uiParaliticSprayTimer = urand(16000,20000);
+            }
+            else
+                m_uiParaliticSprayTimer -= uiDiff;
+
+            if (m_uiSweepTimer < uiDiff)
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature, SPELL_SWEEP_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature, SPELL_SWEEP_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature, SPELL_SWEEP_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature, SPELL_SWEEP_25HC);
+                m_uiSweepTimer = urand(20000,30000);
+            }
+            else
+                m_uiSweepTimer -= uiDiff;
+        }
+
+        // mobile
+        if(phase == 2)
+        {
+            if (phaseChangeTimer < uiDiff && IsThereAnyTwin())
+            {
+                phase = 1;
+                m_creature->StopMoving();
+                m_creature->GetMotionMaster()->Clear();
+                m_creature->GetMotionMaster()->MoveIdle();
+                SetCombatMovement(false);
+                phaseChangeTimer = 50000;
+            }
+            else
+                phaseChangeTimer -= uiDiff;
+
+            if (m_uiParaliticBiteTimer < uiDiff)
+            {
+                if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_PARALYTIC_BITE_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_PARALYTIC_BITE_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_PARALYTIC_BITE_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_PARALYTIC_BITE_25HC);
+                }
+                m_uiParaliticBiteTimer = urand(5000,7000);
+            }
+            else
+                m_uiParaliticBiteTimer -= uiDiff;
+
+            if (m_uiSlimePoolTimer < uiDiff)
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature, SPELL_SLIME_POOL_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature, SPELL_SLIME_POOL_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature, SPELL_SLIME_POOL_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature, SPELL_SLIME_POOL_25HC);
+                m_uiSlimePoolTimer = urand(20000,30000);
+            }
+            else
+                m_uiSlimePoolTimer -= uiDiff;
+
+            if (m_uiAcidSpewTimer < uiDiff)
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature, SPELL_ACID_SPEW_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature, SPELL_ACID_SPEW_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature, SPELL_ACID_SPEW_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature, SPELL_ACID_SPEW_25HC);
+                m_uiAcidSpewTimer = 3000+rand()%2000;
+            }
+            else
+                m_uiAcidSpewTimer -= uiDiff;
+        }
+
+        // berserk
+        if (m_uiBerserkTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_BERSERK);
+            m_uiBerserkTimer = 60000;
+        }
+        else
+            m_uiBerserkTimer -= uiDiff;
+
         DoMeleeAttackIfReady();
     }
 };
@@ -103,17 +705,87 @@ struct MANGOS_DLL_DECL boss_dreadscaleAI : public ScriptedAI
     boss_dreadscaleAI(Creature* pCreature) : ScriptedAI(pCreature)
     {
         m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
         Reset();
     }
 
     ScriptedInstance* m_pInstance;
 
-    void Reset() {}
+    uint8 Difficulty;
+
+    // mobile
+    uint32 m_uiBurningBiteTimer;
+    uint32 m_uiMoltenSpewTimer;
+    uint32 m_uiSlimePoolTimer;
+
+    // stationary
+    uint32 m_uiFireSpitTimer;
+    uint32 m_uiBurningSprayTimer;
+    uint32 m_uiSweepTimer;
+
+    uint8 phase;
+    bool startPhase;
+    uint32 phaseStartTimer;
+    uint32 phaseChangeTimer;
+
+    bool hasEnraged;
+
+    uint32 m_uiDoorTimer;
+    bool doorClosed;
+
+    uint32 m_uiBerserkTimer;
+
+    void Reset() 
+    {
+        // mobile
+        m_uiBurningBiteTimer    = urand(5000,7000);
+        m_uiMoltenSpewTimer     = urand(15000,30000);
+        m_uiSlimePoolTimer      = urand(20000,30000);
+
+        // stationary
+        m_uiFireSpitTimer       = 3000;
+        m_uiBurningSprayTimer   = urand(15000,30000);
+        m_uiSweepTimer          = urand(20000,30000);
+
+        phase               = 0;    // not started yet
+        startPhase          = false;
+        phaseStartTimer     = 8000;
+        phaseChangeTimer    = 50000;
+
+        hasEnraged          = false;
+
+        m_uiDoorTimer       = 5000;
+        doorClosed          = false;
+
+        m_uiBerserkTimer    = 300000;  // 5 min
+    }
 
     void JustReachedHome()
     {
         if (m_pInstance)
+        {
             m_pInstance->SetData(TYPE_NORTHREND_BEASTS, NOT_STARTED);
+            m_pInstance->SetData(TYPE_STAGE,0);
+            if(!IsThereAnyTwin())
+            {
+                if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    m_pInstance->SetData(TYPE_COUNTER, m_pInstance->GetData(TYPE_COUNTER) - 1);
+                    m_pInstance->DoUpdateWorldState(UPDATE_STATE_UI_COUNT, m_pInstance->GetData(TYPE_COUNTER));
+                }
+            }
+        }
+
+        if(Creature *pTirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+            DoScriptText(SAY_WIPE, pTirion);
+
+        if(Creature *pBarret = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_BARRET)))
+        {
+            pBarret->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pBarret->SetVisibility(VISIBILITY_ON);
+        }
+
+        m_creature->ForcedDespawn();
     }
 
     void Aggro(Unit* pWho)
@@ -121,11 +793,235 @@ struct MANGOS_DLL_DECL boss_dreadscaleAI : public ScriptedAI
         m_creature->SetInCombatWithZone();
     }
 
+    bool IsThereAnyTwin()
+    {
+        if(GetClosestCreatureWithEntry(m_creature, NPC_ACIDMAW, 180.0f))
+            return true;
+ 
+        return false;
+    }
+
+    void SummonIcehowl()
+    {
+        if (Creature* pIcehowl = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_ICEHOWL)))
+        {
+            if (pIcehowl->isAlive()) 
+            {
+                pIcehowl->setFaction(14);
+                pIcehowl->SetVisibility(VISIBILITY_ON);
+                pIcehowl->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pIcehowl->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                pIcehowl->SetInCombatWithZone();
+
+                if(Creature *Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                    DoScriptText(SAY_SUMMON_ICEHOWL, Tirion);
+
+                if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                    m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            }
+            else
+            {
+                pIcehowl->Respawn();
+                pIcehowl->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pIcehowl->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                pIcehowl->SetInCombatWithZone();
+
+                if(Creature *Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                    DoScriptText(SAY_SUMMON_ICEHOWL, Tirion);
+
+                if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                    m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            }
+        }
+        else 
+        {
+            if(Creature *Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                    DoScriptText(SAY_SUMMON_ICEHOWL, Tirion);
+
+            if(Creature* pIcehowl = m_creature->SummonCreature(NPC_ICEHOWL, SpawnLoc[28].x, SpawnLoc[28].y, SpawnLoc[28].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME))
+            {
+                pIcehowl->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pIcehowl->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                pIcehowl->SetInCombatWithZone();
+            }
+            if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+        }
+    }
+
+    void JustDied(Unit* pKiller)
+    {
+        if(!IsThereAnyTwin())
+            SummonIcehowl();
+    }
+
     void UpdateAI(const uint32 uiDiff)
     {
+        //Return since we have no target
         if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
             return;
 
+        if(!IsThereAnyTwin() && !hasEnraged)
+        {
+                hasEnraged = true;
+                phase = 2;
+                m_creature->GetMotionMaster()->MoveChase(m_creature->getVictim());
+                DoCast(m_creature, SPELL_ENRAGE);
+        }
+
+        if (phaseStartTimer < uiDiff && !startPhase)
+        {
+            phase = 2;
+            m_creature->GetMotionMaster()->MoveChase(m_creature->getVictim());
+            SetCombatMovement(true);
+            startPhase = true;
+            phaseStartTimer = 30000;
+        }
+        else
+            phaseStartTimer -= uiDiff;
+
+        // stationary
+        if(phase == 1)
+        {
+            if (phaseChangeTimer < uiDiff)
+            {
+                phase = 2;
+                m_creature->GetMotionMaster()->MoveChase(m_creature->getVictim());
+                SetCombatMovement(true);
+                phaseChangeTimer = 50000;
+            }
+            else
+                phaseChangeTimer -= uiDiff;
+
+            if (m_uiFireSpitTimer < uiDiff)
+            {
+                if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_FIRE_SPIT_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_FIRE_SPIT_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_FIRE_SPIT_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_FIRE_SPIT_25HC);
+                }
+                m_uiFireSpitTimer = urand(3000, 5000);
+            }
+            else
+                m_uiFireSpitTimer -= uiDiff;
+
+            if (m_uiBurningSprayTimer < uiDiff)
+            {
+                if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_BURNING_SPRAY_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_BURNING_SPRAY_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_BURNING_SPRAY_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_BURNING_SPRAY_25HC);
+                }
+                m_uiBurningSprayTimer = urand(15000,20000);
+            }
+            else
+                m_uiBurningSprayTimer -= uiDiff;
+
+            if (m_uiSweepTimer < uiDiff)
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature, SPELL_SWEEP_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature, SPELL_SWEEP_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature, SPELL_SWEEP_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature, SPELL_SWEEP_25HC);
+                m_uiSweepTimer = urand(20000,30000);
+            }
+            else
+                m_uiSweepTimer -= uiDiff;
+        }
+
+        // mobile
+        if(phase == 2)
+        {
+            if (phaseChangeTimer < uiDiff && IsThereAnyTwin())
+            {
+                phase = 1;
+                m_creature->StopMoving();
+                m_creature->GetMotionMaster()->Clear();
+                m_creature->GetMotionMaster()->MoveIdle();
+                SetCombatMovement(false);
+                phaseChangeTimer = 50000;
+            }
+            else
+                phaseChangeTimer -= uiDiff;
+
+            if (m_uiBurningBiteTimer < uiDiff)
+            {
+                if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(pTarget, SPELL_BURNING_BITE_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(pTarget, SPELL_BURNING_BITE_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(pTarget, SPELL_BURNING_BITE_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(pTarget, SPELL_BURNING_BITE_25HC);
+                }
+                m_uiBurningBiteTimer = urand(5000,7000);
+            }
+            else
+                m_uiBurningBiteTimer -= uiDiff;
+
+            if (m_uiSlimePoolTimer < uiDiff)
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    //DoCast(m_creature, SPELL_SLIME_POOL_10);
+                    m_creature->SummonCreature(NPC_SLIME_POOL, m_creature->GetPositionX(), m_creature->GetPositionY(), m_creature->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN, 30000);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    //DoCast(m_creature, SPELL_SLIME_POOL_25);
+                    m_creature->SummonCreature(NPC_SLIME_POOL, m_creature->GetPositionX(), m_creature->GetPositionY(), m_creature->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN, 30000);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    //DoCast(m_creature, SPELL_SLIME_POOL_10HC);
+                    m_creature->SummonCreature(NPC_SLIME_POOL, m_creature->GetPositionX(), m_creature->GetPositionY(), m_creature->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN, 45000);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    //DoCast(m_creature, SPELL_SLIME_POOL_25HC);
+                    m_creature->SummonCreature(NPC_SLIME_POOL, m_creature->GetPositionX(), m_creature->GetPositionY(), m_creature->GetPositionZ(), 0, TEMPSUMMON_TIMED_DESPAWN, 60000);
+                m_uiSlimePoolTimer = urand(20000,30000);
+            }
+            else
+                m_uiSlimePoolTimer -= uiDiff;
+
+            if (m_uiMoltenSpewTimer < uiDiff)
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(m_creature, SPELL_MOLTEN_SPEW_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(m_creature, SPELL_MOLTEN_SPEW_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(m_creature, SPELL_MOLTEN_SPEW_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(m_creature, SPELL_MOLTEN_SPEW_25HC);
+                m_uiMoltenSpewTimer = urand(15000,20000);
+            }
+            else
+                m_uiMoltenSpewTimer -= uiDiff;
+        }
+
+        // berserk
+        if (m_uiBerserkTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_BERSERK);
+            m_uiBerserkTimer = 60000;
+        }
+        else
+            m_uiBerserkTimer -= uiDiff;
+
         DoMeleeAttackIfReady();
     }
 };
@@ -140,17 +1036,84 @@ struct MANGOS_DLL_DECL boss_icehowlAI : public ScriptedAI
     boss_icehowlAI(Creature* pCreature) : ScriptedAI(pCreature)
     {
         m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
         Reset();
     }
 
     ScriptedInstance* m_pInstance;
 
-    void Reset() {}
+    uint8 Difficulty;
+
+    uint32 m_uiFerociousButtTimer;
+    uint32 m_uiArticBreathTimer;
+    uint32 m_uiWhirlTimer;
+    uint32 m_uiMassiveCrashTimer;
+    uint32 m_uiTrampleTimer;
+    uint32 m_uiFrothingRageTimer;
+
+    uint8 m_uiTrampleStage;
+
+    bool m_bIsTrample;
+    bool m_bTrampleCasted;
+    bool m_bMovementStarted;
+    bool m_bAdrenalineCasted;
+
+    uint32 m_uiBerserkTimer;
+
+    uint32 m_uiDoorTimer;
+    bool doorClosed;
+
+    float fPosX, fPosY, fPosZ;
+
+    void Reset() 
+    {
+        m_uiFerociousButtTimer  = urand(20000,30000);
+        m_uiArticBreathTimer    = urand(25000,30000);
+        m_uiWhirlTimer          = urand(20000,25000);
+        m_uiMassiveCrashTimer   = 45000;
+        m_uiTrampleTimer        = 50000;
+        m_uiFrothingRageTimer   = 30000;
+
+        m_uiBerserkTimer        = 300000;  // 5 min
+
+        m_uiDoorTimer       = 5000;
+        doorClosed          = false;
+
+        m_uiTrampleStage    = 0;
+
+        m_bMovementStarted  = false;
+        m_bTrampleCasted    = false;
+        m_bIsTrample        = false;
+        m_bAdrenalineCasted = false;
+        fPosX = 0;
+        fPosY = 0;
+        fPosZ = 0;
+    }
 
     void JustReachedHome()
     {
         if (m_pInstance)
+        {
             m_pInstance->SetData(TYPE_NORTHREND_BEASTS, NOT_STARTED);
+            m_pInstance->SetData(TYPE_STAGE,0);
+            if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            {
+                m_pInstance->SetData(TYPE_COUNTER, m_pInstance->GetData(TYPE_COUNTER) - 1);
+                m_pInstance->DoUpdateWorldState(UPDATE_STATE_UI_COUNT, m_pInstance->GetData(TYPE_COUNTER));
+            }
+        }
+
+        if(Creature *pTirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+            DoScriptText(SAY_WIPE, pTirion);
+
+        if(Creature *pBarret = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_BARRET)))
+        {
+            pBarret->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pBarret->SetVisibility(VISIBILITY_ON);
+        }
+
+        m_creature->SetVisibility(VISIBILITY_OFF);
+        m_creature->setFaction(35);
     }
 
     void Aggro(Unit* pWho)
@@ -158,11 +1121,270 @@ struct MANGOS_DLL_DECL boss_icehowlAI : public ScriptedAI
         m_creature->SetInCombatWithZone();
     }
 
+    void JustDied(Unit* pKiller)
+    {
+        if (m_pInstance)
+        {
+            m_pInstance->SetData(TYPE_NORTHREND_BEASTS, DONE);
+            m_pInstance->SetData(TYPE_STAGE,0);
+        }
+
+        if(Creature *pTirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+            DoScriptText(SAY_VICTORY, pTirion);
+
+        if(Creature *pBarret = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_BARRET)))
+        {
+            pBarret->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pBarret->SetVisibility(VISIBILITY_ON);
+        }
+    }
+    void MovementInform(uint32 type, uint32 id)
+    {
+        if(!m_pInstance) 
+            return;
+
+        //if(type != POINT_MOTION_TYPE) 
+            //return;
+
+        if(id != 1 && m_bMovementStarted) 
+            m_creature->GetMotionMaster()->MovePoint(1, fPosX, fPosY, fPosZ);
+        else    
+        {
+            m_creature->GetMotionMaster()->MovementExpired();
+            m_bMovementStarted = false;
+            SetCombatMovement(true);
+            m_creature->GetMotionMaster()->MoveChase(m_creature->getVictim());
+        }
+    }
+
+    void DoCastSurgeOfAdrenaline()
+    {
+        Map *map = m_creature->GetMap();
+        if (map->IsDungeon())
+        {
+            Map::PlayerList const &PlayerList = map->GetPlayers();
+
+            if (PlayerList.isEmpty())
+                return;
+
+            for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+            {
+                if (i->getSource()->isAlive())
+                    i->getSource()->CastSpell(i->getSource(), SPELL_SURGE_OF_ADRENALINE, true);
+            }
+        } 
+    }
+
+    void DamageTaken(Unit *done_by, uint32 &uiDamage)
+    {
+        // increase damage if dazzed
+        if(m_creature->HasAura(SPELL_STAGGERED_DAZE))
+            uiDamage += uiDamage/2;
+    }
+
     void UpdateAI(const uint32 uiDiff)
     {
+        //Return since we have no target
         if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
             return;
 
+        if (m_uiDoorTimer < uiDiff && !doorClosed)
+        {
+            if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            doorClosed = true;
+            m_uiDoorTimer = 30000;
+        }
+        else
+            m_uiDoorTimer -= uiDiff;
+
+        // spells
+        if (m_bIsTrample)
+        {
+            if(m_uiTrampleTimer < uiDiff)
+            {
+                switch(m_uiTrampleStage)
+                {
+                    // go to center
+                case 0:
+                    m_creature->GetMap()->CreatureRelocation(m_creature, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z, 0);
+                    m_creature->SendMonsterMove(SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z, SPLINETYPE_NORMAL, m_creature->GetSplineFlags(), 1);
+                    //m_creature->GetMotionMaster()->MovePoint(0, SpawnLoc[1].y, SpawnLoc[1].z);
+                    m_creature->GetMotionMaster()->MoveIdle();
+                    ++m_uiTrampleStage;
+                    m_uiTrampleTimer = 3000;
+                    break;
+                    // cast massive crash & stop
+                case 1:
+                    m_creature->GetMotionMaster()->MoveIdle();
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(m_creature, SPELL_MASSIVE_CRASH_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(m_creature, SPELL_MASSIVE_CRASH_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(m_creature, SPELL_MASSIVE_CRASH_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(m_creature, SPELL_MASSIVE_CRASH_25HC);
+                    ++m_uiTrampleStage;
+                    m_uiTrampleTimer = 8000;
+                    break;
+                    // wait 5 secs -> cast surge of addrenaline on players
+                case 2:
+                    if (Difficulty == RAID_DIFFICULTY_10MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    {
+                        if(!m_bAdrenalineCasted)
+                        {
+                            m_bAdrenalineCasted = true;
+                            DoCastSurgeOfAdrenaline();
+                        }
+                    }
+                    // pick a target and run for it
+                    if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+                    {
+                        pTarget->GetPosition(fPosX, fPosY, fPosZ);
+                        DoScriptText(EMOTE_TRAMPLE, m_creature, pTarget);
+                        m_bMovementStarted = true;
+                        //m_creature->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                        //m_creature->SetSpeedRate(MOVE_RUN, 4.0f);
+                        m_creature->GetMotionMaster()->Clear();
+                        m_creature->GetMotionMaster()->MovePoint(1, pTarget->GetPositionX(), pTarget->GetPositionY(), pTarget->GetPositionZ());
+                        SetCombatMovement(false);
+                        if(m_creature->HasAura(SPELL_SURGE_OF_ADRENALINE, EFFECT_INDEX_0))
+                            m_creature->RemoveAurasDueToSpell(SPELL_SURGE_OF_ADRENALINE);
+                    }
+                    ++m_uiTrampleStage;
+                    m_uiTrampleTimer = 500;
+                    break;
+                    // run to the target; if target hit cast Trample, else go to next phase
+                case 3:
+                    if (m_bMovementStarted)
+                    {
+                        Map* pMap = m_creature->GetMap();
+                        Map::PlayerList const &lPlayers = pMap->GetPlayers();
+                        for(Map::PlayerList::const_iterator itr = lPlayers.begin(); itr != lPlayers.end(); ++itr)
+                        {
+                            Unit* pPlayer = itr->getSource();
+                            if (!pPlayer) 
+                                continue;
+                            if (pPlayer->isAlive() && pPlayer->IsWithinDistInMap(m_creature, 5.0f))
+                            {
+                                DoCast(pPlayer, SPELL_TRAMPLE);
+                                m_bTrampleCasted = true;
+                                m_bMovementStarted = false;
+                                m_creature->GetMotionMaster()->MovementExpired();
+                                m_creature->GetMotionMaster()->MoveChase(m_creature->getVictim());
+                            }
+                        }
+                    } 
+                    else 
+                        ++m_uiTrampleStage;
+
+                    if(m_bTrampleCasted)
+                        ++m_uiTrampleStage;
+                    break;
+                    // if trample not casted, cast stun, else continue
+                case 4:
+                    if(!m_bTrampleCasted)
+                    {
+                        DoScriptText(EMOTE_STUN, m_creature);
+                        DoCast(m_creature, SPELL_STAGGERED_DAZE);
+                    }
+                    m_bMovementStarted = false;
+                    m_bAdrenalineCasted = false;
+                    m_bTrampleCasted = false;
+                    m_creature->GetMotionMaster()->MovementExpired();
+                    m_creature->GetMotionMaster()->MoveChase(m_creature->getVictim());
+                    SetCombatMovement(true);
+                    m_uiMassiveCrashTimer = urand(45000, 50000);
+                    m_bIsTrample = false;
+                    break;
+                default:
+                    m_uiTrampleTimer = 100000;
+                }
+            }else m_uiTrampleTimer -= uiDiff;
+        }
+
+        if(m_bIsTrample)
+            return;
+
+        if (m_uiFrothingRageTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_FROTHING_RAGE);
+            m_uiFrothingRageTimer = 40000;
+        }
+        else
+            m_uiFrothingRageTimer -= uiDiff;
+
+        // berserk
+        if (m_uiBerserkTimer < uiDiff)
+        {
+            DoCast(m_creature, SPELL_BERSERK);
+            m_uiBerserkTimer = 60000;
+        }
+        else
+            m_uiBerserkTimer -= uiDiff;
+
+        if (m_uiMassiveCrashTimer < uiDiff)
+        {
+            m_bIsTrample = true;
+            m_uiTrampleTimer = 500;
+            m_uiTrampleStage = 0;
+            m_uiMassiveCrashTimer = urand(45000, 50000);
+        }
+        else
+            m_uiMassiveCrashTimer -= uiDiff;
+
+        if (m_uiWhirlTimer < uiDiff)
+        {
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature, SPELL_WHIRL_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature, SPELL_WHIRL_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature, SPELL_WHIRL_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature, SPELL_WHIRL_25HC);
+            m_uiWhirlTimer = urand(20000, 25000);
+        }
+        else
+            m_uiWhirlTimer -= uiDiff;
+
+        if (m_uiArticBreathTimer < uiDiff)
+        {
+            if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_ARCTIC_BREATH_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_ARCTIC_BREATH_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_ARCTIC_BREATH_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_ARCTIC_BREATH_25HC);
+            }
+            m_uiArticBreathTimer = urand(25000,30000);
+        }
+        else
+            m_uiArticBreathTimer -= uiDiff;
+
+        if (m_uiFerociousButtTimer < uiDiff)
+        {
+            if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_FEROCIOUS_BUTT_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_FEROCIOUS_BUTT_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_FEROCIOUS_BUTT_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_FEROCIOUS_BUTT_25HC);
+            }
+            m_uiFerociousButtTimer = urand(20000, 30000);
+        }
+        else
+            m_uiFerociousButtTimer -= uiDiff;
+
         DoMeleeAttackIfReady();
     }
 };
@@ -172,6 +1394,126 @@ CreatureAI* GetAI_boss_icehowl(Creature* pCreature)
     return new boss_icehowlAI(pCreature);
 }
 
+// snobold
+struct MANGOS_DLL_DECL mob_snoboldAI : public ScriptedAI
+{
+    mob_snoboldAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+
+    uint32 spellTimer;
+    uint32 FireBombTimer;
+
+    void Reset()
+    {
+        spellTimer = 10000;
+        FireBombTimer = 10000 + rand()%8000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (spellTimer < uiDiff)
+        {
+            switch(urand(0, 1))
+            {
+            case 0:
+                if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                    DoCast(pTarget, SPELL_BATTER);
+                break;
+            case 1:
+                if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+                    DoCast(pTarget, SPELL_HEADCRACK);
+                break;
+            }
+            spellTimer = 10000;
+        }else spellTimer -= uiDiff;
+
+        if(FireBombTimer < uiDiff)
+        {
+            //DoCast(m_creature, SPELL_FIREBOMB);
+            if(Unit *target = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                if(Creature *pBomb = m_creature->SummonCreature(NPC_FIREBOMB, 
+                    target->GetPositionX(), target->GetPositionY(), target->GetPositionZ(), 0, 
+                    TEMPSUMMON_TIMED_DESPAWN, 30000))
+                {
+                    pBomb->CastSpell(pBomb, SPELL_FIREBOMB_DOT, false);
+                    pBomb->addUnitState(UNIT_STAT_ROOT);
+                    pBomb->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                    pBomb->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+                }
+            }
+            FireBombTimer = 10000 + rand()%8000;
+        }
+        else FireBombTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+CreatureAI* GetAI_mob_snobold(Creature* pCreature)
+{
+    return new mob_snoboldAI (pCreature);
+}
+
+// slime pool
+struct MANGOS_DLL_DECL mob_slime_poolAI : public ScriptedAI
+{
+    mob_slime_poolAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        Reset();
+        pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+        pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+        SetCombatMovement(false);
+    }
+    ScriptedInstance *m_pInstance;
+
+    uint32 spellTimer;
+
+    void Reset()
+    {
+        spellTimer = 1000;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        //Return since we have no target
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        if (spellTimer < uiDiff)
+        {
+            Map *map = m_creature->GetMap();
+            if (map->IsDungeon())
+            {
+                Map::PlayerList const &PlayerList = map->GetPlayers();
+
+                if (PlayerList.isEmpty())
+                    return;
+
+                for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+                {
+                    if (i->getSource()->isAlive() && m_creature->GetDistance2d(i->getSource()->GetPositionX(), i->getSource()->GetPositionY()) < 2)
+                        i->getSource()->DealDamage(i->getSource(), 2000, NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NATURE, NULL, false);
+                }
+            } 
+            spellTimer = 1000;
+        }else spellTimer -= uiDiff;
+    }
+};
+
+CreatureAI* GetAI_mob_slime_pool(Creature* pCreature)
+{
+    return new mob_slime_poolAI (pCreature);
+}
+
 void AddSC_northrend_beasts()
 {
     Script* newscript;
@@ -182,6 +1524,11 @@ void AddSC_northrend_beasts()
     newscript->RegisterSelf();
 
     newscript = new Script;
+    newscript->Name = "mob_snobold_vassal";
+    newscript->GetAI = &GetAI_mob_snobold;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
     newscript->Name = "boss_acidmaw";
     newscript->GetAI = &GetAI_boss_acidmaw;
     newscript->RegisterSelf();
@@ -192,6 +1539,11 @@ void AddSC_northrend_beasts()
     newscript->RegisterSelf();
 
     newscript = new Script;
+    newscript->Name = "mob_slime_pool";
+    newscript->GetAI = &GetAI_mob_slime_pool;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
     newscript->Name = "boss_icehowl";
     newscript->GetAI = &GetAI_boss_icehowl;
     newscript->RegisterSelf();
diff --git a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_twin_valkyr.cpp b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_twin_valkyr.cpp
index 0d384fa..935a20c 100644
--- a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_twin_valkyr.cpp
+++ b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/boss_twin_valkyr.cpp
@@ -24,28 +24,483 @@ EndScriptData */
 #include "precompiled.h"
 #include "trial_of_the_crusader.h"
 
+enum
+{
+    SAY_AGGRO       = -1605052,
+    SAY_PACT        = -1605053,
+    SAY_DARK        = -1605054,
+    SAY_LIGHT       = -1605055,
+    SAY_SLAY1       = -1605056,
+    SAY_SLAY2       = -1605057,
+    SAY_DEATH       = -1605058,
+    SAY_BERSERK     = -1605059,
+    SAY_OUTRO_ALY   = -1605081,
+    SAY_OUTRO_HORDE = -1605080,
+    SAY_OUTRO_TIRION= -1605026,
+
+    // light & dark
+    SPELL_DARK_ESSENCE          = 65684,
+    SPELL_SURGE_OF_SPEED        = 67243,
+    SPELL_LIGHT_ESSENCE         = 65686,
+
+    NPC_CONCENTRATED_LIGHT      = 34630,
+    NPC_CONCENTRATED_DARKNESS   = 34628,
+
+    SPELL_POWERING_UP           = 67604,
+    SPELL_EMPOWERED_DARKNESS    = 67215,
+    SPELL_EMPOWERED_LIGHT       = 67218,
+    SPELL_UNLEASHED_DARK_10     = 65808,
+    SPELL_UNLEASHED_DARK_25     = 67172,
+    SPELL_UNLEASHED_DARK_10HC   = 67173,
+    SPELL_UNLEASHED_DARK_25HC   = 67174,
+    SPELL_UNLEASHED_LIGHT_10    = 65795,
+    SPELL_UNLEASHED_LIGHT_25    = 67238,
+    SPELL_UNLEASHED_LIGHT_10HC  = 67239,
+    SPELL_UNLEASHED_LIGHT_25HC  = 67240,
+
+    // fjola lightbane
+    SPELL_TWIN_SPIKE_LIGHT_10   = 66075,
+    SPELL_TWIN_SPIKE_LIGHT_25   = 67312,
+    SPELL_TWIN_SPIKE_LIGHT_10HC = 67313,
+    SPELL_TWIN_SPIKE_LIGHT_25HC = 67314,
+    SPELL_LIGHT_SURGE_10        = 65766,
+    SPELL_LIGHT_SURGE_25        = 67271,
+    SPELL_LIGHT_SURGE_10HC      = 67270,
+    SPELL_LIGHT_SURGE_25HC      = 67272,
+    SPELL_SHIELD_OF_LIGHTS_10   = 65858,
+    SPELL_SHIELD_OF_LIGHTS_25   = 67259,
+    SPELL_SHIELD_OF_LIGHTS_10HC = 67260,
+    SPELL_SHIELD_OF_LIGHTS_25HC = 67261, 
+    SPELL_TWIN_PACT_LIGHT_10    = 65876,
+    SPELL_TWIN_PACT_LIGHT_25    = 67306,
+    SPELL_TWIN_PACT_LIGHT_10HC  = 67307,
+    SPELL_TWIN_PACT_LIGHT_25HC  = 67308,
+    SPELL_LIGHT_VORTEX_10       = 66046,
+    SPELL_LIGHT_VORTEX_25       = 67206,
+    SPELL_LIGHT_VORTEX_10HC     = 67207,
+    SPELL_LIGHT_VORTEX_25HC     = 67208,
+    SPELL_TOUCH_OF_LIGHT_10     = 65950,
+    SPELL_TOUCH_OF_LIGHT_25     = 67296,
+    SPELL_TOUCH_OF_LIGHT_10HC   = 67297,
+    SPELL_TOUCH_OF_LIGHT_25HC   = 67298,
+
+    SPELL_POWER_TWINS_10        = 65916,
+    SPELL_POWER_TWINS_25        = 67248,
+    SPELL_POWER_TWINS_10HC      = 67249,
+    SPELL_POWER_TWINS_25HC      = 67250,
+    SPELL_VALKYR_QUICKNESS      = 65949,
+
+    // eydis darkbane
+    SPELL_TWIN_SPIKE_DARK_10        = 66069,
+    SPELL_TWIN_SPIKE_DARK_25        = 67309,
+    SPELL_TWIN_SPIKE_DARK_10HC      = 67310,
+    SPELL_TWIN_SPIKE_DARK_25HC      = 67311,
+    SPELL_DARK_SURGE_10             = 65768,
+    SPELL_DARK_SURGE_25             = 67262,
+    SPELL_DARK_SURGE_10HC           = 67263,
+    SPELL_DARK_SURGE_25HC           = 67264,
+    SPELL_SHIELD_OF_DARKNESS_10     = 65874,
+    SPELL_SHIELD_OF_DARKNESS_25     = 67256,
+    SPELL_SHIELD_OF_DARKNESS_10HC   = 67257,
+    SPELL_SHIELD_OF_DARKNESS_25HC   = 67258,
+    SPELL_TWIN_PACT_DARK_10         = 65875,
+    SPELL_TWIN_PACT_DARK_25         = 67303,
+    SPELL_TWIN_PACT_DARK_10HC       = 67304,
+    SPELL_TWIN_PACT_DARK_25HC       = 67305,
+    SPELL_DARK_VORTEX_10            = 66058,
+    SPELL_DARK_VORTEX_25            = 67182,
+    SPELL_DARK_VORTEX_10HC          = 67183,
+    SPELL_DARK_VORTEX_25HC          = 67184,
+    SPELL_TOUCH_OF_DARKNESS_10      = 66001,
+    SPELL_TOUCH_OF_DARKNESS_25      = 67281,
+    SPELL_TOUCH_OF_DARKNESS_10HC    = 67282,
+    SPELL_TOUCH_OF_DARKNESS_25HC    = 67283,
+
+    SPELL_BERSERK               = 26662,
+};
+
+enum Equipment
+{
+    EQUIP_MAIN_1         = 49206, //49303,
+    EQUIP_OFFHAND_1      = 47146,
+    EQUIP_RANGED_1       = 47267,
+    EQUIP_MAIN_2         = 42161, //45990,
+    EQUIP_OFFHAND_2      = 47470,
+    EQUIP_RANGED_2       = 47267,
+    EQUIP_DONE           = EQUIP_NO_CHANGE,
+};
+
+struct LocationsXY
+{
+    float x, y;
+    uint32 id;
+};
+static LocationsXY OrbLoc[]=
+{
+    {563.687622f, 89.948326f},      // West
+    {597.263062f, 106.157730f},     // North-West
+    {612.368408f, 139.41394f},      // North
+    {594.863525f, 176.002731f},     // North-east
+    {563.728516f, 181.137650f},     // East
+    {532.748169f, 175.445145f},     // South-east
+    {515.690369f, 139.53311f},      // South
+    {530.050049f, 106.749100f},     // South-west
+};
+
+#define LOC_Z           394.33f
+#define ROOM_RADIUS     100.0f
+
 /*######
 ## boss_fjola
 ######*/
 
 struct MANGOS_DLL_DECL boss_fjolaAI : public ScriptedAI
 {
-    boss_fjolaAI(Creature* pCreature) : ScriptedAI(pCreature) {Reset();}
+    boss_fjolaAI(Creature* pCreature) : ScriptedAI(pCreature) 
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        SetEquipmentSlots(false, EQUIP_MAIN_1, -1, -1);
+        doorClosed = false;
+        Reset();
+    }
 
     ScriptedInstance* m_pInstance;
 
-    void Reset() {}
+    uint8 Difficulty;
+
+    uint32 m_uiTwinSpikeTimer;
+    uint32 m_uiSpecialSpellTimer;
+    uint32 m_uiTwinPactTimer;
+    uint32 m_uiLightToutchTimer;
+    uint32 m_uiCastTimeOut;
+
+    uint32 m_uiDoorTimer;
+    bool doorClosed;
+
+    uint32 m_uiBerserkTimer;
+
+    uint32 TeamInInstance;
+
+    void Reset() 
+    {
+        m_uiTwinSpikeTimer      = 7000;
+        m_uiSpecialSpellTimer   = urand(55000, 60000); 
+        m_uiTwinPactTimer       = 900000;
+        m_uiLightToutchTimer    = 12000;
+        m_uiCastTimeOut         = 900000;
+
+        m_uiDoorTimer       = 5000;
+
+        TeamInInstance = GetFaction();
+
+        m_uiBerserkTimer    = 900000;  // 15 min
+    }
+
+    void JustDied(Unit* pKiller)
+    {
+        DoScriptText(SAY_DEATH, m_creature);
+
+        if(TeamInInstance == ALLIANCE)
+        {
+            if(Creature *Varian = GetClosestCreatureWithEntry(m_creature, NPC_VARIAN, 150.0f))
+                DoScriptText(SAY_OUTRO_ALY, Varian);
+        }
+        else if(TeamInInstance == HORDE)
+        {
+            if(Creature *Garrosh = GetClosestCreatureWithEntry(m_creature, NPC_GARROSH, 150.0f))
+                DoScriptText(SAY_OUTRO_HORDE, Garrosh);
+        }
+
+        if(m_pInstance) 
+        {
+            if(Creature* pEydis = GetClosestCreatureWithEntry(m_creature, NPC_EYDIS, 150.0f))
+            //if(Creature* pEydis = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_EYDIS)))
+                if(pEydis->isAlive())
+                    pEydis->DealDamage(pEydis, pEydis->GetHealth(), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+
+            m_pInstance->SetData(TYPE_TWIN_VALKYR, DONE);
+            RemoveAllAuras();
+        }
+        if(Creature *pBarret = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_BARRET)))
+        {
+            pBarret->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pBarret->SetVisibility(VISIBILITY_ON);
+        }
+    }
 
     void Aggro(Unit* pWho)
     {
         m_creature->SetInCombatWithZone();
+        DoScriptText(SAY_AGGRO, m_creature);  
+
+        if(m_pInstance)
+        {
+            m_pInstance->SetData(TYPE_TWIN_VALKYR, IN_PROGRESS);
+            if(Creature* pEydis = GetClosestCreatureWithEntry(m_creature, NPC_EYDIS, 150.0f))
+            //if(Creature* pEydis = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_EYDIS)))
+            {
+                if(pEydis->isAlive())
+                    pEydis->AI()->AttackStart(m_creature->getVictim());
+            }
+        }
+
+        if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+            DoCast(m_creature, SPELL_LIGHT_SURGE_10);
+        if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+            DoCast(m_creature, SPELL_LIGHT_SURGE_25);
+        if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+            DoCast(m_creature, SPELL_LIGHT_SURGE_10HC);
+        if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            DoCast(m_creature, SPELL_LIGHT_SURGE_25HC);
+    }
+
+    void KilledUnit(Unit* pVictim)
+    {
+        switch(urand(0, 1))
+        {
+        case 0: DoScriptText(SAY_SLAY1, m_creature); break;
+        case 1: DoScriptText(SAY_SLAY2, m_creature); break;
+        }
+    }
+
+    void JustReachedHome()
+    {
+        if (m_pInstance)
+        {
+            if(m_pInstance->GetData(TYPE_TWIN_VALKYR) != NOT_STARTED)
+            {
+                if(Creature* pEydis = GetClosestCreatureWithEntry(m_creature, NPC_EYDIS, 150.0f))
+                //if(Creature *pEydis = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_EYDIS))) 
+                {
+                    if(!pEydis->isAlive())
+                        pEydis->Respawn();
+                }
+                if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    m_pInstance->SetData(TYPE_COUNTER, m_pInstance->GetData(TYPE_COUNTER) - 1);
+                    m_pInstance->DoUpdateWorldState(UPDATE_STATE_UI_COUNT, m_pInstance->GetData(TYPE_COUNTER));
+                }
+                m_pInstance->SetData(TYPE_TWIN_VALKYR, NOT_STARTED);
+            }
+        }
+        //m_creature->GetMotionMaster()->MovePoint(0, WipeLoc[1].x, WipeLoc[1].y, m_creature->GetPositionZ());
+    }
+
+    uint32 GetFaction()
+    {
+        uint32 faction = 0;
+        Map *map = m_creature->GetMap();
+        if (map->IsDungeon())
+        {
+            Map::PlayerList const &PlayerList = map->GetPlayers();
+
+            if (!PlayerList.isEmpty())
+            {
+                if (Player* pPlayer = PlayerList.begin()->getSource())
+                    faction = pPlayer->GetTeam();
+            }
+        }
+        return faction;
+    }
+
+    void DamageTaken(Unit *pDoneBy, uint32 &uiDamage)
+    {
+        if(pDoneBy->GetGUID() == m_creature->GetGUID()) 
+            return;
+ 
+        if(pDoneBy->GetTypeId() == TYPEID_PLAYER)
+        {
+            if(pDoneBy->HasAura(SPELL_LIGHT_ESSENCE))
+                uiDamage /= 2;
+            else if(pDoneBy->HasAura(SPELL_DARK_ESSENCE))
+                uiDamage += uiDamage/2;
+        }
+        else
+            return;
+
+        if(uiDamage > 0)
+        {
+            if(Creature* pEydis = GetClosestCreatureWithEntry(m_creature, NPC_EYDIS, 150.0f))
+            //if(Creature* pEydis = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_EYDIS))) 
+                pEydis->DealDamage(pEydis, uiDamage, NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+        }
+    }
+
+    void RemoveAllAuras()
+    {
+        Map *map = m_creature->GetMap();
+        if (map->IsDungeon())
+        {
+            Map::PlayerList const &PlayerList = map->GetPlayers();
+
+            if (PlayerList.isEmpty())
+                return;
+
+            for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+            {
+                if (i->getSource()->isAlive())
+                {
+                    if(i->getSource()->HasAura(SPELL_EMPOWERED_DARKNESS, EFFECT_INDEX_0))
+                        i->getSource()->RemoveAurasDueToSpell(SPELL_EMPOWERED_DARKNESS);
+                    if(i->getSource()->HasAura(SPELL_EMPOWERED_LIGHT, EFFECT_INDEX_0))
+                        i->getSource()->RemoveAurasDueToSpell(SPELL_EMPOWERED_LIGHT);
+                }
+            }
+        } 
     }
 
     void UpdateAI(const uint32 uiDiff)
     {
+        //Return since we have no target
         if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
             return;
 
+        if(Creature* pEydis = GetClosestCreatureWithEntry(m_creature, NPC_EYDIS, 150.0f))
+        //if(Creature* pEydis = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_EYDIS))) 
+        {
+            if(m_creature->getVictim()->GetGUID() == pEydis->GetGUID()) 
+                EnterEvadeMode();
+        }
+
+        if (m_uiDoorTimer < uiDiff && !doorClosed)
+        {
+            if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            doorClosed = true;
+            m_uiDoorTimer = 30000;
+        }
+        else
+            m_uiDoorTimer -= uiDiff;
+
+        if (m_uiCastTimeOut < uiDiff)
+        {
+            m_pInstance->SetData(TYPE_TWINS_CASTING, NOT_STARTED);
+            m_uiCastTimeOut = 600000;
+        }
+        else
+            m_uiCastTimeOut -= uiDiff;
+
+        // spells
+        if (m_uiTwinSpikeTimer < uiDiff)
+        {
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_TWIN_SPIKE_LIGHT_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_TWIN_SPIKE_LIGHT_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_TWIN_SPIKE_LIGHT_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_TWIN_SPIKE_LIGHT_25HC);
+            m_uiTwinSpikeTimer = 5000 + urand(1000, 5000);
+        }
+        else
+            m_uiTwinSpikeTimer -= uiDiff;
+
+        if (m_uiLightToutchTimer < uiDiff)
+        {
+            if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_TOUCH_OF_LIGHT_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_TOUCH_OF_LIGHT_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_TOUCH_OF_LIGHT_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_TOUCH_OF_LIGHT_25HC);
+            }
+            m_uiLightToutchTimer = 10000 + urand(1000, 4000);
+        }
+        else
+            m_uiLightToutchTimer -= uiDiff;
+
+        if (m_uiSpecialSpellTimer < uiDiff)
+        {
+            if(m_pInstance->GetData(TYPE_TWINS_CASTING) != IN_PROGRESS)
+            {
+                switch (urand(0, 1))
+                {
+                case 0:
+                    DoScriptText(SAY_LIGHT, m_creature);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(m_creature, SPELL_LIGHT_VORTEX_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(m_creature, SPELL_LIGHT_VORTEX_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(m_creature, SPELL_LIGHT_VORTEX_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(m_creature, SPELL_LIGHT_VORTEX_25HC);
+
+                    m_pInstance->SetData(TYPE_TWINS_CASTING, IN_PROGRESS);
+                    m_uiCastTimeOut = 9000;
+                    break;
+                case 1:
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(m_creature, SPELL_SHIELD_OF_LIGHTS_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(m_creature, SPELL_SHIELD_OF_LIGHTS_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(m_creature, SPELL_SHIELD_OF_LIGHTS_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(m_creature, SPELL_SHIELD_OF_LIGHTS_25HC);
+
+                    m_uiTwinPactTimer = 500;
+                    m_pInstance->SetData(TYPE_TWINS_CASTING, IN_PROGRESS);
+                    m_uiCastTimeOut = 16000;
+                    break;
+                }
+                m_uiSpecialSpellTimer = urand(60000, 65000);
+            }
+            else
+                m_uiSpecialSpellTimer = urand(55000, 60000);
+        }
+        else
+            m_uiSpecialSpellTimer -= uiDiff;
+
+        if (m_uiTwinPactTimer < uiDiff)
+        {
+            if(Creature* pEydis = GetClosestCreatureWithEntry(m_creature, NPC_EYDIS, 150.0f))
+            //if(Creature* pEydis = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_EYDIS))) 
+            {
+                DoScriptText(SAY_PACT, m_creature);
+                m_creature->CastStop();
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                {
+                    DoCast(pEydis, SPELL_TWIN_PACT_LIGHT_10);
+                    pEydis->CastSpell(pEydis, SPELL_POWER_TWINS_10,false);
+                }
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                {
+                    DoCast(pEydis, SPELL_TWIN_PACT_LIGHT_25);
+                    pEydis->CastSpell(pEydis, SPELL_POWER_TWINS_25,false);
+                }
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                {
+                    DoCast(pEydis, SPELL_TWIN_PACT_LIGHT_10HC);
+                    pEydis->CastSpell(pEydis, SPELL_POWER_TWINS_10HC,false);
+                }
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    DoCast(pEydis, SPELL_TWIN_PACT_LIGHT_25HC);
+                    pEydis->CastSpell(pEydis, SPELL_POWER_TWINS_25HC,false);
+                }
+            }
+            m_uiTwinPactTimer = 600000;
+        }
+        else
+            m_uiTwinPactTimer -= uiDiff;
+
+        // berserk
+        if (m_uiBerserkTimer < uiDiff)
+        {
+            DoScriptText(SAY_BERSERK, m_creature);
+            DoCast(m_creature, SPELL_BERSERK);
+            m_uiBerserkTimer = 60000;
+        }
+        else
+            m_uiBerserkTimer -= uiDiff;
+
         DoMeleeAttackIfReady();
     }
 };
@@ -58,23 +513,402 @@ CreatureAI* GetAI_boss_fjola(Creature* pCreature)
 /*######
 ## boss_eydis
 ######*/
-
 struct MANGOS_DLL_DECL boss_eydisAI : public ScriptedAI
 {
-    boss_eydisAI(Creature* pCreature) : ScriptedAI(pCreature) {Reset();}
+    boss_eydisAI(Creature* pCreature) : ScriptedAI(pCreature) 
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        SetEquipmentSlots(false, EQUIP_MAIN_2, -1, -1);
+        Reset();
+    }
+
+    ScriptedInstance *m_pInstance;
+    uint8 Difficulty;
+
+    uint32 m_uiTwinSpikeTimer;
+    uint32 m_uiSpecialSpellTimer;
+    uint32 m_uiTwinPactTimer;
+    uint32 m_uiDarkToutchTimer;
+    uint32 m_uiOrbSummonTimer;
+    uint32 m_uiCastTimeOut;
+
+    uint32 m_uiEssenceBuffCheckTimer;
+    std::list<Creature*> lEssences;
+    std::list<Creature*> lConcentrates;
 
-    void Reset() {}
+    float summX, summY, summZ;
+
+    uint32 m_uiBerserkTimer;
+
+    void Reset() 
+    {
+        m_uiTwinSpikeTimer     = 7000;
+        m_uiSpecialSpellTimer  = urand(55000, 60000); 
+        m_uiTwinPactTimer      = 900000;
+        m_uiDarkToutchTimer    = 12000;
+        if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL || RAID_DIFFICULTY_25MAN_NORMAL)
+            m_uiOrbSummonTimer = urand(30000, 35000);
+        else
+            m_uiOrbSummonTimer = urand(10000, 15000);
+        m_uiCastTimeOut        = 900000;
+
+        m_uiBerserkTimer    = 900000;  // 15 min
+
+        m_uiEssenceBuffCheckTimer = 500;
+        lEssences.clear();
+        lConcentrates.clear();
+    }
+
+    void JustDied(Unit* pKiller)
+    {
+        DoScriptText(SAY_DEATH, m_creature);
+
+        if(m_pInstance)
+        {
+            if(Creature* pFjola = GetClosestCreatureWithEntry(m_creature, NPC_FJOLA, 150.0f))
+            //if(Creature *pFjola = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_FJOLA)))
+            {
+                if(pFjola->isAlive())
+                    pFjola->DealDamage(pFjola, pFjola->GetHealth(), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+            }
+            m_pInstance->SetData(TYPE_TWIN_VALKYR, DONE);
+            DespawnAdds();
+        }
+
+        if(Creature *pBarret = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_BARRET)))
+        {
+            pBarret->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pBarret->SetVisibility(VISIBILITY_ON);
+        }
+    }
+
+    void DespawnAdds()
+    {
+        GetCreatureListWithEntryInGrid(lEssences, m_creature, NPC_LIGHT_ESSENCE, DEFAULT_VISIBILITY_INSTANCE);
+        GetCreatureListWithEntryInGrid(lEssences, m_creature, NPC_DARK_ESSENCE, DEFAULT_VISIBILITY_INSTANCE);
+        if (!lEssences.empty())
+        {
+            for(std::list<Creature*>::iterator iter = lEssences.begin(); iter != lEssences.end(); ++iter)
+            {
+                if ((*iter) && (*iter)->isAlive())
+                    (*iter)->ForcedDespawn();
+            }
+        }
+        GetCreatureListWithEntryInGrid(lConcentrates, m_creature, NPC_CONCENTRATED_DARKNESS, DEFAULT_VISIBILITY_INSTANCE);
+        GetCreatureListWithEntryInGrid(lConcentrates, m_creature, NPC_CONCENTRATED_LIGHT, DEFAULT_VISIBILITY_INSTANCE);
+        if (!lConcentrates.empty())
+        {
+            for(std::list<Creature*>::iterator iter = lConcentrates.begin(); iter != lConcentrates.end(); ++iter)
+            {
+                if ((*iter) && (*iter)->isAlive())
+                    (*iter)->ForcedDespawn();
+            }
+        }
+    }
 
     void Aggro(Unit* pWho)
     {
         m_creature->SetInCombatWithZone();
+        DoScriptText(SAY_AGGRO, m_creature);  
+
+        if(m_pInstance)
+        {
+            m_pInstance->SetData(TYPE_TWIN_VALKYR, IN_PROGRESS);
+            if(Creature* pFjola = GetClosestCreatureWithEntry(m_creature, NPC_FJOLA, 150.0f))
+            //if(Creature* pFjola = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_FJOLA)))
+            {
+                if(pFjola->isAlive())
+                    pFjola->AI()->AttackStart(m_creature->getVictim());
+            }
+        }
+
+        if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+            DoCast(m_creature, SPELL_DARK_SURGE_10);
+        if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+            DoCast(m_creature, SPELL_DARK_SURGE_25);
+        if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+            DoCast(m_creature, SPELL_DARK_SURGE_10HC);
+        if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            DoCast(m_creature, SPELL_DARK_SURGE_25HC);
+    }
+
+    void KilledUnit(Unit* pVictim)
+    {
+        switch(urand(0, 1))
+        {
+        case 0: DoScriptText(SAY_SLAY1, m_creature); break;
+        case 1: DoScriptText(SAY_SLAY2, m_creature); break;
+        }
+    }
+
+    void JustReachedHome()
+    {
+        if (m_pInstance)
+        {
+            if(m_pInstance->GetData(TYPE_TWIN_VALKYR) != NOT_STARTED)
+            {
+                if(Creature* pFjola = GetClosestCreatureWithEntry(m_creature, NPC_FJOLA, 150.0f))
+                //if(Creature *pFjola = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_FJOLA))) 
+                {
+                    if(!pFjola->isAlive())
+                        pFjola->Respawn();
+                }
+                if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    m_pInstance->SetData(TYPE_COUNTER, m_pInstance->GetData(TYPE_COUNTER) - 1);
+                    m_pInstance->DoUpdateWorldState(UPDATE_STATE_UI_COUNT, m_pInstance->GetData(TYPE_COUNTER));
+                }
+                m_pInstance->SetData(TYPE_TWIN_VALKYR, NOT_STARTED);
+            }
+        }
+        //m_creature->GetMotionMaster()->MovePoint(0, WipeLoc[0].x, WipeLoc[0].y, m_creature->GetPositionZ());
+    }
+
+    void DamageTaken(Unit *pDoneBy, uint32 &uiDamage)
+    {
+        if(pDoneBy->GetGUID() == m_creature->GetGUID()) 
+            return;
+ 
+        if(pDoneBy->GetTypeId() == TYPEID_PLAYER)
+        {
+            if(pDoneBy->HasAura(SPELL_DARK_ESSENCE))
+                uiDamage /= 2;
+            else if(pDoneBy->HasAura(SPELL_LIGHT_ESSENCE))
+                uiDamage += uiDamage/2;
+        }
+        else
+            return;
+
+        if(uiDamage > 0)
+        {
+            if(Creature* pFjola = GetClosestCreatureWithEntry(m_creature, NPC_FJOLA, 150.0f))
+            //if(Creature* pFjola = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_FJOLA))) 
+                pFjola->DealDamage(pFjola, uiDamage, NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+        }
+    }
+
+    void DoCheckEssenceBuff()
+    {
+        Map *map = m_creature->GetMap();
+        if (map->IsDungeon())
+        {
+            Map::PlayerList const &PlayerList = map->GetPlayers();
+
+            if (PlayerList.isEmpty())
+                return;
+
+            for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+            {
+                if(i->getSource()->HasAura(SPELL_LIGHT_ESSENCE, EFFECT_INDEX_0))
+                {
+                    if(i->getSource()->HasAura(SPELL_POWERING_UP, EFFECT_INDEX_0))
+                    {
+                        uint8 m_uiAuraStack = i->getSource()->GetAura(SPELL_POWERING_UP, EFFECT_INDEX_0)->GetStackAmount();
+                        if(m_uiAuraStack >= 100)
+                        {
+                            i->getSource()->RemoveAurasDueToSpell(SPELL_POWERING_UP);
+                            i->getSource()->CastSpell(i->getSource(), SPELL_EMPOWERED_LIGHT, false);
+                        }
+                    }
+                }
+                else if(i->getSource()->HasAura(SPELL_DARK_ESSENCE, EFFECT_INDEX_0))
+                {
+                    if(i->getSource()->HasAura(SPELL_POWERING_UP, EFFECT_INDEX_0))
+                    {
+                        uint8 m_uiAuraStack = i->getSource()->GetAura(SPELL_POWERING_UP, EFFECT_INDEX_0)->GetStackAmount();
+                        if(m_uiAuraStack >= 100)
+                        {
+                            i->getSource()->RemoveAurasDueToSpell(SPELL_POWERING_UP);
+                            i->getSource()->CastSpell(i->getSource(), SPELL_EMPOWERED_DARKNESS, false);
+                        }
+                    }
+                }
+            }
+        } 
+    }
+
+    void SummonOrbs()
+    {
+        for(uint8 i = 0; i < 8; i++) // maybe 16??
+        {
+            // init random orb
+            uint32 m_uiCreatureEntry;
+            switch (urand(0, 1))
+            {
+            case 0:
+                m_uiCreatureEntry = NPC_CONCENTRATED_DARKNESS;
+                break;
+            case 1:
+                m_uiCreatureEntry = NPC_CONCENTRATED_LIGHT;
+                break;
+            }
+            // summon at given location
+            /*float angle = rand_norm() * 2 * 3.1416;
+            summX = SpawnLoc[1].x + ROOM_RADIUS * sinf(angle);
+            summY = SpawnLoc[1].z + ROOM_RADIUS * cosf(angle);
+            summZ = 395.0f;*/
+            if(Creature* pOrb = m_creature->SummonCreature(m_uiCreatureEntry, OrbLoc[i].x, OrbLoc[i].y, LOC_Z, 0.0f, TEMPSUMMON_TIMED_OR_CORPSE_DESPAWN, 30000))
+                pOrb->setFaction(14);
+        }
     }
 
     void UpdateAI(const uint32 uiDiff)
     {
-        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim()) 
             return;
 
+        if(Creature* pFjola = GetClosestCreatureWithEntry(m_creature, NPC_FJOLA, 150.0f))
+        //if(Creature* pFjola = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_FJOLA))) 
+        {
+            if(m_creature->getVictim()->GetGUID() == pFjola->GetGUID()) 
+                EnterEvadeMode();
+        }
+        if(m_uiEssenceBuffCheckTimer < uiDiff)
+        {
+            DoCheckEssenceBuff();
+            m_uiEssenceBuffCheckTimer = 500;
+        }
+        else m_uiEssenceBuffCheckTimer -= uiDiff;
+        
+        if(m_uiOrbSummonTimer < uiDiff)
+        {
+            SummonOrbs();
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL || RAID_DIFFICULTY_25MAN_NORMAL)
+                m_uiOrbSummonTimer = urand(30000, 40000);
+            else
+                m_uiOrbSummonTimer = urand(5000, 10000);
+        }
+        else m_uiOrbSummonTimer -= uiDiff;
+
+        if (m_uiCastTimeOut < uiDiff)
+        {
+            m_pInstance->SetData(TYPE_TWINS_CASTING, NOT_STARTED);
+            m_uiCastTimeOut = 600000;
+        }
+        else
+            m_uiCastTimeOut -= uiDiff;
+
+        // spells
+        if (m_uiTwinSpikeTimer < uiDiff)
+        {
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_TWIN_SPIKE_DARK_10);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                DoCast(m_creature->getVictim(), SPELL_TWIN_SPIKE_DARK_25);
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_TWIN_SPIKE_DARK_10HC);
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                DoCast(m_creature->getVictim(), SPELL_TWIN_SPIKE_DARK_25HC);
+            m_uiTwinSpikeTimer = 5000 + urand(1000, 5000);
+        }
+        else
+            m_uiTwinSpikeTimer -= uiDiff;
+
+        if (m_uiDarkToutchTimer < uiDiff)
+        {
+            if (Unit* pTarget = SelectUnit(SELECT_TARGET_RANDOM, 0))
+            {
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                    DoCast(pTarget, SPELL_TOUCH_OF_DARKNESS_10);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                    DoCast(pTarget, SPELL_TOUCH_OF_DARKNESS_25);
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                    DoCast(pTarget, SPELL_TOUCH_OF_DARKNESS_10HC);
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(pTarget, SPELL_TOUCH_OF_DARKNESS_25HC);
+            }
+            m_uiDarkToutchTimer = 10000 + urand(1000, 4000);
+        }
+        else
+            m_uiDarkToutchTimer -= uiDiff;
+
+        if (m_uiSpecialSpellTimer < uiDiff)
+        {
+            if(m_pInstance->GetData(TYPE_TWINS_CASTING) != IN_PROGRESS)
+            {
+                switch (urand(0, 1))
+                {
+                case 0:
+                    DoScriptText(SAY_DARK, m_creature);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(m_creature, SPELL_DARK_VORTEX_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(m_creature, SPELL_DARK_VORTEX_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(m_creature, SPELL_DARK_VORTEX_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(m_creature, SPELL_DARK_VORTEX_25HC);
+
+                    m_pInstance->SetData(TYPE_TWINS_CASTING, IN_PROGRESS);
+                    m_uiCastTimeOut = 9000;
+                    break;
+                case 1:
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(m_creature, SPELL_SHIELD_OF_DARKNESS_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(m_creature, SPELL_SHIELD_OF_DARKNESS_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(m_creature, SPELL_SHIELD_OF_DARKNESS_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(m_creature, SPELL_SHIELD_OF_DARKNESS_25HC);
+
+                    m_uiTwinPactTimer = 500;
+                    m_pInstance->SetData(TYPE_TWINS_CASTING, IN_PROGRESS);
+                    m_uiCastTimeOut = 16000;
+                    break;
+                }
+                m_uiSpecialSpellTimer = urand(60000, 65000);
+            }
+            else   
+                m_uiSpecialSpellTimer = urand(55000, 60000);
+        }
+        else
+            m_uiSpecialSpellTimer -= uiDiff;
+
+        if (m_uiTwinPactTimer < uiDiff)
+        {
+            DoScriptText(SAY_PACT, m_creature);
+            if(Creature* pFjola = GetClosestCreatureWithEntry(m_creature, NPC_FJOLA, 150.0f))
+            //if(Creature* pFjola = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_FJOLA))) 
+            {
+                m_creature->CastStop();
+                if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                {
+                    DoCast(pFjola, SPELL_TWIN_PACT_DARK_10);
+                    pFjola->CastSpell(pFjola, SPELL_POWER_TWINS_10,false);
+                }
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                {
+                    DoCast(pFjola, SPELL_TWIN_PACT_DARK_25);
+                    pFjola->CastSpell(pFjola, SPELL_POWER_TWINS_25,false);
+                }
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                {
+                    DoCast(pFjola, SPELL_TWIN_PACT_DARK_10HC);
+                    pFjola->CastSpell(pFjola, SPELL_POWER_TWINS_10HC,false);
+                }
+                if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    DoCast(pFjola, SPELL_TWIN_PACT_DARK_25HC);
+                    pFjola->CastSpell(pFjola, SPELL_POWER_TWINS_25HC,false);
+                }
+            }
+            m_uiTwinPactTimer = 600000;
+        }
+        else
+            m_uiTwinPactTimer -= uiDiff;
+
+        // berserk
+        if (m_uiBerserkTimer < uiDiff)
+        {
+            DoScriptText(SAY_BERSERK, m_creature);
+            DoCast(m_creature, SPELL_BERSERK);
+            m_uiBerserkTimer = 60000;
+        }
+        else
+            m_uiBerserkTimer -= uiDiff;
+
         DoMeleeAttackIfReady();
     }
 };
@@ -84,6 +918,239 @@ CreatureAI* GetAI_boss_eydis(Creature* pCreature)
     return new boss_eydisAI(pCreature);
 }
 
+//#####
+//### Concentrated Light/Darkness
+//#####
+struct MANGOS_DLL_DECL mob_valkyr_orbAI : public ScriptedAI
+{
+    mob_valkyr_orbAI(Creature *pCreature) : ScriptedAI(pCreature) 
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        SetCombatMovement(false);  
+        m_uiCreatureEntry = pCreature->GetEntry();
+        ChooseDirection();
+        Reset();
+    }
+
+    ScriptedInstance *m_pInstance;
+    uint8 Difficulty;
+
+    uint32 m_uiCreatureEntry;
+    uint32 m_uiDieTimer;
+    bool m_bMustDie;
+
+    float dstX, dstY, dstZ;
+
+    void Reset() 
+    {
+        m_uiDieTimer    = 2000;
+        m_bMustDie      = false;
+    }
+
+    void MoveInLineOfSight(Unit* pWho)
+    {
+        if(m_creature->GetDistance2d(pWho) <= 3.0f)
+        {
+            switch (m_uiCreatureEntry)
+            {
+            case NPC_CONCENTRATED_DARKNESS:
+                if(pWho->HasAura(SPELL_DARK_ESSENCE))
+                    DoCast(pWho, SPELL_POWERING_UP);
+                else if(pWho->HasAura(SPELL_LIGHT_ESSENCE))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(m_creature, SPELL_UNLEASHED_DARK_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(m_creature, SPELL_UNLEASHED_DARK_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(m_creature, SPELL_UNLEASHED_DARK_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(m_creature, SPELL_UNLEASHED_DARK_25HC);
+                }
+                break;
+            case NPC_CONCENTRATED_LIGHT:
+                if(pWho->HasAura(SPELL_LIGHT_ESSENCE))
+                    DoCast(pWho, SPELL_POWERING_UP);
+                else if(pWho->HasAura(SPELL_DARK_ESSENCE))
+                {
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        DoCast(m_creature, SPELL_UNLEASHED_LIGHT_10);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        DoCast(m_creature, SPELL_UNLEASHED_LIGHT_25);
+                    if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        DoCast(m_creature, SPELL_UNLEASHED_LIGHT_10HC);
+                    if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        DoCast(m_creature, SPELL_UNLEASHED_LIGHT_25HC);
+                }
+                break;
+            }
+            m_bMustDie = true; 
+        }
+        else
+            return;
+    }
+
+    void AttackStart(Unit *pWho)
+    {
+        if(!pWho) 
+            return;
+    }
+
+    void ChooseDirection()
+    {
+        float angle = rand_norm() * 2.0f * 3.1416f;
+        dstX = SpawnLoc[1].x + SpawnLoc[1].y * sinf(angle);
+        dstY = SpawnLoc[1].x + SpawnLoc[1].y * cosf(angle);
+        dstZ = 394.5f;
+
+        m_creature->GetMotionMaster()->MovePoint(0, dstX, dstY, dstZ);
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if(abs(m_creature->GetPositionX() - dstX) < 2.0f && abs(m_creature->GetPositionY() - dstY) < 2.0f)
+        {
+            m_creature->GetMotionMaster()->MovementExpired();
+            ChooseDirection();
+        }
+
+        if (m_uiDieTimer < uiDiff && m_bMustDie)
+        {
+            m_creature->DealDamage(m_creature, m_creature->GetHealth(), NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+            m_uiDieTimer = 60000;
+        }
+        else
+            m_uiDieTimer -= uiDiff;
+    }
+};
+
+CreatureAI* GetAI_mob_valkyr_orb(Creature *pCreature) 
+{
+    return new mob_valkyr_orbAI(pCreature);
+}
+//#####
+//### Essence Light/Darkness
+//#####
+struct MANGOS_DLL_DECL mob_valkyr_essenceAI : public ScriptedAI
+{
+    mob_valkyr_essenceAI(Creature *pCreature) : ScriptedAI(pCreature) 
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        Reset();
+    }
+
+    ScriptedInstance *m_pInstance;
+    uint8 Difficulty;
+
+    uint32 m_uiPlayerCheckTimer;
+    uint32 m_uiCreatureEntry;
+
+    void Reset() 
+    {
+        m_uiPlayerCheckTimer = 500;
+        m_uiCreatureEntry = m_creature->GetEntry();
+    }
+
+    void DoCastEssenceBuff()
+    {
+        Map *map = m_creature->GetMap();
+        if (map->IsDungeon())
+        {
+            Map::PlayerList const &PlayerList = map->GetPlayers();
+
+            if (PlayerList.isEmpty())
+                return;
+
+            for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+            {
+                if(m_uiCreatureEntry == NPC_LIGHT_ESSENCE)
+                {
+                    if (i->getSource()->isAlive() && m_creature->GetDistance2d(i->getSource()->GetPositionX(),i->getSource()->GetPositionY()) < 2)
+                    {
+                        if(i->getSource()->HasAura(SPELL_DARK_ESSENCE))
+                        {
+                            i->getSource()->RemoveAurasDueToSpell(SPELL_DARK_ESSENCE);
+                            //i->getSource()->
+                        }
+
+                        i->getSource()->CastSpell(i->getSource(), SPELL_LIGHT_ESSENCE, false);
+
+                        if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        {
+                            i->getSource()->ApplySpellImmune(SPELL_LIGHT_VORTEX_10, 0, 0, true);
+                            i->getSource()->ApplySpellImmune(SPELL_LIGHT_SURGE_10, 0, 0, true);
+                        }
+                        if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        {
+                            i->getSource()->ApplySpellImmune(SPELL_LIGHT_VORTEX_25, 0, 0, true);
+                            i->getSource()->ApplySpellImmune(SPELL_LIGHT_SURGE_25, 0, 0, true);
+                        }
+                        if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        {
+                            i->getSource()->ApplySpellImmune(SPELL_LIGHT_VORTEX_10HC, 0, 0, true);
+                            i->getSource()->ApplySpellImmune(SPELL_LIGHT_SURGE_10HC, 0, 0, true);
+                        }
+                        if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        {
+                            i->getSource()->ApplySpellImmune(SPELL_LIGHT_VORTEX_25HC, 0, 0, true);
+                            i->getSource()->ApplySpellImmune(SPELL_LIGHT_SURGE_25HC, 0, 0, true);
+                        }
+                    }
+                }
+                else if(m_uiCreatureEntry == NPC_DARK_ESSENCE)
+                {
+                    if (i->getSource()->isAlive() && m_creature->GetDistance2d(i->getSource()->GetPositionX(),i->getSource()->GetPositionY()) < 2)
+                    {
+                        if(i->getSource()->HasAura(SPELL_LIGHT_ESSENCE))
+                            i->getSource()->RemoveAurasDueToSpell(SPELL_LIGHT_ESSENCE);
+
+                        i->getSource()->CastSpell(i->getSource(), SPELL_DARK_ESSENCE, false);
+
+                        if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                        {
+                            i->getSource()->ApplySpellImmune(SPELL_DARK_VORTEX_10, 0, 0, true);
+                            i->getSource()->ApplySpellImmune(SPELL_DARK_SURGE_10, 0, 0, true);
+                        }
+                        if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                        {
+                            i->getSource()->ApplySpellImmune(SPELL_DARK_VORTEX_25, 0, 0, true);
+                            i->getSource()->ApplySpellImmune(SPELL_DARK_SURGE_25, 0, 0, true);
+                        }
+                        if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                        {
+                            i->getSource()->ApplySpellImmune(SPELL_DARK_VORTEX_10HC, 0, 0, true);
+                            i->getSource()->ApplySpellImmune(SPELL_DARK_SURGE_10HC, 0, 0, true);
+                        }
+                        if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                        {
+                            i->getSource()->ApplySpellImmune(SPELL_DARK_VORTEX_25HC, 0, 0, true);
+                            i->getSource()->ApplySpellImmune(SPELL_DARK_SURGE_25HC, 0, 0, true);
+                        }
+                    }
+                }
+            }
+        } 
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (m_uiPlayerCheckTimer < uiDiff)
+        {
+            DoCastEssenceBuff();
+            m_uiPlayerCheckTimer = 500;
+        }
+        else
+            m_uiPlayerCheckTimer -= uiDiff;
+    }
+};
+
+CreatureAI* GetAI_mob_valkyr_essence(Creature *pCreature) 
+{
+    return new mob_valkyr_essenceAI(pCreature);
+}
+
 void AddSC_twin_valkyr()
 {
     Script* newscript;
@@ -95,6 +1162,16 @@ void AddSC_twin_valkyr()
 
     newscript = new Script;
     newscript->Name = "boss_eydis";
-    newscript->GetAI = &GetAI_boss_fjola;
+    newscript->GetAI = &GetAI_boss_eydis;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "mob_valkyr_orb";
+    newscript->GetAI = &GetAI_mob_valkyr_orb;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "mob_valkyr_essence";
+    newscript->GetAI = &GetAI_mob_valkyr_essence;
     newscript->RegisterSelf();
 }
diff --git a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/instance_trial_of_the_crusader.cpp b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/instance_trial_of_the_crusader.cpp
index 21c424f..12e1aa0 100644
--- a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/instance_trial_of_the_crusader.cpp
+++ b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/instance_trial_of_the_crusader.cpp
@@ -1,18 +1,18 @@
 /* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
 
 /* ScriptData
 SDName: instance_trial_of_the_crusader
@@ -34,11 +34,19 @@ EndScriptData */
 
 struct MANGOS_DLL_DECL instance_trial_of_the_crusader : public ScriptedInstance
 {
-    instance_trial_of_the_crusader(Map* pMap) : ScriptedInstance(pMap) {Initialize();};
+    instance_trial_of_the_crusader(Map* pMap) : ScriptedInstance(pMap) 
+    {
+        Difficulty = (uint8)pMap->GetDifficulty();
+        Initialize();
+    };
 
     uint32 m_auiEncounter[MAX_ENCOUNTER];
+    uint8 Difficulty;
+    bool m_bNeedSave;
     std::string strInstData;
 
+    uint32 m_uiTwinsCasting;
+
     uint32 m_uiGormokGUID;
     uint32 m_uiAcidmawGUID;
     uint32 m_uiDreadscaleGUID;
@@ -48,10 +56,72 @@ struct MANGOS_DLL_DECL instance_trial_of_the_crusader : public ScriptedInstance
     uint32 m_uiEydisGUID;
     uint32 m_uiAnubarakGUID;
 
+    uint64 m_uiBarrentGUID;
+    uint64 m_uiTirionGUID;
+    uint64 m_uiFizzlebangGUID;
+    uint64 m_uiGarroshGUID;
+    uint64 m_uiVarianGUID;
+    uint64 m_uiLichGUID;
+    uint64 m_uiJainaGUID;
+    uint64 m_uiThrallGUID;
+
+    uint64 m_uiCrusader11Guid;
+    uint64 m_uiCrusader12Guid;
+    uint64 m_uiCrusader13Guid;
+    uint64 m_uiCrusader14Guid;
+    uint64 m_uiCrusader15Guid;
+    uint64 m_uiCrusader16Guid;
+    uint64 m_uiCrusader17Guid;
+    uint64 m_uiCrusader18Guid;
+    uint64 m_uiCrusader19Guid;
+    uint64 m_uiCrusader1aGuid;
+
+    uint64 m_uiCrusader21Guid;
+    uint64 m_uiCrusader22Guid;
+    uint64 m_uiCrusader23Guid;
+    uint64 m_uiCrusader24Guid;
+    uint64 m_uiCrusader25Guid;
+    uint64 m_uiCrusader26Guid;
+    uint64 m_uiCrusader27Guid;
+    uint64 m_uiCrusader28Guid;
+    uint64 m_uiCrusader29Guid;
+    uint64 m_uiCrusader2aGuid;
+
+    uint64 m_uiCrusader01Guid;
+    uint64 m_uiCrusader02Guid;
+
+    uint64 m_uiCrusadersCacheGUID;
+    uint64 m_uiFloorGUID;
+
+    uint64 m_uiTC10h25GUID;
+    uint64 m_uiTC10h45GUID;
+    uint64 m_uiTC10h50GUID;
+    uint64 m_uiTC10h99GUID;
+
+    uint64 m_uiTC25h25GUID;
+    uint64 m_uiTC25h45GUID;
+    uint64 m_uiTC25h50GUID;
+    uint64 m_uiTC25h99GUID;
+
+    uint64 m_uiTributeChestGUID;
+
+    uint64 m_uiMainGateDoorGUID;
+    uint64 m_uiSouthDoorGUID;
+    uint64 m_uiWestDoorGUID;
+    uint64 m_uiNorthDoorGUID;
+    uint64 m_uiWebDoorGUID;
+
+
     void Initialize()
     {
         memset(&m_auiEncounter, 0, sizeof(m_auiEncounter));
 
+        m_auiEncounter[6]  = 50;
+        m_auiEncounter[7]  = 0;
+        m_bNeedSave        = false;
+
+        m_uiTwinsCasting   = 0;
+
         m_uiGormokGUID     = 0;
         m_uiAcidmawGUID    = 0;
         m_uiDreadscaleGUID = 0;
@@ -61,6 +131,60 @@ struct MANGOS_DLL_DECL instance_trial_of_the_crusader : public ScriptedInstance
         m_uiEydisGUID      = 0;
         m_uiAnubarakGUID   = 0;
 
+        m_uiBarrentGUID     = 0;
+        m_uiTirionGUID      = 0;
+        m_uiFizzlebangGUID  = 0;
+        m_uiGarroshGUID     = 0;
+        m_uiVarianGUID      = 0;
+        m_uiLichGUID        = 0;
+        m_uiJainaGUID       = 0;
+        m_uiThrallGUID      = 0;
+
+        m_uiCrusader11Guid  = 0;
+        m_uiCrusader12Guid  = 0;
+        m_uiCrusader13Guid  = 0;
+        m_uiCrusader14Guid  = 0;
+        m_uiCrusader15Guid  = 0;
+        m_uiCrusader16Guid  = 0;
+        m_uiCrusader17Guid  = 0;
+        m_uiCrusader18Guid  = 0;
+        m_uiCrusader19Guid  = 0;
+        m_uiCrusader1aGuid  = 0;
+
+        m_uiCrusader21Guid  = 0;
+        m_uiCrusader22Guid  = 0;
+        m_uiCrusader23Guid  = 0;
+        m_uiCrusader24Guid  = 0;
+        m_uiCrusader25Guid  = 0;
+        m_uiCrusader26Guid  = 0;
+        m_uiCrusader27Guid  = 0;
+        m_uiCrusader28Guid  = 0;
+        m_uiCrusader29Guid  = 0;
+        m_uiCrusader2aGuid  = 0;
+
+        m_uiCrusader01Guid  = 0;
+        m_uiCrusader02Guid  = 0;
+
+        m_uiCrusadersCacheGUID  = 0;
+        m_uiFloorGUID       = 0;
+
+        m_uiTC10h25GUID     = 0;
+        m_uiTC10h45GUID     = 0;
+        m_uiTC10h50GUID     = 0;
+        m_uiTC10h99GUID     = 0;
+
+        m_uiTC25h25GUID     = 0;
+        m_uiTC25h45GUID     = 0;
+        m_uiTC25h50GUID     = 0;
+        m_uiTC25h99GUID     = 0;
+
+        m_uiTributeChestGUID    = 0;
+
+        m_uiMainGateDoorGUID    = 0;
+        m_uiSouthDoorGUID       = 0;
+        m_uiWestDoorGUID        = 0;
+        m_uiNorthDoorGUID       = 0;
+        m_uiWebDoorGUID         = 0;
     }
 
     bool IsEncounterInProgress() const
@@ -71,59 +195,250 @@ struct MANGOS_DLL_DECL instance_trial_of_the_crusader : public ScriptedInstance
         return false;
     }
 
+    void OnPlayerEnter(Player *m_player)
+    {
+        if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+        {
+            m_player->SendUpdateWorldState(UPDATE_STATE_UI_SHOW,1);
+            m_player->SendUpdateWorldState(UPDATE_STATE_UI_COUNT, GetData(TYPE_COUNTER));
+        }
+    }
+
+    bool IsRaidWiped()
+    {
+        Map::PlayerList const &players = instance->GetPlayers();
+
+        for (Map::PlayerList::const_iterator i = players.begin(); i != players.end(); ++i)
+        {
+            if(Player* pPlayer = i->getSource())
+            {
+                if(pPlayer->isAlive())
+                    return false;
+            }
+        }
+        return true;
+    }
+
     void OnCreatureCreate(Creature* pCreature)
     {
         switch(pCreature->GetEntry())
         {
-            case 34796: m_uiGormokGUID     = pCreature->GetGUID(); break;
-            case 35144: m_uiAcidmawGUID    = pCreature->GetGUID(); break;
-            case 34799: m_uiDreadscaleGUID = pCreature->GetGUID(); break;
-            case 34797: m_uiIcehowlGUID    = pCreature->GetGUID(); break;
-            case 34780: m_uiJaraxxusGUID   = pCreature->GetGUID(); break;
-            case 34497: m_uiFjolaGUID      = pCreature->GetGUID(); break;
-            case 34496: m_uiEydisGUID      = pCreature->GetGUID(); break;
-            case 34564: m_uiAnubarakGUID   = pCreature->GetGUID(); break;
+            // boss
+        case NPC_GORMOK:    m_uiGormokGUID          = pCreature->GetGUID(); break;
+        case NPC_ACIDMAW:   m_uiAcidmawGUID         = pCreature->GetGUID(); break;
+        case NPC_DREADSCALE: m_uiDreadscaleGUID     = pCreature->GetGUID(); break;
+        case NPC_ICEHOWL:   m_uiIcehowlGUID         = pCreature->GetGUID(); break;
+        case NPC_JARAXXUS:  m_uiJaraxxusGUID        = pCreature->GetGUID(); break;
+        case NPC_FJOLA:     m_uiFjolaGUID           = pCreature->GetGUID(); break;
+        case NPC_EYDIS:     m_uiEydisGUID           = pCreature->GetGUID(); break;
+        case NPC_ANUBARAK:  m_uiAnubarakGUID        = pCreature->GetGUID(); break;
+
+            // cosmetics
+        case NPC_BARRENT:     m_uiBarrentGUID       = pCreature->GetGUID(); break;
+        case NPC_TIRION:      m_uiTirionGUID        = pCreature->GetGUID(); break;
+        case NPC_WILFRED:     m_uiFizzlebangGUID    = pCreature->GetGUID(); break;
+        case NPC_GARROSH:     m_uiGarroshGUID       = pCreature->GetGUID(); break;
+        case NPC_VARIAN:      m_uiVarianGUID        = pCreature->GetGUID(); break;
+        case NPC_LICH_KING:   m_uiLichGUID          = pCreature->GetGUID(); break;
+        case NPC_JAINA:       m_uiJainaGUID         = pCreature->GetGUID(); break;
+        case NPC_THRALL:      m_uiThrallGUID        = pCreature->GetGUID(); break;
+
+            // crusaders
+        case NPC_CRUSADER_1_1: m_uiCrusader11Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_1_2: m_uiCrusader12Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_1_3: m_uiCrusader13Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_1_4: m_uiCrusader14Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_1_5: m_uiCrusader15Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_1_6: m_uiCrusader16Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_1_7: m_uiCrusader17Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_1_8: m_uiCrusader18Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_1_9: m_uiCrusader19Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_1_10: m_uiCrusader1aGuid = pCreature->GetGUID(); break;
+
+        case NPC_CRUSADER_2_1: m_uiCrusader21Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_2_2: m_uiCrusader22Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_2_3: m_uiCrusader23Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_2_4: m_uiCrusader24Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_2_5: m_uiCrusader25Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_2_6: m_uiCrusader26Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_2_7: m_uiCrusader27Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_2_8: m_uiCrusader28Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_2_9: m_uiCrusader29Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_2_10: m_uiCrusader2aGuid = pCreature->GetGUID(); break;
+
+        case NPC_CRUSADER_0_1: m_uiCrusader01Guid = pCreature->GetGUID(); break;
+        case NPC_CRUSADER_0_2: m_uiCrusader02Guid = pCreature->GetGUID(); break;
         }
     }
 
+    void OnObjectCreate(GameObject *pGo)
+    {
+        switch(pGo->GetEntry())
+        {
+        case GO_CRUSADERS_CACHE_10:
+            if(Difficulty == RAID_DIFFICULTY_10MAN_NORMAL)
+                m_uiCrusadersCacheGUID = pGo->GetGUID(); 
+            break;
+        case GO_CRUSADERS_CACHE_25:
+            if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL)
+                m_uiCrusadersCacheGUID = pGo->GetGUID(); 
+            break;
+        case GO_CRUSADERS_CACHE_10_H:
+            if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                m_uiCrusadersCacheGUID = pGo->GetGUID(); 
+            break;
+        case GO_CRUSADERS_CACHE_25_H:
+            if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                m_uiCrusadersCacheGUID = pGo->GetGUID(); 
+            break;
+        case GO_COLISEUM_FLOOR: 
+            m_uiFloorGUID = pGo->GetGUID(); 
+            break;
+        case GO_MAIN_GATE:
+            m_uiMainGateDoorGUID = pGo->GetGUID();
+            break;
+        case GO_SOUTH_GATE: m_uiSouthDoorGUID = pGo->GetGUID();
+            pGo->SetGoState(GO_STATE_READY);
+            break;
+        case GO_WEST_GATE: m_uiWestDoorGUID = pGo->GetGUID();
+            break;
+        case GO_NORTH_GATE: m_uiNorthDoorGUID = pGo->GetGUID();
+            pGo->SetGoState(GO_STATE_READY);
+            break;
+        case GO_WEB_DOOR: m_uiWebDoorGUID = pGo->GetGUID();
+            pGo->SetGoState(GO_STATE_ACTIVE);
+            break;
+        case GO_TRIBUTE_CHEST_10H_25: m_uiTC10h25GUID = pGo->GetGUID(); break;
+        case GO_TRIBUTE_CHEST_10H_45: m_uiTC10h45GUID = pGo->GetGUID(); break;
+        case GO_TRIBUTE_CHEST_10H_50: m_uiTC10h50GUID = pGo->GetGUID(); break;
+        case GO_TRIBUTE_CHEST_10H_99: m_uiTC10h99GUID = pGo->GetGUID(); break;
+
+        case GO_TRIBUTE_CHEST_25H_25: m_uiTC25h25GUID = pGo->GetGUID(); break;
+        case GO_TRIBUTE_CHEST_25H_45: m_uiTC25h45GUID = pGo->GetGUID(); break;
+        case GO_TRIBUTE_CHEST_25H_50: m_uiTC25h50GUID = pGo->GetGUID(); break;
+        case GO_TRIBUTE_CHEST_25H_99: m_uiTC25h99GUID = pGo->GetGUID(); break;
+        }
+    }
+
+    void OpenDoor(uint64 guid)
+    {
+        if(!guid) return;
+        GameObject* pGo = instance->GetGameObject(guid);
+        if(pGo) pGo->SetGoState(GO_STATE_ACTIVE);
+    }
+
+    void CloseDoor(uint64 guid)
+    {
+        if(!guid) return;
+        GameObject* pGo = instance->GetGameObject(guid);
+        if(pGo) pGo->SetGoState(GO_STATE_READY);
+    }
+
     void SetData(uint32 uiType, uint32 uiData)
     {
         debug_log("SD2: Instance Trial Of The Crusader: SetData received for type %u with data %u",uiType,uiData);
 
         switch(uiType)
         {
-             case TYPE_NORTHREND_BEASTS:
-                m_auiEncounter[0] = uiData;
-                break;
-             case TYPE_JARAXXUS:
-                m_auiEncounter[1] = uiData;
-                break;
-             case TYPE_FACTION_CHAMPIONS:
-                m_auiEncounter[2] = uiData;
-                break;
-             case TYPE_TWIN_VALKYR:
-                m_auiEncounter[3] = uiData;
-                break;
-             case TYPE_ANUBARAK:
-                m_auiEncounter[4] = uiData;
-                break;
-             default:
-                error_log("SD2: Instance Trial of The Crusader: ERROR SetData = %u for type %u does not exist/not implemented.",uiType,uiData);
-                break;
+        case TYPE_NORTHREND_BEASTS:
+            m_auiEncounter[0] = uiData;
+            if(uiData == IN_PROGRESS)
+                CloseDoor(m_uiWestDoorGUID);
+            else
+                OpenDoor(m_uiWestDoorGUID);
+            break;
+        case TYPE_JARAXXUS:
+            m_auiEncounter[1] = uiData;
+            if(uiData == IN_PROGRESS)
+                CloseDoor(m_uiWestDoorGUID);
+            else
+                OpenDoor(m_uiWestDoorGUID);
+            break;
+        case TYPE_FACTION_CHAMPIONS:
+            m_auiEncounter[2] = uiData;
+            if (uiData == DONE)
+                DoRespawnGameObject(m_uiCrusadersCacheGUID, 30*MINUTE);
+            if(uiData == IN_PROGRESS)
+                CloseDoor(m_uiWestDoorGUID);
+            else
+                OpenDoor(m_uiWestDoorGUID);
+            break;
+        case TYPE_TWIN_VALKYR:
+            m_auiEncounter[3] = uiData;
+            if(uiData == IN_PROGRESS)
+                CloseDoor(m_uiWestDoorGUID);
+            else
+                OpenDoor(m_uiWestDoorGUID);
+            break;
+        case TYPE_ANUBARAK:
+            m_auiEncounter[4] = uiData;
+            if(uiData == IN_PROGRESS)
+                CloseDoor(m_uiWebDoorGUID);
+            else
+                OpenDoor(m_uiWebDoorGUID);
+            if (uiData == DONE) 
+            {
+                // init crusader chest for 10 man
+                if(Difficulty == RAID_DIFFICULTY_10MAN_HEROIC)
+                {
+                    if(m_auiEncounter[6] >= 1 && m_auiEncounter[6] < 25)
+                        m_uiTributeChestGUID = m_uiTC10h25GUID;
+                    else if(m_auiEncounter[6] >= 25 && m_auiEncounter[6] < 45)
+                        m_uiTributeChestGUID = m_uiTC10h45GUID;
+                    else if(m_auiEncounter[6] >= 45 && m_auiEncounter[6] < 50)
+                        m_uiTributeChestGUID = m_uiTC10h50GUID;
+                    else if(m_auiEncounter[6] == 50)
+                        m_uiTributeChestGUID = m_uiTC10h99GUID;
+                }
+                // init crusader chest for 25 man
+                else if(Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    if(m_auiEncounter[6] >= 1 && m_auiEncounter[6] < 25)
+                        m_uiTributeChestGUID = m_uiTC25h25GUID;
+                    else if(m_auiEncounter[6] >= 25 && m_auiEncounter[6] < 45)
+                        m_uiTributeChestGUID = m_uiTC25h45GUID;
+                    else if(m_auiEncounter[6] >= 45 && m_auiEncounter[6] < 50)
+                        m_uiTributeChestGUID = m_uiTC25h50GUID;
+                    else if(m_auiEncounter[6] == 50)
+                        m_uiTributeChestGUID = m_uiTC25h99GUID;
+                }
+                // spawn chest if exists
+                if(m_uiTributeChestGUID != 0)
+                    DoRespawnGameObject(m_uiTributeChestGUID, 30* MINUTE);
+            };
+            break;
+        case TYPE_INTRO:     
+            m_auiEncounter[5] = uiData; 
+            break;
+        case TYPE_COUNTER:   
+            m_auiEncounter[6] = uiData; 
+            m_bNeedSave = true;
+            break;
+        case TYPE_STAGE:     
+            m_auiEncounter[7] = uiData; 
+            break;
+        case TYPE_TWINS_CASTING:
+            m_uiTwinsCasting = uiData;
+            break;
+        default:
+            error_log("SD2: Instance Trial of The Crusader: ERROR SetData = %u for type %u does not exist/not implemented.",uiType,uiData);
+            break;
         }
 
-        if (uiData == DONE)
+        if (uiData == DONE || uiData == FAIL || m_bNeedSave)
         {
             OUT_SAVE_INST_DATA;
 
             std::ostringstream saveStream;
             saveStream << m_auiEncounter[0] << " " << m_auiEncounter[1] << " " << m_auiEncounter[2] << " "
-                << m_auiEncounter[3] << " " << m_auiEncounter[4];
+                << m_auiEncounter[3] << " " << m_auiEncounter[4] << " " << m_auiEncounter[5] << " "
+                << m_auiEncounter[6];
 
             strInstData = saveStream.str();
 
             SaveToDB();
             OUT_SAVE_INST_DATA_COMPLETE;
+            m_bNeedSave = false;
         }
     }
 
@@ -131,11 +446,17 @@ struct MANGOS_DLL_DECL instance_trial_of_the_crusader : public ScriptedInstance
     {
         switch(uiType)
         {
-            case TYPE_NORTHREND_BEASTS:  return m_auiEncounter[0];
-            case TYPE_JARAXXUS:          return m_auiEncounter[1];
-            case TYPE_FACTION_CHAMPIONS: return m_auiEncounter[2];
-            case TYPE_TWIN_VALKYR:       return m_auiEncounter[3];
-            case TYPE_ANUBARAK:          return m_auiEncounter[4];
+        case TYPE_NORTHREND_BEASTS:  return m_auiEncounter[0];
+        case TYPE_JARAXXUS:          return m_auiEncounter[1];
+        case TYPE_FACTION_CHAMPIONS: return m_auiEncounter[2];
+        case TYPE_TWIN_VALKYR:       return m_auiEncounter[3];
+        case TYPE_ANUBARAK:          return m_auiEncounter[4];
+
+        case TYPE_INTRO:             return m_auiEncounter[5];
+        case TYPE_COUNTER:           return m_auiEncounter[6];
+        case TYPE_STAGE:             return m_auiEncounter[7];
+
+        case TYPE_TWINS_CASTING:     return m_uiTwinsCasting;
         }
         return 0;
     }
@@ -144,14 +465,50 @@ struct MANGOS_DLL_DECL instance_trial_of_the_crusader : public ScriptedInstance
     {
         switch(uiData)
         {
-            case DATA_GORMOK:     return m_uiGormokGUID;
-            case DATA_ACIDMAW:    return m_uiAcidmawGUID;
-            case DATA_DREADSCALE: return m_uiDreadscaleGUID;
-            case DATA_ICEHOWL:    return m_uiIcehowlGUID;
-            case DATA_JARAXXUS:   return m_uiJaraxxusGUID;
-            case DATA_FJOLA:      return m_uiFjolaGUID;
-            case DATA_EYDIS:      return m_uiEydisGUID;
-            case DATA_ANUBARAK:   return m_uiAnubarakGUID;
+        case DATA_GORMOK:     return m_uiGormokGUID;
+        case DATA_ACIDMAW:    return m_uiAcidmawGUID;
+        case DATA_DREADSCALE: return m_uiDreadscaleGUID;
+        case DATA_ICEHOWL:    return m_uiIcehowlGUID;
+        case DATA_JARAXXUS:   return m_uiJaraxxusGUID;
+        case DATA_FJOLA:      return m_uiFjolaGUID;
+        case DATA_EYDIS:      return m_uiEydisGUID;
+        case DATA_ANUBARAK:   return m_uiAnubarakGUID;
+
+         case DATA_BARRET:   return m_uiBarrentGUID;
+         case DATA_TIRION:   return m_uiTirionGUID;
+         case DATA_GARROSH:  return m_uiGarroshGUID;
+         case DATA_VARIAN:   return m_uiVarianGUID;
+         case DATA_JAINA:    return m_uiJainaGUID;
+         case DATA_THRALL:   return m_uiThrallGUID;
+
+         case NPC_CRUSADER_1_1: return m_uiCrusader11Guid;
+         case NPC_CRUSADER_1_2: return m_uiCrusader12Guid;
+         case NPC_CRUSADER_1_3: return m_uiCrusader13Guid;
+         case NPC_CRUSADER_1_4: return m_uiCrusader14Guid;
+         case NPC_CRUSADER_1_5: return m_uiCrusader15Guid;
+         case NPC_CRUSADER_1_6: return m_uiCrusader16Guid;
+         case NPC_CRUSADER_1_7: return m_uiCrusader17Guid;
+         case NPC_CRUSADER_1_8: return m_uiCrusader18Guid;
+         case NPC_CRUSADER_1_9: return m_uiCrusader19Guid;
+         case NPC_CRUSADER_1_10: return m_uiCrusader1aGuid;
+
+         case NPC_CRUSADER_2_1: return m_uiCrusader21Guid;
+         case NPC_CRUSADER_2_2: return m_uiCrusader22Guid;
+         case NPC_CRUSADER_2_3: return m_uiCrusader23Guid;
+         case NPC_CRUSADER_2_4: return m_uiCrusader24Guid;
+         case NPC_CRUSADER_2_5: return m_uiCrusader25Guid;
+         case NPC_CRUSADER_2_6: return m_uiCrusader26Guid;
+         case NPC_CRUSADER_2_7: return m_uiCrusader27Guid;
+         case NPC_CRUSADER_2_8: return m_uiCrusader28Guid;
+         case NPC_CRUSADER_2_9: return m_uiCrusader29Guid;
+         case NPC_CRUSADER_2_10: return m_uiCrusader2aGuid;
+
+         case NPC_CRUSADER_0_1: return m_uiCrusader01Guid;
+         case NPC_CRUSADER_0_2: return m_uiCrusader02Guid;
+
+         case DATA_ANNOUNCER:   return m_uiBarrentGUID;
+         case DATA_FLOOR:       return m_uiFloorGUID;
+         case DATA_MAIN_GATE:   return m_uiMainGateDoorGUID;
         }
         return 0;
     }
@@ -173,7 +530,12 @@ struct MANGOS_DLL_DECL instance_trial_of_the_crusader : public ScriptedInstance
 
         std::istringstream loadStream(chrIn);
         loadStream >> m_auiEncounter[0] >> m_auiEncounter[1] >> m_auiEncounter[2] >> m_auiEncounter[3]
-            >> m_auiEncounter[4];
+        >> m_auiEncounter[4] >> m_auiEncounter[5] >> m_auiEncounter[6];
+
+        m_auiEncounter[7] = 0;
+
+        if (Difficulty == RAID_DIFFICULTY_10MAN_HEROIC || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+            DoUpdateWorldState(UPDATE_STATE_UI_COUNT, m_auiEncounter[6]);
 
         for(uint8 i = 0; i < MAX_ENCOUNTER; ++i)
             if (m_auiEncounter[i] == IN_PROGRESS)            // Do not load an encounter as "In Progress" - reset it instead.
diff --git a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/trial_of_the_crusader.cpp b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/trial_of_the_crusader.cpp
index ef17289..85a2fa9 100644
--- a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/trial_of_the_crusader.cpp
+++ b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/trial_of_the_crusader.cpp
@@ -1,18 +1,18 @@
 /* Copyright (C) 2006 - 2010 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
 
 /* ScriptData
 SDName: trial_of_the_crusader
@@ -24,47 +24,1208 @@ EndScriptData */
 #include "precompiled.h"
 #include "trial_of_the_crusader.h"
 
-#define GOSSIP_START_EVENT1 "Yes! We are ready to face the challenges ahead."
+enum
+{
+    // aly
+    SAY_VARIAN_INTRO1           = -1605100,
+    SAY_VARIAN_INTRO2           = -1605101,
+    SAY_VARIAN_INTRO3           = -1605102,
+    SAY_JAINA_INTRO1            = -1605104,
+    SAY_JAINA_INTRO2            = -1605105,
+
+    //horde
+    SAY_GARROSH_INTRO1          = -1605106,
+    SAY_GARROSH_INTRO2          = -1605129,
+    SAY_GARROSH_INTRO3          = -1605130,
+    SAY_GARROSH_INTRO4          = -1605107,
+    SAY_GARROSH_INTRO5          = -1605108,
+    SAY_THRALL_INTRO1           = -1605110,
+    SAY_THRALL_INTRO2           = -1605111,
+    SAY_THRALL_INTRO3           = -1605112,
+    SAY_THRALL_INTRO4           = -1605113,
+    SAY_THRALL_INTRO5           = -1605114,
+    SAY_THRALL_INTRO6           = -1605115,
+
+    //tirion
+    SAY_TIRION_WELCOME          = -1605120,
+    SAY_TIRION_TRIAL            = -1605122,
+    SAY_TIRION_ALY1             = -1605123,
+    SAY_TIRION_ALY2             = -1605124,
+    SAY_TIRION_HORDE1           = -1605125,
+    SAY_TIRION_HORDE2           = -1605126,
+    SAY_TIRION_HORDE3           = -1605127,
+    SAY_TIRION_HORDE4           = -1605128,
+
+    // beasts
+    SAY_SUMMON_GORMOK           = -1605001,
+    SAY_SUMMON_JORMUNGARS       = -1605002,
+    SAY_SUMMON_ICEHOWL          = -1605003,
+    SAY_BEASTS_VICTORY          = -1605000,
+
+    // jaru
+    SAY_TIRION_JARU_INTRO       = -1605005,
+    SAY_WILFRED_INTRO2          = -1605006,
+    SAY_WILFRED_INTRO3          = -1605007,
+    SAY_WILFRED_INTRO4          = -1605008,
+    SAY_WILFRED_INTRO5          = -1605009,
+    SAY_JARU_INTRO6             = -1605010,
+    SAY_WILFRED_INTRO7          = -1605011,
+    SAY_WILFRED_INTRO8          = -1605012,
+    SAY_TIRION_JARU_INTRO9      = -1605013,
+    SAY_JARU_AGGRO              = -1605014,
+    SAY_TIRION_JARU_OUTRO1      = -1605021,
+    SAY_GORRASH_JARU_OUTRO2     = -1605022,
+    SAY_VARIM_JARU_OUTRO3       = -1605023,
+    SAY_TIRION_JARU_OUTRO4      = -1605024,
+
+    SPELL_WILFRED_PORTAL        = 68424,
+
+    //champions
+
+    SAY_TIRION_CHAMP_INTRO1     = -1605027,
+    SAY_TIRION_CHAMP_INTRO2     = -1605028,
+    SAY_GARROSH_CHAMP1          = -1605030,
+    SAY_GARROSH_CHAMP2          = -1605031,
+    SAY_VARIAN_CHAMP1           = -1605040,
+    SAY_VARIAN_CHAMP2           = -1605041,
+    SAY_VICTORY_HORDE           = -1605042,
+    SAY_VICTORY_ALY             = -1605032,
+    SAY_OUTRO_TIRION            = -1605026,
 
+    // twin angels
+    SAY_TIRION_TWINS_INTRO1     = -1605050,
+    SAY_TIRION_TWINS_INTRO2     = -1605051,
+    SAY_GORRASH_TWINS_DEATH     = -1605080,
+    SAY_VARIM_TWINS_DEATH       = -1605081,
+
+    // lich king
+    SAY_TIRION_ANUB_INTRO1      = -1605060, 
+    SAY_LICHKING_INTRO2         = -1605061,
+    SAY_LICHKING_INTRO3         = -1605062,
+    SAY_TIRION_ANUB_INTRO4      = -1605063,
+    SAY_LICHKING_INTRO5         = -1605064,
+    SAY_LICHKING_INTRO6         = -1605065,
+    SAY_LICHKING_INTRO7         = -1605066,
+    SAY_LICHKING_INTRO8         = -1605075,
+};
+
+struct TocMessages
+{
+    char const* name;
+    uint32 id;
+    bool state;
+    uint32 encounter;
+};
+
+static TocMessages TocGossipMessage[]=
+{ 
+    {"We are ready for the first challenge!",   GOSSIP_ACTION_INFO_DEF+1,   false,  TYPE_NORTHREND_BEASTS},     //  summon northernd beasts
+    {"We are ready for the next challenge!",    GOSSIP_ACTION_INFO_DEF+2,   false,  TYPE_JARAXXUS},             //  summon jarraxus
+    {"We are ready to fight the next challenge!",GOSSIP_ACTION_INFO_DEF+3,  false,  TYPE_FACTION_CHAMPIONS},    //  summon aly champs
+    {"We are ready to fight the next challenge!",GOSSIP_ACTION_INFO_DEF+4,  false,  TYPE_FACTION_CHAMPIONS},    //  summon horde champs
+    {"We are ready to face the next challenge!",GOSSIP_ACTION_INFO_DEF+5,   false,  TYPE_TWIN_VALKYR},          //  summon twin valkyrs
+    {"We are ready to face the next challenge!",GOSSIP_ACTION_INFO_DEF+6,   false,  TYPE_ANUBARAK},             //  summon lich king
+    {"Arena is closed",                         GOSSIP_ACTION_INFO_DEF+7,   true,   TYPE_ANUBARAK},             //  event finished
+};
 enum
 {
-    NPC_GORMOK   = 34796,
-    NPC_JARAXXUS = 34780
+    NUM_MESSAGES = 8
 };
 
+struct MANGOS_DLL_DECL npc_tirionAI : public ScriptedAI
+{
+    npc_tirionAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+    uint8 Difficulty;
+
+    uint32 IntroTimer;
+    uint32 IntroStep;
+
+    uint32 m_uiDoorTimer;
+    bool doorClosed;
+
+    uint64 m_uiWilfredGUID;
+    uint64 m_uiJaraxxusGUID;
+    uint64 m_uiJaruPortalGUID;
+
+    bool isJaruIntro;
+
+    bool isChampIntro;
+    uint8 faction;
+
+    void Reset()
+    {
+        IntroTimer          = 10000;
+        IntroStep           = 1;
+        m_uiDoorTimer       = 5000;
+        doorClosed          = false;
+        m_uiWilfredGUID     = 0;
+        m_uiJaraxxusGUID    = 0;
+        m_uiJaruPortalGUID  = 0;
+        isJaruIntro         = false;
+
+        isChampIntro        = false;
+        faction = 0;
+    }
+
+    void SetJaruIntro()
+    {
+        IntroTimer          = 10000;
+        IntroStep           = 1;
+        isJaruIntro = true;
+    }
+
+    void SetChampIntro(uint8 fact)
+    {
+        IntroTimer          = 10000;
+        IntroStep           = 1;
+        isChampIntro = true;
+        faction = fact;
+    }
+
+    void SummonHorde()
+    {
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_1)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_2_1, SpawnLoc[3].x, SpawnLoc[3].y, SpawnLoc[3].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_1))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_2)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_2_2, SpawnLoc[4].x, SpawnLoc[4].y, SpawnLoc[4].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_2))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_3)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_2_3, SpawnLoc[5].x, SpawnLoc[5].y, SpawnLoc[5].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_3))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_4)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_2_4, SpawnLoc[6].x, SpawnLoc[6].y, SpawnLoc[6].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_4))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_5)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_2_5, SpawnLoc[7].x, SpawnLoc[7].y, SpawnLoc[7].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_5))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_6)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_2_6, SpawnLoc[8].x, SpawnLoc[8].y, SpawnLoc[8].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_6))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+        {
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_7)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_2_7, SpawnLoc[9].x, SpawnLoc[9].y, SpawnLoc[9].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_7))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_8)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_2_8, SpawnLoc[10].x, SpawnLoc[10].y, SpawnLoc[10].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_8))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_9)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_2_9, SpawnLoc[11].x, SpawnLoc[11].y, SpawnLoc[11].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_9))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_10)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_2_10, SpawnLoc[12].x, SpawnLoc[12].y, SpawnLoc[12].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_10))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_1)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_0_1, SpawnLoc[13].x, SpawnLoc[13].y, SpawnLoc[13].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_1))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_2)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_0_2, SpawnLoc[14].x, SpawnLoc[14].y, SpawnLoc[14].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_2)))
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+        }
+    }
+
+    void SummonAly()
+    {
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_1)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_1_1, SpawnLoc[3].x, SpawnLoc[3].y, SpawnLoc[3].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_1))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_2)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_1_2, SpawnLoc[4].x, SpawnLoc[4].y, SpawnLoc[4].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_2))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_3)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_1_3, SpawnLoc[5].x, SpawnLoc[5].y, SpawnLoc[5].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_3)))
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_4)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_1_4, SpawnLoc[6].x, SpawnLoc[6].y, SpawnLoc[6].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_4))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_5)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_1_5, SpawnLoc[7].x, SpawnLoc[7].y, SpawnLoc[7].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_5))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_6)))
+            pTemp->Respawn();
+        else 
+        {
+            m_creature->SummonCreature(NPC_CRUSADER_1_6, SpawnLoc[8].x, SpawnLoc[8].y, SpawnLoc[8].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_6))) 
+            {
+                pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                pTemp->SetInCombatWithZone();
+            }
+        }
+        if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+        {
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_7)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_1_7, SpawnLoc[9].x, SpawnLoc[9].y, SpawnLoc[9].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_7))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_8)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_1_8, SpawnLoc[10].x, SpawnLoc[10].y, SpawnLoc[10].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_8))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_9)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_1_9, SpawnLoc[11].x, SpawnLoc[11].y, SpawnLoc[11].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_9))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_10)))
+                pTemp->Respawn();
+            else
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_1_10, SpawnLoc[12].x, SpawnLoc[12].y, SpawnLoc[12].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_10))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_1)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_0_1, SpawnLoc[13].x, SpawnLoc[13].y, SpawnLoc[13].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_1))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_2)))
+                pTemp->Respawn();
+            else 
+            {
+                m_creature->SummonCreature(NPC_CRUSADER_0_2, SpawnLoc[14].x, SpawnLoc[14].y, SpawnLoc[14].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME);
+                if (Creature* pTemp = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_2))) 
+                {
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->AddSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+        }
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if(isJaruIntro)
+        {
+            if (m_uiDoorTimer < uiDiff && !doorClosed)
+            {
+                doorClosed = true;
+                m_uiDoorTimer = 30000;
+            }
+            else
+                m_uiDoorTimer -= uiDiff;
+
+            switch(IntroStep)
+            {
+            case 1:
+                DoScriptText(SAY_TIRION_JARU_INTRO, m_creature);
+                if(Creature* Wilfred = m_creature->SummonCreature(NPC_WILFRED, SpawnLoc[28].x, SpawnLoc[28].y, SpawnLoc[28].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 30000))
+                {
+                    m_uiWilfredGUID = Wilfred->GetGUID();
+                    Wilfred->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y + 10, SpawnLoc[1].z);
+                }
+                ++IntroStep;
+                IntroTimer = 33000;
+                break;
+            case 3:
+                if(Creature* Wilfred = m_pInstance->instance->GetCreature(m_uiWilfredGUID))
+                    DoScriptText(SAY_WILFRED_INTRO2, Wilfred);
+                if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                    m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+                ++IntroStep;
+                IntroTimer = 10000;
+                break;
+            case 5:
+                if(Creature* Wilfred = m_pInstance->instance->GetCreature(m_uiWilfredGUID))
+                {
+                    if(Creature* pPortal = m_creature->SummonCreature(NPC_PORTAL, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z, m_creature->GetOrientation(), TEMPSUMMON_TIMED_OR_CORPSE_DESPAWN, 30000))
+                    {
+                        pPortal->SetDisplayId(15900);
+                        m_uiJaruPortalGUID = pPortal->GetGUID();
+                        Wilfred->CastSpell(pPortal, SPELL_WILFRED_PORTAL, false);
+                        DoScriptText(SAY_WILFRED_INTRO3, Wilfred);
+                    }
+                }
+                ++IntroStep;
+                IntroTimer = 5000;
+                break;
+            case 7:
+                if(Creature* Wilfred = m_pInstance->instance->GetCreature(m_uiWilfredGUID))
+                {
+                    DoScriptText(SAY_WILFRED_INTRO4, Wilfred);
+                    if(Creature* Jaru = m_creature->SummonCreature(NPC_JARAXXUS, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME))
+                    {
+                        Jaru->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                        Jaru->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y - 10, SpawnLoc[1].z);
+                        Jaru->SetUInt64Value(UNIT_FIELD_TARGET, Wilfred->GetGUID());
+                        m_uiJaraxxusGUID = Jaru->GetGUID();
+                    }
+                }
+                ++IntroStep;
+                IntroTimer = 3000;
+                break;
+            case 9:
+                if(Creature* Wilfred = m_pInstance->instance->GetCreature(m_uiWilfredGUID))
+                    DoScriptText(SAY_WILFRED_INTRO5, Wilfred);
+                ++IntroStep;
+                IntroTimer = 12000;
+                break;
+            case 11:
+                if(Creature* Jaru = m_pInstance->instance->GetCreature(m_uiJaraxxusGUID))
+                {    
+                    DoScriptText(SAY_JARU_INTRO6, Jaru);
+                    if(Creature* Wilfred = m_pInstance->instance->GetCreature(m_uiWilfredGUID))
+                        Jaru->AI()->AttackStart(Wilfred);
+                }
+                ++IntroStep;
+                IntroTimer = 4000;
+                break;
+            case 13:
+                if(Creature* Wilfred = m_pInstance->instance->GetCreature(m_uiWilfredGUID))
+                    DoScriptText(SAY_WILFRED_INTRO7, Wilfred);
+                if(Creature* pPortal = m_pInstance->instance->GetCreature(m_uiJaruPortalGUID))
+                    pPortal->ForcedDespawn();
+                ++IntroStep;
+                IntroTimer = 2000;
+                break;
+            case 15:
+                if(Creature* Wilfred = m_pInstance->instance->GetCreature(m_uiWilfredGUID))
+                {
+                    DoScriptText(SAY_WILFRED_INTRO8, Wilfred);
+                    if(Creature* Jaru = m_pInstance->instance->GetCreature(m_uiJaraxxusGUID))
+                    {
+                        Jaru->CastSpell(Wilfred, 67888, true);
+                        Jaru->DeleteThreatList();
+                        Jaru->CombatStop();
+                    }
+                }
+                ++IntroStep;
+                IntroTimer = 3000;
+                break;
+            case 17:
+                DoScriptText(SAY_TIRION_JARU_INTRO9, m_creature);
+                ++IntroStep;
+                IntroTimer = 8000;
+                break;
+            case 19:
+                if(Creature* Jaru = m_pInstance->instance->GetCreature(m_uiJaraxxusGUID))
+                {
+                    Jaru->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                    Jaru->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                    Jaru->SetInCombatWithZone();
+                    m_pInstance->SetData(TYPE_JARAXXUS, IN_PROGRESS);
+                }
+                ++IntroStep;
+                isJaruIntro = false;
+                IntroTimer = 9000;
+                break;
+            }
+
+            if (IntroTimer <= uiDiff)
+            {
+                ++IntroStep;
+                IntroTimer = 330000;
+            } IntroTimer -= uiDiff;
+        }
+
+        if(isChampIntro)
+        {
+            switch(IntroStep)
+            {
+            case 1:
+                DoScriptText(SAY_TIRION_CHAMP_INTRO1, m_creature);
+                ++IntroStep;
+                IntroTimer = 8000;
+                break;
+            case 3:
+                if(faction == 1)
+                {
+                    if(Creature* Varian = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_VARIAN)))
+                        DoScriptText(SAY_VARIAN_CHAMP1, Varian);
+                }
+                if(faction == 2)
+                {
+                    if(Creature* Garrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+                        DoScriptText(SAY_GARROSH_CHAMP1, Garrosh);
+                }
+                ++IntroStep;
+                IntroTimer = 15000;
+                break;
+            case 5:
+                DoScriptText(SAY_TIRION_CHAMP_INTRO2, m_creature);
+                ++IntroStep;
+                IntroTimer = 5000;
+                break;
+            case 7:
+                if(faction == 2)
+                {
+                    if(Creature* Varian = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_VARIAN)))
+                    {
+                        DoScriptText(SAY_VARIAN_CHAMP2, Varian);
+                        SummonHorde();
+                        m_pInstance->SetData(TYPE_STAGE,4);
+                    }
+                }
+                if(faction == 1)
+                {
+                    if(Creature* Garrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+                    {
+                        DoScriptText(SAY_GARROSH_CHAMP2, Garrosh);
+                        SummonAly();
+                        m_pInstance->SetData(TYPE_STAGE,3);
+                    }
+                }
+                isChampIntro = false;
+                ++IntroStep;
+                IntroTimer = 3000;
+                break;
+            }
+
+            if (IntroTimer <= uiDiff)
+            {
+                ++IntroStep;
+                IntroTimer = 330000;
+            } IntroTimer -= uiDiff;
+        }
+    }
+};
+
+CreatureAI* GetAI_npc_tirion(Creature* pCreature)
+{
+    return new npc_tirionAI (pCreature);
+}
+
 /*######
 ## npc_crusader_anouncer
 ######*/
 
 struct MANGOS_DLL_DECL npc_crusader_anouncerAI : public ScriptedAI
 {
-    npc_crusader_anouncerAI(Creature* pCreature) : ScriptedAI(pCreature) {Reset();}
+    npc_crusader_anouncerAI(Creature* pCreature) : ScriptedAI(pCreature) 
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        Difficulty = (uint8)pCreature->GetMap()->GetDifficulty();
+        Reset();
+    }
 
     ScriptedInstance* m_pInstance;
+    uint8 Difficulty;
+
+    bool flag25;
+
+    bool m_bIsIntro;
+    bool isIntroDone;
+    uint8 m_uiIntro_Phase;
+    uint32 m_uiSpeech_Timer;
+
+    void Reset() 
+    {
+        m_pInstance->SetData(TYPE_STAGE,0);
+        flag25 = true;
 
-    void Reset() {}
+        m_uiIntro_Phase     = 0;
+        m_uiSpeech_Timer    = 1000;
+        m_bIsIntro          = false;
+        isIntroDone         = false;
+    }
 
-    void StartEvent(Player* pPlayer)
+    void MoveInLineOfSight(Unit* pWho)
     {
-        // code starting the event here
+        if (pWho->isTargetableForAttack() && pWho->isInAccessablePlaceFor(m_creature) && m_pInstance->GetData(TYPE_INTRO) != DONE &&
+            !m_bIsIntro && pWho->GetTypeId() == TYPEID_PLAYER && m_creature->IsWithinDistInMap(pWho, 110) && !isIntroDone)
+            m_bIsIntro = true;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (m_bIsIntro && !isIntroDone)
+        {
+            if(m_uiSpeech_Timer < uiDiff)
+            {
+                switch(m_uiIntro_Phase)
+                {
+                case 0:
+                    m_creature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+                    if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                        DoScriptText(SAY_TIRION_WELCOME, Tirion);
+
+                    /* temp */
+                    m_bIsIntro = false;
+                    isIntroDone = true;
+                    m_creature->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+                    if(m_pInstance)
+                    {
+                        m_pInstance->SetData(TYPE_STAGE,0);
+                        m_pInstance->SetData(TYPE_COUNTER,50);
+                        m_pInstance->SetData(TYPE_INTRO,DONE);
+                    }
+                    /* temp */
+
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 23000;
+                    break;
+                    // aly intro
+                case 1:
+                    if(Creature* Varian = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_VARIAN)))
+                        DoScriptText(SAY_VARIAN_INTRO1, Varian);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 3000;
+                    break;
+                case 2:
+                    if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                        DoScriptText(SAY_TIRION_ALY1, Tirion);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 3:
+                    if(Creature* Jaina = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_JAINA)))
+                        DoScriptText(SAY_JAINA_INTRO1, Jaina);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 4:
+                    if(Creature* Varian = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_VARIAN)))
+                        DoScriptText(SAY_VARIAN_INTRO2, Varian);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 5:
+                    if(Creature* Jaina = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_JAINA)))
+                        DoScriptText(SAY_JAINA_INTRO2, Jaina);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 6:
+                    if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                        DoScriptText(SAY_TIRION_ALY2, Tirion);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 7:
+                    if(Creature* Varian = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_VARIAN)))
+                        DoScriptText(SAY_VARIAN_INTRO3, Varian);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                    //horde intro
+                case 8:
+                    if(Creature* Thrall = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_THRALL)))
+                        DoScriptText(SAY_THRALL_INTRO1, Thrall);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 9:
+                    if(Creature* Garrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+                        DoScriptText(SAY_GARROSH_INTRO1, Garrosh);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 10:
+                    if(Creature* Thrall = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_THRALL)))
+                        DoScriptText(SAY_THRALL_INTRO2, Thrall);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 11:
+                    if(Creature* Garrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+                        DoScriptText(SAY_GARROSH_INTRO2, Garrosh);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 12:
+                    if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                        DoScriptText(SAY_TIRION_HORDE1, Tirion);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 5000;
+                    break;
+                case 13:
+                    if(Creature* Thrall = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_THRALL)))
+                        DoScriptText(SAY_THRALL_INTRO3, Thrall);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 14:
+                    if(Creature* Garrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+                        DoScriptText(SAY_GARROSH_INTRO3, Garrosh);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 15:
+                    if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                        DoScriptText(SAY_TIRION_HORDE2, Tirion);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 16:
+                    if(Creature* Thrall = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_THRALL)))
+                        DoScriptText(SAY_THRALL_INTRO4, Thrall);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 17:
+                    if(Creature* Garrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+                        DoScriptText(SAY_GARROSH_INTRO4, Garrosh);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 18:
+                    if(Creature* Thrall = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_THRALL)))
+                        DoScriptText(SAY_THRALL_INTRO5, Thrall);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 3000;
+                    break;
+                case 19:
+                    if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                        DoScriptText(SAY_TIRION_HORDE3, Tirion);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 20:
+                    if(Creature* Garrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+                        DoScriptText(SAY_GARROSH_INTRO5, Garrosh);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 3000;
+                    break;
+                case 21:
+                    if(Creature* Thrall = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_THRALL)))
+                        DoScriptText(SAY_THRALL_INTRO6, Thrall);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                case 22:
+                    if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                        DoScriptText(SAY_TIRION_HORDE4, Tirion);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 10000;
+                    break;
+                    // start trial
+                case 23:
+                    if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                        DoScriptText(SAY_TIRION_TRIAL, Tirion);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 15000;
+                    break;
+                case 24:
+                    if(Creature* Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                        DoScriptText(SAY_TIRION_TWINS_INTRO2, Tirion);
+                    ++m_uiIntro_Phase;
+                    m_uiSpeech_Timer = 3000;
+                    break;
+                case 25:
+                    m_bIsIntro = false;
+                    isIntroDone = true;
+                    m_creature->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+                    if(m_pInstance)
+                    {
+                        m_pInstance->SetData(TYPE_STAGE,0);
+                        m_pInstance->SetData(TYPE_INTRO,DONE);
+                    }
+                    m_uiSpeech_Timer = 1000;
+                    break;
+                default:
+                    m_uiSpeech_Timer = 100000;
+                }
+            }else m_uiSpeech_Timer -= uiDiff;
+        }
+
+        if (!m_pInstance) 
+            return;
+
+        // Stages
+        switch (m_pInstance->GetData(TYPE_STAGE)) 
+        {
+            // idle
+        case 0:
+            break; 
+
+            // beasts -> code handeled in boss script
+        case 1: 
+            break;
+
+            // Jaraxxus -> code handeled in boss script
+        case 2: 
+            break;
+
+            // Crusaders -> alliance
+        case 3: 
+            {
+                Creature* pTemp1 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_1));
+                Creature* pTemp2 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_2));
+                Creature* pTemp3 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_3));
+                Creature* pTemp4 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_4));
+                Creature* pTemp5 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_5));
+                Creature* pTemp6 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_6));
+
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    Creature* pTemp7 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_7));
+                    Creature* pTemp8 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_8));
+                    Creature* pTemp9 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_9));
+                    Creature* pTemp10 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_1_10));
+                    Creature* pTemp11 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_1));
+                    Creature* pTemp12 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_2));
+                    if (pTemp7 && pTemp8 && pTemp9 && pTemp10 && pTemp11 && pTemp12) 
+                    {
+                        if (!pTemp7->isAlive() && !pTemp8->isAlive() && !pTemp9->isAlive() && !pTemp10->isAlive() && !pTemp11->isAlive() && !pTemp12->isAlive())
+                            flag25 = true;
+                        else 
+                            flag25 = false;
+                    }
+                } 
+                else flag25 = true;
+
+                if (pTemp1 && pTemp2 && pTemp3 && pTemp4 && pTemp5 && pTemp6) 
+                {
+                    if (!pTemp1->isAlive() && !pTemp2->isAlive() && !pTemp3->isAlive() && !pTemp4->isAlive() && !pTemp5->isAlive() && !pTemp6->isAlive() && flag25) {
+                        m_pInstance->SetData(TYPE_STAGE,0);
+                        m_pInstance->SetData(TYPE_FACTION_CHAMPIONS,DONE);
+                        m_creature->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+                        m_creature->SetVisibility(VISIBILITY_ON);
+
+                        if(Creature *pGarrosh = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_GARROSH)))
+                            DoScriptText(SAY_VICTORY_HORDE, pGarrosh);
+
+                        if(Creature *pTirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                            DoScriptText(SAY_OUTRO_TIRION, pTirion);
+                    }
+                };
+                break;
+            };
+
+            // crusaders -> horde
+        case 4: 
+            {
+                Creature* pTemp1 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_1));
+                Creature* pTemp2 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_2));
+                Creature* pTemp3 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_3));
+                Creature* pTemp4 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_4));
+                Creature* pTemp5 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_5));
+                Creature* pTemp6 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_6));
+
+                if(Difficulty == RAID_DIFFICULTY_25MAN_NORMAL || Difficulty == RAID_DIFFICULTY_25MAN_HEROIC)
+                {
+                    Creature* pTemp7 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_7));
+                    Creature* pTemp8 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_8));
+                    Creature* pTemp9 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_9));
+                    Creature* pTemp10 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_2_10));
+                    Creature* pTemp11 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_1));
+                    Creature* pTemp12 = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(NPC_CRUSADER_0_2));
+                    if (pTemp7 && pTemp8 && pTemp9 && pTemp10 && pTemp11 && pTemp12) 
+                    {
+                        if (!pTemp7->isAlive() && !pTemp8->isAlive() && !pTemp9->isAlive() && !pTemp10->isAlive() && !pTemp11->isAlive() && !pTemp12->isAlive())
+                            flag25 = true;
+                        else 
+                            flag25 = false;
+                    }
+                } else flag25 = true;
+
+                if (pTemp1 && pTemp2 && pTemp3 && pTemp4 && pTemp5 && pTemp6) 
+                {
+                    if (!pTemp1->isAlive() && !pTemp2->isAlive() && !pTemp3->isAlive() && !pTemp4->isAlive() && !pTemp5->isAlive() && !pTemp6->isAlive() && flag25) 
+                    {
+                        m_pInstance->SetData(TYPE_STAGE,0);
+                        m_pInstance->SetData(TYPE_FACTION_CHAMPIONS,DONE);
+                        m_creature->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+                        m_creature->SetVisibility(VISIBILITY_ON);
+
+                        if(Creature *pVarian = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_VARIAN)))
+                            DoScriptText(SAY_VICTORY_ALY, pVarian);
+
+                        if(Creature *pTirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                            DoScriptText(SAY_OUTRO_TIRION, pTirion);
+                    }
+                };
+                break;
+            };
+
+            // twin valkyrs -> code handeled in boss script
+        case 5: 
+            break;
+
+            // anub'arak -> code handeled in boss script
+        case 6: 
+            break;
+        }
     }
 };
 
 bool GossipHello_npc_crusader_anouncer(Player* pPlayer, Creature* pCreature)
 {
-    pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_START_EVENT1, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+1);
+    ScriptedInstance* m_pInstance;
+    m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+
+    if (!m_pInstance) return false;
+
+    if(!pPlayer->getAttackers().empty()) return true;
+
+    for(uint8 i = 0; i < NUM_MESSAGES; i++) 
+    {
+        if (!TocGossipMessage[i].state && (m_pInstance->GetData(TocGossipMessage[i].encounter) == NOT_STARTED || m_pInstance->GetData(TocGossipMessage[i].encounter) == IN_PROGRESS || m_pInstance->GetData(TocGossipMessage[i].encounter) == FAIL)) 
+        {
+            if (TocGossipMessage[i].encounter == TYPE_FACTION_CHAMPIONS)
+            {
+                // check if aly
+                if(pPlayer->GetTeam() == ALLIANCE)
+                {
+                    pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, TocGossipMessage[3].name, GOSSIP_SENDER_MAIN,TocGossipMessage[3].id);
+                    break;
+                }
+                // check if horde
+                if(pPlayer->GetTeam() == HORDE)
+                {
+                    pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, TocGossipMessage[2].name, GOSSIP_SENDER_MAIN,TocGossipMessage[2].id);
+                    break;
+                }
+            }
+
+            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, TocGossipMessage[i].name, GOSSIP_SENDER_MAIN,TocGossipMessage[i].id);
+            break;
+
+        }
+        if (TocGossipMessage[i].state && m_pInstance->GetData(TocGossipMessage[i].encounter) == DONE)
+            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, TocGossipMessage[i].name, GOSSIP_SENDER_MAIN,TocGossipMessage[i].id);
+    };
+
     pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());
     return true;
 }
 
 bool GossipSelect_npc_crusader_anouncer(Player* pPlayer, Creature* pCreature, uint32 uiSender, uint32 uiAction)
 {
-    if (uiAction == GOSSIP_ACTION_INFO_DEF+1)
+    ScriptedInstance* m_pInstance;
+    m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+
+    pPlayer->CLOSE_GOSSIP_MENU();
+
+    switch(uiAction) 
     {
-        pPlayer->CLOSE_GOSSIP_MENU();
-        if (npc_crusader_anouncerAI* pCrusaderAnnouncerAI = dynamic_cast<npc_crusader_anouncerAI*>(pCreature->AI()))
-            pCrusaderAnnouncerAI->StartEvent(pPlayer);
-    }
+    case GOSSIP_ACTION_INFO_DEF+1: 
+        {
+            if (m_pInstance->GetData(TYPE_NORTHREND_BEASTS) == NOT_STARTED || m_pInstance->GetData(TYPE_NORTHREND_BEASTS) == FAIL) 
+            {
+                m_pInstance->SetData(TYPE_STAGE,1);
+                m_pInstance->SetData(TYPE_NORTHREND_BEASTS,IN_PROGRESS);
+            }
+            pCreature->SetVisibility(VISIBILITY_OFF);
+            pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*pCreature),m_pInstance->GetData64(NPC_GORMOK)))
+            { 
+                if(!pTemp->isAlive()) 
+                    pTemp->Respawn(); 
+            }
+            else 
+            {
+                if (Creature* pGromok = pCreature->SummonCreature(NPC_GORMOK, SpawnLoc[28].x, SpawnLoc[28].y, SpawnLoc[28].z, 5, TEMPSUMMON_TIMED_OR_CORPSE_DESPAWN, DESPAWN_TIME))
+                {
+                    pGromok->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pGromok->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                    pGromok->SetInCombatWithZone();
+                }
+            }
+
+            if(Creature *Tirion = (Creature*)Unit::GetUnit((*pCreature),m_pInstance->GetData64(DATA_TIRION)))
+                DoScriptText(SAY_SUMMON_GORMOK, Tirion);
+            if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            break;
+        };
+
+    case GOSSIP_ACTION_INFO_DEF+2: 
+        {
+            m_pInstance->SetData(TYPE_STAGE,2);
+            pCreature->SetVisibility(VISIBILITY_OFF);
+            pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            if(Creature *pTirion = (Creature*)Unit::GetUnit((*pCreature),m_pInstance->GetData64(DATA_TIRION)))
+                ((npc_tirionAI*)pTirion->AI())->SetJaruIntro();
+
+            if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            break;
+        };
+
+    case GOSSIP_ACTION_INFO_DEF+3: 
+        {
+            m_pInstance->SetData(TYPE_FACTION_CHAMPIONS,IN_PROGRESS);
+            pCreature->SetVisibility(VISIBILITY_OFF);
+            pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+
+            if(Creature *pTirion = (Creature*)Unit::GetUnit((*pCreature),m_pInstance->GetData64(DATA_TIRION)))
+                ((npc_tirionAI*)pTirion->AI())->SetChampIntro(1);
+            break;
+        };
+
+    case GOSSIP_ACTION_INFO_DEF+4: 
+        {
+            m_pInstance->SetData(TYPE_FACTION_CHAMPIONS,IN_PROGRESS);
+            pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pCreature->SetVisibility(VISIBILITY_OFF);
+
+            if(Creature *pTirion = (Creature*)Unit::GetUnit((*pCreature),m_pInstance->GetData64(DATA_TIRION)))
+                ((npc_tirionAI*)pTirion->AI())->SetChampIntro(2);
+            break;
+        };
+
+    case GOSSIP_ACTION_INFO_DEF+5: 
+        {
+            m_pInstance->SetData(TYPE_STAGE,5);
+            m_pInstance->SetData(TYPE_TWIN_VALKYR,IN_PROGRESS);
+            pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pCreature->SetVisibility(VISIBILITY_OFF);
+            if(Creature *Tirion = (Creature*)Unit::GetUnit((*pCreature),m_pInstance->GetData64(DATA_TIRION)))
+                DoScriptText(SAY_TIRION_TWINS_INTRO1, Tirion);
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*pCreature),m_pInstance->GetData64(DATA_FJOLA)))
+            { 
+                if(!pTemp->isAlive()) 
+                {
+                    pTemp->Respawn();
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            else 
+            {
+                if (Creature* pFjola = pCreature->SummonCreature(NPC_FJOLA, SpawnLoc[28].x + 5, SpawnLoc[28].y, SpawnLoc[28].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME))
+                {
+                    pFjola->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x + 5, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pFjola->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                    pFjola->SetInCombatWithZone();
+                }
+            }
+            if (Creature* pTemp = (Creature*)Unit::GetUnit((*pCreature),m_pInstance->GetData64(DATA_EYDIS)))
+            { 
+                if(!pTemp->isAlive()) 
+                {
+                    pTemp->Respawn();
+                    pTemp->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pTemp->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                    pTemp->SetInCombatWithZone();
+                }
+            }
+            else 
+            {
+                if (Creature* pEydis = pCreature->SummonCreature(NPC_EYDIS, SpawnLoc[28].x - 5, SpawnLoc[28].y, SpawnLoc[28].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME)) 
+                {
+                    pEydis->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x - 5, SpawnLoc[1].y, SpawnLoc[1].z);
+                    pEydis->RemoveSplineFlag(SPLINEFLAG_WALKMODE);
+                    pEydis->SetInCombatWithZone();
+                }
+            }
+            if(GameObject* pMainGate = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_MAIN_GATE)))
+                m_pInstance->DoUseDoorOrButton(pMainGate->GetGUID());
+            // summon essences
+            for(uint8 i = 22; i < 24; i++)
+                pCreature->SummonCreature(NPC_DARK_ESSENCE, SpawnLoc[i].x, SpawnLoc[i].y, SpawnLoc[i].z, 0, TEMPSUMMON_MANUAL_DESPAWN, 0);
+            for(uint8 i = 24; i < 26; i++)
+                pCreature->SummonCreature(NPC_LIGHT_ESSENCE, SpawnLoc[i].x, SpawnLoc[i].y, SpawnLoc[i].z, 0, TEMPSUMMON_MANUAL_DESPAWN, 0);
+            break;
+        };
+
+    case GOSSIP_ACTION_INFO_DEF+6: 
+        {
+            m_pInstance->SetData(TYPE_STAGE,6);
+            pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pCreature->SetVisibility(VISIBILITY_OFF);
+            if(Creature *pTemp = pCreature->SummonCreature(NPC_LICH_KING, SpawnLoc[2].x, SpawnLoc[2].y, SpawnLoc[2].z, 5, TEMPSUMMON_CORPSE_TIMED_DESPAWN, DESPAWN_TIME))
+                pTemp->SetVisibility(VISIBILITY_OFF);
+            break;
+        };
+
+    case GOSSIP_ACTION_INFO_DEF+8:
+        {
+            m_pInstance->SetData(TYPE_STAGE,0);
+            pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            break;
+        };
+    };
 
     return true;
 }
@@ -74,6 +1235,107 @@ CreatureAI* GetAI_npc_crusader_anouncer(Creature* pCreature)
     return new npc_crusader_anouncerAI(pCreature);
 }
 
+struct MANGOS_DLL_DECL npc_lich_kingAI : public ScriptedAI
+{
+    npc_lich_kingAI(Creature *pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = ((ScriptedInstance*)pCreature->GetInstanceData());
+        pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+        Reset();
+    }
+    ScriptedInstance *m_pInstance;
+
+    uint32 IntroTimer;
+    uint32 IntroStep;
+
+    void Reset()
+    {
+        IntroTimer          = 10000;
+        IntroStep           = 1;
+    }
+
+    void AttackStart(Unit* pWho)
+    {
+        return;
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        switch(IntroStep)
+        {
+        case 1:
+            if(Creature *Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                DoScriptText(SAY_TIRION_ANUB_INTRO1, Tirion);
+            ++IntroStep;
+            IntroTimer = 18000;
+            break;
+        case 3:
+            m_creature->GetMotionMaster()->MovePoint(0, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z);
+            m_creature->AddSplineFlag(SPLINEFLAG_WALKMODE);
+            m_creature->SetVisibility(VISIBILITY_ON);
+            DoScriptText(SAY_LICHKING_INTRO2, m_creature);
+            DoScriptText(SAY_LICHKING_INTRO3, m_creature);
+            m_creature->SetUInt32Value(UNIT_NPC_EMOTESTATE, EMOTE_STATE_TALK);
+            ++IntroStep;
+            IntroTimer = 5000;
+            break;
+        case 5:
+            if(Creature *Tirion = (Creature*)Unit::GetUnit((*m_creature),m_pInstance->GetData64(DATA_TIRION)))
+                DoScriptText(SAY_TIRION_ANUB_INTRO4, Tirion);
+            ++IntroStep;
+            IntroTimer = 8000;
+            break;
+        case 7:
+            DoScriptText(SAY_LICHKING_INTRO5, m_creature);
+            DoScriptText(SAY_LICHKING_INTRO6, m_creature);
+            m_creature->HandleEmoteCommand(EMOTE_ONESHOT_EXCLAMATION);
+            ++IntroStep;
+            IntroTimer = 15000;
+            break;
+        case 9:
+            m_creature->HandleEmoteCommand(EMOTE_ONESHOT_KNEEL);
+            ++IntroStep;
+            IntroTimer = 5000;
+            break;
+        case 11:
+            DoScriptText(SAY_LICHKING_INTRO8, m_creature);
+            if(GameObject* pFloor = m_pInstance->instance->GetGameObject(m_pInstance->GetData64(DATA_FLOOR)))  
+            {
+                //pFloor->Delete();
+                pFloor->SetUInt32Value(GAMEOBJECT_DISPLAYID,9060);
+                pFloor->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_UNK_10 | GO_FLAG_NODESPAWN);
+                pFloor->SetUInt32Value(GAMEOBJECT_BYTES_1,8449);
+            }
+            m_pInstance->SetData(TYPE_STAGE,6);
+            ++IntroStep;
+            IntroTimer = 1000;
+            break;
+        case 13:
+            DoScriptText(SAY_LICHKING_INTRO7, m_creature);
+            ++IntroStep;
+            IntroTimer = 9000;
+            break;
+        case 15:
+            m_creature->SetVisibility(VISIBILITY_OFF);
+            ++IntroStep;
+            IntroTimer = 9000;
+            break;
+        }
+
+        if (IntroTimer <= uiDiff)
+        {
+            ++IntroStep;
+            IntroTimer = 330000;
+        } IntroTimer -= uiDiff;
+    }
+
+};
+
+CreatureAI* GetAI_npc_lich_king(Creature* pCreature)
+{
+    return new npc_lich_kingAI (pCreature);
+}
+
 void AddSC_trial_of_the_crusader()
 {
     Script* newscript;
@@ -84,4 +1346,14 @@ void AddSC_trial_of_the_crusader()
     newscript->pGossipHello = &GossipHello_npc_crusader_anouncer;
     newscript->pGossipSelect = &GossipSelect_npc_crusader_anouncer;
     newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "npc_lich_king";
+    newscript->GetAI = &GetAI_npc_lich_king;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name = "npc_tirion";
+    newscript->GetAI = &GetAI_npc_tirion;
+    newscript->RegisterSelf();
 }
diff --git a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/trial_of_the_crusader.h b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/trial_of_the_crusader.h
index 20ec79f..8cb01ce 100644
--- a/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/trial_of_the_crusader.h
+++ b/scripts/northrend/crusaders_coliseum/trial_of_the_crusader/trial_of_the_crusader.h
@@ -7,7 +7,7 @@
 
 enum
 {
-    MAX_ENCOUNTER          = 5,
+    MAX_ENCOUNTER          = 8,
 
     TYPE_NORTHREND_BEASTS  = 1,
     TYPE_JARAXXUS          = 2,
@@ -15,6 +15,14 @@ enum
     TYPE_TWIN_VALKYR       = 4,
     TYPE_ANUBARAK          = 5,
 
+    TYPE_COUNTER           = 7,
+    TYPE_INTRO             = 8,
+    TYPE_STAGE             = 0,
+
+    // implement this in order to avoid the valkyrs
+    // to cast their special spell in the same time
+    TYPE_TWINS_CASTING     = 9,
+
     DATA_GORMOK            = 6,
     DATA_ACIDMAW           = 7,
     DATA_DREADSCALE        = 8,
@@ -24,6 +32,149 @@ enum
     DATA_FJOLA             = 12,
     DATA_EYDIS             = 13,
     DATA_ANUBARAK          = 14,
+
+    DATA_TIRION             = 15, 
+    DATA_VARIAN             = 16,
+    DATA_GARROSH            = 17,
+    DATA_BARRET            = 18,
+    DATA_JAINA              = 19,
+    DATA_THRALL             = 20,
+
+    MAX_EVENT              = 4,
+    
+    NPC_BARRENT                 = 34816,
+    NPC_TIRION                  = 34996,
+    NPC_TIRION_END              = 36095,
+    NPC_WILFRED                 = 35458,
+    NPC_GARROSH                 = 34995,
+    NPC_VARIAN                  = 34990,
+    NPC_LICH_KING               = 35877,
+
+    NPC_THRALL                  = 34994,
+    NPC_JAINA                   = 34992,
+    NPC_PORTAL                  = 19224,
+    NPC_TRIGGER                 = 22517,
+
+    NPC_ICEHOWL                 = 34797,
+    NPC_GORMOK                  = 34796,
+    NPC_DREADSCALE              = 34799,
+    NPC_ACIDMAW                 = 35144,
+
+    NPC_JARAXXUS                = 34780,
+
+    // aly
+    NPC_CRUSADER_1_1            = 34460,
+    NPC_CRUSADER_1_2            = 34463,
+    NPC_CRUSADER_1_3            = 34461,
+    NPC_CRUSADER_1_4            = 34471,
+    NPC_CRUSADER_1_5            = 34475,
+    NPC_CRUSADER_1_6            = 34472,
+    NPC_CRUSADER_1_7            = 34467,
+    NPC_CRUSADER_1_8            = 34468,
+    NPC_CRUSADER_1_9            = 34473,
+    NPC_CRUSADER_1_10           = 34474,
+
+    // horde
+    NPC_CRUSADER_2_1            = 34453,
+    NPC_CRUSADER_2_2            = 34455,
+    NPC_CRUSADER_2_3            = 34458,
+    NPC_CRUSADER_2_4            = 34454,
+    NPC_CRUSADER_2_5            = 34451,
+    NPC_CRUSADER_2_6            = 34456,
+    NPC_CRUSADER_2_7            = 34441,
+    NPC_CRUSADER_2_8            = 34449,
+    NPC_CRUSADER_2_9            = 34448,
+    NPC_CRUSADER_2_10           = 34450,
+
+    // crusaders pets
+    NPC_CRUSADER_0_1            = 35465,
+    NPC_CRUSADER_0_2            = 35610,
+
+    NPC_FJOLA                   = 34497,
+    NPC_EYDIS                   = 34496,
+
+    NPC_DARK_ESSENCE            = 34567,
+    NPC_LIGHT_ESSENCE           = 34568,
+
+    NPC_ANUBARAK                = 34564,
+ 
+    GO_CRUSADERS_CACHE_10       = 195631,
+    GO_CRUSADERS_CACHE_25       = 195632,
+    GO_CRUSADERS_CACHE_10_H     = 195633,
+    GO_CRUSADERS_CACHE_25_H     = 195635,
+
+    GO_TRIBUTE_CHEST_10H_25     = 195665,   // 1-25
+    GO_TRIBUTE_CHEST_10H_45     = 195666,   // 25-44
+    GO_TRIBUTE_CHEST_10H_50     = 195667,   // 45-49
+    GO_TRIBUTE_CHEST_10H_99     = 195668,   // no wipe
+
+    GO_TRIBUTE_CHEST_25H_25     = 195669,
+    GO_TRIBUTE_CHEST_25H_45     = 195670,
+    GO_TRIBUTE_CHEST_25H_50     = 195671,
+    GO_TRIBUTE_CHEST_25H_99     = 195672,
+
+    GO_MAIN_GATE                = 195647,
+    GO_WEST_GATE                = 195589,
+    GO_SOUTH_GATE               = 195590,
+    GO_NORTH_GATE               = 195591,
+    GO_COLISEUM_FLOOR           = 195527,
+    GO_WEB_DOOR                 = 195485,
+
+    DATA_HEALTH_EYDIS           = 201,
+    DATA_HEALTH_FJOLA           = 202,
+    DATA_CASTING_EYDIS          = 203,
+    DATA_CASTING_FJOLA          = 204,
+ 
+    DESPAWN_TIME                = 300000, 
+
+    DATA_ANNOUNCER              = 0,
+    DATA_FLOOR                  = 1,
+    DATA_MAIN_GATE              = 2,
+};
+
+struct Locations
+{
+    float x, y, z;
+    uint32 id;
+};
+ 
+static Locations SpawnLoc[]=
+{
+    {559.257996f, 90.266197f, 395.122986f},  // 0 Barrent
+    {563.672974f, 139.571f, 393.837006f},    // 1 Center
+    {563.833008f, 187.244995f, 394.5f},      // 2 Backdoor
+    {577.347839f, 195.338888f, 395.14f},     // 3 - Right
+    {550.955933f, 195.338888f, 395.14f},     // 4 - Left
+    {575.042358f, 195.260727f, 395.137146f}, // 5
+    {552.248901f, 195.331955f, 395.132658f}, // 6
+    {573.342285f, 195.515823f, 395.135956f}, // 7
+    {554.239929f, 195.825577f, 395.137909f}, // 8
+    {571.042358f, 195.260727f, 395.137146f}, // 9
+    {556.720581f, 195.015472f, 395.132658f}, // 10
+    {569.534119f, 195.214478f, 395.139526f}, // 11
+    {569.231201f, 195.941071f, 395.139526f}, // 12
+    {558.811610f, 195.985779f, 394.671661f}, // 13
+    {567.641724f, 195.351501f, 394.659943f}, // 14
+    {560.633972f, 195.391708f, 395.137543f}, // 15
+    {565.816956f, 195.477921f, 395.136810f}, // 16
+    {563.549f, 152.474f, 394.393f},          // 17 - Lich king start
+    {563.547f, 141.613f, 393.908f},          // 18 - Lich king end
+    {787.932556f, 133.28978f, 142.612152f},  // 19 - Anub'arak start location
+    {618.157898f, 132.640869f, 139.559769f}, // 20 - Anub'arak move point location
+    {508.104767f, 138.247345f, 395.128052f}, // 21 - Fizzlebang start location
+    {586.060242f, 117.514809f, 394.314026f}, // 22 - Dark essence 1
+    {541.602112f, 161.879837f, 394.587952f}, // 23 - Dark essence 2
+    {541.021118f, 117.262932f, 395.314819f}, // 24 - Light essence 1
+    {586.200562f, 162.145523f, 394.626129f}, // 25 - Light essence 2
+    {563.833008f, 195.244995f, 394.585561f}, // 26 - outdoor
+    {548.610596f, 139.807800f, 394.321838f}, // 27 - fizzlebang end
+    {564.161133f, 230.246307f, 394.661560f}, // 28 outside the door   
+};
+
+enum uiWorldStates
+{
+    UPDATE_STATE_UI_SHOW            = 4390,
+    UPDATE_STATE_UI_COUNT           = 4389,
 };
 
 #endif
diff --git a/sql/Custom_Updates/Mangos/Northrend/TrialOfTheCrusader_Mangos.sql b/sql/Custom_Updates/Mangos/Northrend/TrialOfTheCrusader_Mangos.sql
new file mode 100644
index 0000000..808e63b
--- /dev/null
+++ b/sql/Custom_Updates/Mangos/Northrend/TrialOfTheCrusader_Mangos.sql
@@ -0,0 +1,54 @@
+/* TRIAL OF THE CRUSADER */
+-- event
+UPDATE creature_template SET npcflag=1, flags_extra = 1, scriptname='npc_crusader_anouncer' WHERE `entry`=34816;
+update creature set spawntimesecs = 604800 where id = 34816;
+UPDATE creature_template SET flags_extra = 1, scriptname='npc_lich_king' WHERE `entry`=35877;
+UPDATE creature_template SET scriptname='npc_tirion' WHERE `entry`=34996;
+delete from gameobject where id in (195485);
+insert into gameobject VALUES (110011,195485,649,15,65535,665.490,136.864,133.594,6.27,0,0,0,0,604800,0,1);
+update gameobject_template set faction = 114 where entry = 195485;
+-- beasts
+UPDATE creature_template SET scriptname='boss_gormok' WHERE `entry`=34796;
+UPDATE creature_template SET scriptname='mob_snobold_vassal' WHERE `entry`=34800;
+UPDATE creature_template SET scriptname='boss_icehowl' WHERE `entry`=34797;
+UPDATE creature_template SET scriptname='boss_acidmaw' WHERE `entry`=35144;
+UPDATE creature_template SET scriptname='boss_dreadscale' WHERE `entry`=34799;
+UPDATE creature_template SET scriptname='mob_slime_pool' WHERE `entry`=35176;
+-- Jaru
+UPDATE creature_template SET equipment_id = 104000, scriptname='boss_jaraxxus' WHERE `entry` in (34780, 12075, 12077, 12078);
+delete from creature_equip_template where entry = 104000;
+insert into creature_equip_template values (104000, 42139, 0, 0);
+UPDATE creature_template SET `faction_A` = 35, `faction_H` = 35, scriptname='mob_legion_flame' WHERE `entry`=34784;
+UPDATE creature_template SET scriptname='mob_infernal_volcano' WHERE `entry`=34813;
+UPDATE creature_template SET scriptname='mob_felflame_infernal' WHERE `entry`=34815;
+UPDATE creature_template SET scriptname='mob_nether_portal' WHERE `entry`=34825;
+UPDATE creature_template SET scriptname='mob_mistress_of_pain' WHERE `entry`=34826;
+UPDATE creature_template SET scriptname='npc_jaina' WHERE `entry`=34992;
+-- Champions
+UPDATE creature_template SET scriptname='boss_fc_resto_druid' WHERE `entry` in (34469, 34459);
+UPDATE creature_template SET scriptname='boss_fc_resto_shammy' WHERE `entry` in (34470, 34444);
+UPDATE creature_template SET scriptname='boss_fc_holy_pally' WHERE `entry` in (34465, 34445);
+UPDATE creature_template SET scriptname='boss_fc_holy_priest' WHERE `entry` in (34466, 34447);
+UPDATE creature_template SET scriptname='boss_fc_shadow_priest' WHERE `entry` in (34473, 34441);
+UPDATE creature_template SET scriptname='boss_fc_mage' WHERE `entry` in (34468, 34449);
+UPDATE creature_template SET scriptname='boss_fc_warlock' WHERE `entry` in (34474, 34450);
+UPDATE creature_template SET scriptname='boss_fc_hunter' WHERE `entry` in (34467, 34448);
+UPDATE creature_template SET scriptname='boss_fc_boomkin' WHERE `entry` in (34460, 34451);
+UPDATE creature_template SET scriptname='boss_fc_warrior' WHERE `entry` in (34475, 34453);
+UPDATE creature_template SET scriptname='boss_fc_rogue' WHERE `entry` in (34472, 34454);
+UPDATE creature_template SET scriptname='boss_fc_enh_shammy' WHERE `entry` in (34463, 34455);
+UPDATE creature_template SET scriptname='boss_fc_ret_pally' WHERE `entry` in (34471, 34456);
+UPDATE creature_template SET scriptname='boss_fc_pet_zhaagrym' WHERE `entry` = 35465;
+UPDATE creature_template SET scriptname='boss_fc_pet_cat' WHERE `entry` = 35610;
+-- Valkyr twins
+UPDATE creature_template SET scriptname='boss_fjola' WHERE `entry`=34497;
+UPDATE creature_template SET scriptname='boss_eydis' WHERE `entry`=34496;
+UPDATE creature_template SET scriptname='mob_valkyr_orb' WHERE `entry` in (34630, 34628);
+UPDATE creature_template SET scriptname='mob_valkyr_essence' WHERE `entry` in (34567, 34568);
+-- Anub
+UPDATE creature_template SET scriptname='boss_anubarak_trial' WHERE `entry`=34564;
+UPDATE creature_template SET `faction_A` = 14, `faction_H` = 14, scriptname='mob_frost_sphere' WHERE `entry`=34606;
+UPDATE creature_template SET scriptname='mob_nerubian_burrower' WHERE `entry`=34607;
+UPDATE creature_template SET scriptname='mob_swarm_scarab' WHERE `entry`=34605;
+UPDATE creature_template SET npcFlag = 1, scriptname='npc_tirion_end' WHERE `entry`=36095;
+update `gameobject` set `position_x` = 679.531, `position_y` = 137.507, `position_z` = 142.129, `orientation` = 6.215 where `id` in (195665, 195666, 195667, 195668, 195669, 195670, 195671, 195672);
\ No newline at end of file
diff --git a/sql/Custom_Updates/ScriptDev2/Northrend/TrialOfTheCrusader_Script.sql b/sql/Custom_Updates/ScriptDev2/Northrend/TrialOfTheCrusader_Script.sql
new file mode 100644
index 0000000..ccf654f
--- /dev/null
+++ b/sql/Custom_Updates/ScriptDev2/Northrend/TrialOfTheCrusader_Script.sql
@@ -0,0 +1,114 @@
+/* TRIAL OF THE CRUSADER */
+delete from `script_texts` where `entry` between -1605200 and -1605000;
+INSERT INTO `script_texts` (`entry`, `content_default`, `content_loc1`, `content_loc2`, `content_loc3`, `content_loc4`, `content_loc5`, `content_loc6`, `content_loc7`, `content_loc8`, `sound`, `type`, `language`, `emote`, `comment`) VALUES 
+-- Intro:
+-- Aly
+(-1605100,"Tirion","","","","","","","","",16070,1,0,0,"varian intro1"),
+(-1605101,"You ask much of me Tirion. To sit and watch trusting the savages to themselves check.","","","","","","","","",16071,1,0,0,"varian intro2"),
+(-1605102,"Perhaps. I doubt the effectivness of this game. We'd be better preparing our armies for the final assalt. But if my presence is required in these games to gain your support in the battle, then I will remain, for now.","","","","","","","","",16072,1,0,0,"varian intro3"),
+(-1605103,"Your beasts will be no match for my champions, Tirion!","","","","","","","","",16069,1,0,0,"varian beasts"),
+(-1605104,"Thankyou. It's the least I can do to support this. We need to stand together","","","","","","","","",16120,1,0,0,"jaina intro1"),
+(-1605105,"I'm sure Thrall will have his people under control.","","","","","","","","",16321,1,0,0,"jaina intro2"),
+-- Horde
+(-1605106,"Bah, that was a show of strength worthy of a leader. I only regret I didn't kill that human before the mage interfiered.","","","","","","","","",16027,1,0,0,"garosh intro1"),
+(-1605129,"What honor is this, trashing about with blunted sticks. This is a waste of time.","","","","","","","","",16028,1,0,0,"garosh intro2"),
+(-1605130,"Speak for yourself, Thrall!","","","","","","","","",16029,1,0,0,"gorahs intro3"),
+(-1605107,"Words of a fool, you mean. The horde will destroy the undead without your aid, human. ","","","","","","","","",16030,1,0,0,"gorash intro4"),
+(-1605108,"Bahh!","","","","","","","","",16031,1,0,0,"gorahs intro5"),
+(-1605109,"I've seen more worthy chalenges in the ring of blood. You waste our time paladin!","","","","","","","","",16026,1,0,0,"gorash beasts"),
+(-1605110,"Garrosh, I expect you to control yourself here. I do not want to remade of the Violet Citadel!","","","","","","","","",16181,1,0,0,"thrall intro1"),
+(-1605111,"We are guests here, Garrosh. And you will conduct youself honorably!","","","","","","","","",16182,1,0,0,"thrall intro2"),
+(-1605112,"Thankyou for the invitation Lorh Foldring. We look forward to observing these games.","","","","","","","","",16183,1,0,0,"thrall intro3"),
+(-1605113,"Wise words!","","","","","","","","",16184,1,0,0,"thrall intro4"),
+(-1605114,"Garrosh, enought!","","","","","","","","",16185,1,0,0,"thrall intro5"),
+(-1605115,"Of course Tirion. I appologise for his outburst. It will not be repeated!","","","","","","","","",16186,1,0,0,"thrall intro6"),
+-- Tirion
+(-1605120,"Welcome champions. You have heard the call of the Argent Crusade, and you were boldly answered. It is here, in the Crusader's Coliseum, that you will face your greatest challenges. Those of you who survive the rigors of the Coliseum will join the Argent Crusade, on its march to Icecrown Citadel!","","","","","","","","",16036,1,0,0,"tirion intro"),
+(-1605122,"Welcome to the Trials of the Crusader. Only the most powerfull combatants of Azeroth are allowed at these trials. You are among the worthy few.","","","","","","","","",16053,1,0,0,"tirion intro3"),
+(-1605123,"King Varina, Lady Jaina, welcome to the Tournament. Your place in the Coliseum is waiting.","","","","","","","","",16054,1,0,0,"tirion aly1"),
+(-1605124,"My people are here to ensure that they honor the rules of engagement. It will do your subjects well, to see you in the stands.","","","","","","","","",16055,1,0,0,"tirion aly2"),
+(-1605125,"Welcome Warchief Thrall, Overlord Hellscream.","","","","","","","","",16056,1,0,0,"ttirion horde1"),
+(-1605126,"I hope you can see the merits of these events in time Garrosh. We cannot win against the scourge if we continue to war against one another!","","","","","","","","",16057,1,0,0,"tirion horde2"),
+(-1605127,"Under my roof gentelmen, I trust you will behave!","","","","","","","","",16058,1,0,0,"tirion horde3"),
+(-1605128,"If you will follow me then!","","","","","","","","",16059,3,0,0,"tirion horde4"),
+-- Beasts:
+(-1605001,"Hailing from the deepest, darkest carverns of the storm peaks, Gormok the Impaler! Battle on, heroes!.","","","","","","","","",16038,1,0,0,"gormok intro"),
+(-1605002,"Steel yourselves, heroes, for the twin terrors Acidmaw and Dreadscale. Enter the arena!","","","","","","","","",16039,1,0,0,"jormungar intro"),
+(-1605003,"The air freezes with the introduction of our next combatant, Icehowl! Kill or be killed, champions!","","","","","","","","",16040,1,0,0,"icehowl intro"),
+(-1605004,"Tragic... They fought valiantly, but the beasts of Northrend triumphed. Let us observe a moment of silence for our fallen heroes.","","","","","","","","",16042,1,0,0,"beasts wipe"),
+(-1605000,"The monster's menajerie has been vanquished!","","","","","","","","",16041,1,0,0,"beasts victory"),
+(-1605131,"Iceholw glares at $N and lets out a bellowing roar!","","","","","","","","",0,1,0,0,"icehowl emote"),
+(-1605132,"Iceholw crashes into the Colliseum wall and is stunned!","","","","","","","","",0,1,0,0,"icehowl emote"),
+-- Jaru
+(-1605005,"Grand Warlock Wilfred Fizzlebang will summon forth your next challenge. Stand by for his entry!","","","","","","","","",16043,1,0,0,"jaru intro1"),
+(-1605006,"Thank you, Highlord! Now challengers, I will begin the ritual of summoning! When I am done, a fearsome Doomguard will appear!","","","","","","","","",16268,1,0,0,"jaru intro2"),
+(-1605007,"Prepare for oblivion!","","","","","","","","",16269,1,0,0,"jaru intro3"),
+(-1605008,"A portal opens, and Lord Jaraxxus - clearly not a doomguard - enters the arena.","","","","","","","","",0,2,0,0,"jaru intro4"),
+(-1605009,"Ah ha! Behold the absolute power of Wilfred Fizzlebang, master summoner! You are bound to ME, demon!","","","","","","","","",16270,1,0,0,"jaru intro5"),
+(-1605010,"Trifling gnome, your arrogance will be your undoing!","","","","","","","","",16143,1,0,0,"jaru intro6"),
+(-1605011,"But I'm in charge her-","","","","","","","","",16271,1,0,0,"jaru intro7"),
+(-1605012,"Lord Jaraxxus kills the Grand Warlock - the gnome's last breath an agonized scream.","","","","","","","","",0,2,0,0,"jaru intro8"),
+(-1605013,"Quickly, heroes! Destroy the demon lord before it can open a portal to its twisted demonic realm!","","","","","","","","",16044,1,0,0,"jaru intro9"),
+(-1605014,"You face Jaraxxus, eredar lord of the Burning Legion!","","","","","","","","",16144,1,0,0,"jaru aggro"),
+(-1605015,"FLESH FROM BONE!","","","","","","","","",16149,1,0,0,"jaru incinerate"),
+(-1605016,"Come forth, sister! Your master calls!","","","","","","","","",16150,1,0,0,"jaru summon mistres"),
+(-1605017,"INFERNO!.","","","","","","","","",16151,1,0,0,"jaru summon inferno"),
+(-1605018,"Insignificant gnat!","","","","","","","","",16145,1,0,0,"jaru kill1"),
+(-1605019,"Banished to the Nether!","","","","","","","","",16146,1,0,0,"jaru kill2"),
+(-1605025,"","","","","","","","","",16148,1,0,0,"jaru berserk"),
+(-1605020,"Another will take my place. Your world is doomed.","","","","","","","","",16147,1,0,0,"jaru death"),
+(-1605021,"The loss of Wilfred Fizzlebang, while unfortunate, should be a lesson to those that dare dabble in dark magic. Alas, you are victorious and must now face the next challenge.","","","","","","","","",16045,1,0,0,"jaru outro1"),
+(-1605022,"Treacherous Alliance dogs! You summon a demon lord against warriors of the Horde!? Your deaths will be swift!","","","","","","","","",16021,1,0,0,"jaru outro2"),
+(-1605023,"The Alliance doesn't need the help of a demon lord to deal with Horde filth. Come, pig!","","","","","","","","",16064,1,0,0,"jaru outro3"),
+(-1605024,"Everyone, calm down! Compose yourselves! There is no conspiracy at play here. The warlock acted on his own volition - outside of influences from the Alliance. The tournament must go on!","","","","","","","","",16046,1,0,0,"jaru outro4"),
+-- Champions:
+(-1605026,"A shallow and tragic victory. We are weaker as a whole from the losses suffered today. Who but the Lich King could benefit from such foolishness? Great warriors have lost their lives. And for what? The true threat looms ahead - the Lich King awaits us all in death.","","","","","","","","",16049,1,0,0,"champions outro"),
+(-1605027,"The next battle will be against the Argent Crusade's most powerful knights! Only by defeating them will you be deemed worthy...","","","","","","","","",16047,1,0,0,"champ tirion intro1"),
+(-1605028,"Very well, I will allow it. Fight with honor!","","","","","","","","",16048,1,0,0,"champ tirion intro2"),
+-- Aly:
+(-1605030,"The Horde demands justice! We challenge the Alliance. Allow us to battle in place of your knights, paladin. We will show these dogs what it means to insult the Horde!","","","","","","","","",16023,1,0,0,"aly intro1"),
+(-1605031,"Show them no mercy, Horde champions! LOK'TAR OGAR!","","","","","","","","",16022,1,0,0,"aly intro2"),
+(-1605032,"Glory to the Alliance!","","","","","","","","",16067,1,0,0,"aly victory"),
+(-1605033,"Weakling!","","","","","","","","",16017,1,0,0,"aly kill1"),
+(-1605034,"Pathetic!","","","","","","","","",16018,1,0,0,"aly kill2"),
+(-1605035,"Overpowered.","","","","","","","","",16019,1,0,0,"aly kill3"),
+(-1605036,"Lok'tar!","","","","","","","","",16020,1,0,0,"aly kill4"),
+-- Horde:
+(-1605040,"Our honor has been besmirched! They make wild claims and false accusations against us. I demand justice! Allow my champions to fight in place of your knights, Tirion. We challenge the Horde!","","","","","","","","",16066,1,0,0,"horde intro1"),
+(-1605041,"Fight for the glory of the Alliance, heroes! Honor your king and your people!","","","","","","","","",16065,1,0,0,"horde intro2"),
+(-1605042,"That was just a taste of what the future brings. FOR THE HORDE!","","","","","","","","",16024,1,0,0,"horde victory"),
+(-1605043,"HAH!","","","","","","","","",16060,1,0,0,"horde kill1"),
+(-1605044,"Hardly a challenge!","","","","","","","","",16061,1,0,0,"horde kill2"),
+(-1605045,"Worthless scrub.","","","","","","","","",16062,1,0,0,"horde kill3"),
+(-1605046,"Is this the best the Horde has to offer?","","","","","","","","",16063,1,0,0,"horde kill4"),
+-- Twins
+(-1605050,"Only by working together will you overcome the final challenge. From the depths of Icecrown come two of the Scourge's most powerful lieutenants: fearsome val'kyr, winged harbingers of the Lich King!","","","","","","","","",16050,1,0,0,"twins intro1"),
+(-1605051,"Let the games begin!","","","","","","","","",16037,1,0,0,"twins intro2"),
+(-1605052,"In the name of our dark master. For the Lich King. You. Will. Die.","","","","","","","","",16272,1,0,0,"twins aggro"),
+(-1605053,"CHAOS!","","","","","","","","",16274,1,0,0,"twins pact"),
+(-1605054,"Let the dark consume you!","","","","","","","","",16278,1,0,0,"twins dark vortex"),
+(-1605055,"Let the light consume you!","","","","","","","","",16279,1,0,0,"twins light vortex"),
+(-1605056,"UNWORTHY!","","","","","","","","",16276,1,0,0,"twins kill1"),
+(-1605057,"You have been measured, and found wanting!","","","","","","","","",16277,1,0,0,"twins kill2"),
+(-1605058,"The Scourge cannot be stopped...","","","","","","","","",16275,1,0,0,"twins death"),
+(-1605059,"You are finished!","","","","","","","","",16273,1,0,0,"twins berserk"),
+(-1605080,"Do you still question the might of the Horde, paladin? We will take on all comers!","","","","","","","","",16025,1,0,0,"twins horde outro"),
+(-1605081,"Not even the Lich's King most powerfull minions can stand against the Alliance. All hail our victors!","","","","","","","","",16068,1,0,0,"twins aly outro"),
+-- Anub
+(-1605060,"A mighty blow has been dealt to the Lich King! You have proven yourselves able bodied champions of the Argent Crusade. Together we will strike at Icecrown Citadel and destroy what remains of the Scourge! There is no challenge that we cannot face united!","","","","","","","","",16051,1,0,0,"anub intro1"),
+(-1605061,"You will have your challenge, Fordring.","","","","","","","","",16321,1,0,0,"anub intro2"),
+(-1605062,"The Lich King appears.","","","","","","","","",0,2,0,0,"anub intro3"),
+(-1605063,"Arthas! You are hopelessly outnumbered! Lay down Frostmourne and I will grant you a just death.","","","","","","","","",16052,1,0,0,"anub intro4"),
+(-1605064,"The Lich King laughs.","","","","","","","","",0,2,0,0,"anub intro5"),
+(-1605065,"The Nerubians built an empire beneath the frozen wastes of Northrend. An empire that you so foolishly built your structures upon. MY EMPIRE.","","","","","","","","",16322,1,0,0,"anub intro 6"),
+(-1605066,"The souls of your fallen champions will be mine, Fordring.","","","","","","","","",16323,1,0,0,"anub intro 7"),
+(-1605075,"The Lich King destroys the floor of the arena, causing the players to fall down into the Icy Depths.","","","","","","","","",0,2,0,0,"anub intro8"),
+(-1605076,"Ahhh... Our guests arrived, just as the master promised.","","","","","","","","",16235,1,0,0,"anub intro9"),
+(-1605067,"This place will serve as your tomb!","","","","","","","","",16234,1,0,0,"anub aggro"),
+(-1605068,"Auum na-l ak-k-k-k, isshhh. Rise, minions. Devour...","","","","","","","","",16240,1,0,0,"anub submerge"),
+(-1605069,"The swarm shall overtake you!","","","","","","","","",16241,1,0,0,"anub swarm"),
+(-1605070,"F-lakkh shir!","","","","","","","","",16236,1,0,0,"anub kill1"),
+(-1605071,"Another soul to sate the host.","","","","","","","","",16237,1,0,0,"anub kill2"),
+(-1605072,"I have failed you, master....","","","","","","","","",16238,1,0,0,"anub death"),
+(-1605073,"","","","","","","","","",16239,1,0,0,"anub berserk1"),
+(-1605074,"Champions, you're alive! Not only have you defeated every challenge of the Trial of the Crusader, but thwarted Arthas directly! Your skill and cunning will prove to be a powerful weapon against the Scourge. Well done! Allow one of my mages to transport you back to the surface!","","","","","","","","",0,1,0,0,"anub outro"); -- fix id!
diff --git a/system/ScriptLoader.cpp b/system/ScriptLoader.cpp
index 3a5d099..bdf11e4 100644
--- a/system/ScriptLoader.cpp
+++ b/system/ScriptLoader.cpp
@@ -287,8 +287,10 @@ extern void AddSC_instance_azjol_nerub();
 extern void AddSC_northrend_beasts();                       //Crusaders' Coliseum, trial_of_the_crusader
 extern void AddSC_boss_jaraxxus();
 extern void AddSC_boss_anubarak_trial();
+extern void AddSC_faction_champions();
 extern void AddSC_twin_valkyr();
 extern void AddSC_instance_trial_of_the_crusader();
+extern void AddSC_trial_of_the_crusader();
 extern void AddSC_boss_dred();                              //draktharon_keep
 extern void AddSC_boss_novos();                             
 extern void AddSC_boss_tharonja();
@@ -763,8 +765,10 @@ void AddScripts()
     AddSC_northrend_beasts();                               //Crusaders' Coliseum, trial_of_the_crusader
     AddSC_boss_jaraxxus();
     AddSC_boss_anubarak_trial();
+    AddSC_faction_champions();
     AddSC_twin_valkyr();
     AddSC_instance_trial_of_the_crusader();
+    AddSC_trial_of_the_crusader();
     AddSC_boss_dred();                                      //draktharon_keep
     AddSC_boss_novos();                                      
     AddSC_boss_tharonja();
