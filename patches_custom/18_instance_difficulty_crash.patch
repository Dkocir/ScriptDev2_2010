diff --git a/src/game/MiscHandler.cpp b/src/game/MiscHandler.cpp
index 6e4f43c..836bc73 100644
--- a/src/game/MiscHandler.cpp
+++ b/src/game/MiscHandler.cpp
@@ -1390,6 +1390,14 @@ void WorldSession::HandleSetDungeonDifficultyOpcode( WorldPacket & recv_data )
     {
         if(pGroup->IsLeader(_player->GetGUID()))
         {
+			//do not let set dungeon difficulty if any one in this group in dungeon
+			Group::MemberSlotList g_members = pGroup->GetMemberSlots();
+			for (Group::member_citerator itr = g_members.begin(); itr != g_members.end(); itr++)
+			{
+				Player *gm_member = sObjectMgr.GetPlayer(itr->guid);
+				if (gm_member && gm_member->GetMap() && gm_member->GetMap()->IsDungeon())
+					return;
+			}
             // the difficulty is set even if the instances can't be reset
             //_player->SendDungeonDifficulty(true);
             pGroup->ResetInstances(INSTANCE_RESET_CHANGE_DIFFICULTY, false, _player);
@@ -1434,6 +1442,14 @@ void WorldSession::HandleSetRaidDifficultyOpcode( WorldPacket & recv_data )
     {
         if(pGroup->IsLeader(_player->GetGUID()))
         {
+			//do not let set dungeon difficulty if any one in this group in dungeon
+			Group::MemberSlotList g_members = pGroup->GetMemberSlots();
+			for (Group::member_citerator itr = g_members.begin(); itr != g_members.end(); itr++)
+			{
+				Player *gm_member = sObjectMgr.GetPlayer(itr->guid);
+				if (gm_member && gm_member->GetMap() && gm_member->GetMap()->IsDungeon())
+					return;
+			}
             // the difficulty is set even if the instances can't be reset
             //_player->SendDungeonDifficulty(true);
             pGroup->ResetInstances(INSTANCE_RESET_CHANGE_DIFFICULTY, true, _player);
