diff --git a/src/game/SpellEffects.cpp b/src/game/SpellEffects.cpp
index 4500374..b5ae95d 100644
--- a/src/game/SpellEffects.cpp
+++ b/src/game/SpellEffects.cpp
@@ -7605,8 +7605,11 @@ void Spell::EffectSummonAllTotems(SpellEffectIndex eff_idx)
     for(int32 slot = 0; slot < amount_buttons; ++slot)
         if (ActionButton const* actionButton = ((Player*)m_caster)->GetActionButton(start_button+slot))
             if (actionButton->GetType()==ACTION_BUTTON_SPELL)
-                if (uint32 spell_id = actionButton->GetAction())
+			{
+                uint32 spell_id = actionButton->GetAction();
+                if (spell_id && !((Player*)m_caster)->HasSpellCooldown(spell_id))
                     m_caster->CastSpell(unitTarget,spell_id,true);
+			}
 }
 
 void Spell::EffectDestroyAllTotems(SpellEffectIndex /*eff_idx*/)
diff --git a/src/game/Unit.cpp b/src/game/Unit.cpp
index e2f10a3..e6827e0 100644
--- a/src/game/Unit.cpp
+++ b/src/game/Unit.cpp
@@ -5929,7 +5929,12 @@ Unit* Unit::SelectMagnetTarget(Unit *victim, SpellEntry const *spellInfo)
         for(Unit::AuraList::const_iterator itr = magnetAuras.begin(); itr != magnetAuras.end(); ++itr)
             if(Unit* magnet = (*itr)->GetCaster())
                 if(magnet->IsWithinLOSInMap(this) && magnet->isAlive())
-                    return magnet;
+				{
+                    //Destroy totem
+                    if( ((Creature*)magnet)->isTotem())
+                         magnet->CastSpell(magnet, 5, true);
+                     return magnet;
+				}
     }
     // Melee && ranged case
     else
